# rag_system.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG (Retrieval-Augmented Generation) —Å–∏—Å—Ç–µ–º–æ–π.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Pinecone
–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
"""

import time
import hashlib
import threading
import logging
import requests
from typing import Tuple, Dict, Any, Optional, List
from functools import lru_cache

import google.generativeai as genai
from pinecone import Pinecone

from config import config


class RAGSystem:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG —Å–∏—Å—Ç–µ–º–æ–π.
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Å–µ—Ç–µ–≤—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º
    2. –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    3. Graceful degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    4. Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥—ã
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Gemini –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        genai.configure(api_key=config.GEMINI_API_KEY)
        self.embedding_model = config.EMBEDDING_MODEL
        
        # Pinecone –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–µ–Ω–∏–≤–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        self.pinecone_index = None
        self.pinecone_available = False
        self.pinecone_lock = threading.Lock()
        
        # –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.rag_cache = {}
        self.cache_lock = threading.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.stats = {
            'cache_hits': 0,
            'cache_misses': 0,
            'successful_queries': 0,
            'failed_queries': 0
        }
        self.stats_lock = threading.Lock()
        
        self.logger.info("üîç RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    @lru_cache(maxsize=1)
    def _get_pinecone_index(self):
        """
        –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone –∏–Ω–¥–µ–∫—Å–∞.
        
        –ü—Ä–∏–Ω—Ü–∏–ø: –ù–µ —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
        –∞ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ. –≠—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç
        —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–µ—Ç–µ–≤—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º –ø—Ä–∏ –¥–µ–ø–ª–æ–µ.
        """
        with self.pinecone_lock:
            if self.pinecone_index is not None:
                return self.pinecone_index
            
            try:
                self.logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                pc = Pinecone(api_key=config.PINECONE_API_KEY)
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                try:
                    facts_description = pc.describe_index("ukido")
                    self.pinecone_index = pc.Index(host=facts_description.host)
                    self.logger.info("‚úÖ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏")
                except Exception as dynamic_error:
                    self.logger.warning(f"–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {dynamic_error}")
                    # Fallback –Ω–∞ –ø—Ä—è–º–æ–π host
                    self.pinecone_index = pc.Index(host=config.PINECONE_HOST_FACTS)
                    self.logger.info("‚úÖ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π host")
                
                self.pinecone_available = True
                return self.pinecone_index
                
            except Exception as e:
                self.pinecone_available = False
                self.logger.error(f"‚ùå Pinecone –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                return None
    
    def _get_cache_key(self, query: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MD5 —Ö–µ—à –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏.
        """
        return hashlib.md5(query.encode()).hexdigest()
    
    def _get_cached_result(self, cache_key: str) -> Optional[Tuple[str, Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω.
        """
        with self.cache_lock:
            if cache_key in self.rag_cache:
                cached_entry = self.rag_cache[cache_key]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞
                if time.time() - cached_entry['timestamp'] < config.RAG_CACHE_TTL:
                    with self.stats_lock:
                        self.stats['cache_hits'] += 1
                    return cached_entry['result']
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
                    del self.rag_cache[cache_key]
        
        with self.stats_lock:
            self.stats['cache_misses'] += 1
        return None
    
    def _cache_result(self, cache_key: str, result: Tuple[str, Dict[str, Any]]):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞.
        """
        with self.cache_lock:
            # –ï—Å–ª–∏ –∫–µ—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
            if len(self.rag_cache) >= config.MAX_CACHE_SIZE:
                oldest_key = min(self.rag_cache.keys(), 
                               key=lambda k: self.rag_cache[k]['timestamp'])
                del self.rag_cache[oldest_key]
            
            self.rag_cache[cache_key] = {
                'result': result,
                'timestamp': time.time()
            }
    
    def _rewrite_query_for_better_search(self, query: str, conversation_history: List[str]) -> str:
        """
        –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–µ.
        
        –ü—Ä–∏–º–µ—Ä: "–∞ —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?" -> "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å –Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä –≤ Ukido"
        
        –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î.
        """
        if not conversation_history or len(query.split()) > 3:
            return query  # –ó–∞–ø—Ä–æ—Å —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_messages = [msg for msg in conversation_history 
                        if msg.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")][-3:]
        
        if not user_messages:
            return query
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        context = ' '.join(user_messages).lower()
        
        # –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å –∫—É—Ä—Å—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if any(word in context for word in ['–∫—É—Ä—Å', '–∑–∞–Ω—è—Ç–∏–µ', '—É—Ä–æ–∫']):
            if any(word in query.lower() for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
                return f"—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ Ukido {query}"
            elif any(word in query.lower() for word in ['–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ']):
                return f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ Ukido {query}"
        
        return query
    
    def _create_embedding(self, text: str) -> Optional[List[float]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Google Gemini.
        –í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫—É.
        """
        try:
            response = genai.embed_content(
                model=self.embedding_model,
                content=text,
                task_type="RETRIEVAL_QUERY"
            )
            return response['embedding']
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            return None
    
    def _search_in_pinecone(self, query_embedding: List[float], top_k: int = 3) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Pinecone –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        index = self._get_pinecone_index()
        if not index:
            return {'matches': []}
        
        try:
            results = index.query(
                vector=query_embedding,
                top_k=top_k,
                include_metadata=True
            )
            return results
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Pinecone: {e}")
            return {'matches': []}
    
    def _format_search_results(self, results: Dict[str, Any]) -> Tuple[str, List[Dict], float]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç–µ.
        
        Returns:
            Tuple[str, List[Dict], float]: (–∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è_–∏–Ω—Ñ–æ, –ª—É—á—à–∏–π_—Å–∫–æ—Ä)
        """
        context_chunks = []
        debug_info = []
        best_score = 0
        
        for match in results.get('matches', []):
            score = match.get('score', 0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if score > 0.5:
                text = match.get('metadata', {}).get('text', '')
                context_chunks.append(text)
                best_score = max(best_score, score)
                
                debug_info.append({
                    "score": round(score, 3),
                    "source": match.get('metadata', {}).get('source', 'unknown'),
                    "text_preview": text[:150] + "..." if len(text) > 150 else text
                })
        
        context = "\n".join(context_chunks)
        return context, debug_info, best_score
    
    def _get_fallback_context(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Ukido, –µ—Å–ª–∏ RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
        –≠—Ç–æ –ø—Ä–∏–º–µ—Ä graceful degradation - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ—Ç–∫–∞–∑–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
        """
        return """Ukido - –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ —Ä–∞–∑–≤–∏—Ç–∏—è soft skills –¥–ª—è –¥–µ—Ç–µ–π. 
        
–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã:
- '–Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä' (7-10 –ª–µ—Ç, 6000 –≥—Ä–Ω/–º–µ—Å) - —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
- '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å' (9-12 –ª–µ—Ç, 7500 –≥—Ä–Ω/–º–µ—Å) - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
- '–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤' (11-14 –ª–µ—Ç, 8000 –≥—Ä–Ω/–º–µ—Å) - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
- '–î–∏–∞–ª–æ–≥' (6-8 –ª–µ—Ç, 5500 –≥—Ä–Ω/–º–µ—Å) - –æ—Å–Ω–æ–≤—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏

–í—Å–µ –∫—É—Ä—Å—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –æ–Ω–ª–∞–π–Ω –≤ –º–∏–Ω–∏-–≥—Ä—É–ø–ø–∞—Ö –¥–æ 6 —á–µ–ª–æ–≤–µ–∫."""
    
    def search_knowledge_base(self, query: str, conversation_history: Optional[List[str]] = None) -> Tuple[str, Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        2. –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        3. –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        4. –ò—â–µ–º –≤ Pinecone
        5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        6. –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Returns:
            Tuple[str, Dict[str, Any]]: (–Ω–∞–π–¥–µ–Ω–Ω—ã–π_–∫–æ–Ω—Ç–µ–∫—Å—Ç, –º–µ—Ç—Ä–∏–∫–∏)
        """
        search_start = time.time()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not query or not query.strip():
            return "", {"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å", "search_time": 0}
        
        conversation_history = conversation_history or []
        
        # –£–ª—É—á—à–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        enhanced_query = self._rewrite_query_for_better_search(query, conversation_history)
        cache_key = self._get_cache_key(enhanced_query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_result = self._get_cached_result(cache_key)
        if cached_result:
            self.logger.info(f"–ö–µ—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {enhanced_query}")
            return cached_result
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            embedding_start = time.time()
            query_embedding = self._create_embedding(enhanced_query)
            embedding_time = time.time() - embedding_start
            
            if not query_embedding:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥")
            
            # –ò—â–µ–º –≤ Pinecone
            search_start_time = time.time()
            search_results = self._search_in_pinecone(query_embedding)
            search_time = time.time() - search_start_time
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            context, debug_info, best_score = self._format_search_results(search_results)
            
            total_time = time.time() - search_start
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = {
                "search_time": round(total_time, 2),
                "embedding_time": round(embedding_time, 2),
                "pinecone_time": round(search_time, 2),
                "chunks_found": len(debug_info),
                "best_score": round(best_score, 3),
                "relevance_desc": self._get_relevance_description(best_score),
                "speed_desc": self._get_speed_description(total_time),
                "success": True,
                "original_query": query,
                "enhanced_query": enhanced_query,
                "found_chunks_debug": debug_info,
                "cache_hit": False
            }
            
            result = (context, metrics)
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cache_result(cache_key, result)
            
            with self.stats_lock:
                self.stats['successful_queries'] += 1
            
            return result
            
        except Exception as e:
            total_time = time.time() - search_start
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ RAG —Å–∏—Å—Ç–µ–º–µ: {e}")
            
            # Graceful degradation - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            fallback_context = self._get_fallback_context()
            metrics = {
                "search_time": round(total_time, 2),
                "error": str(e),
                "fallback_used": True,
                "chunks_found": 1,
                "success": False,
                "cache_hit": False
            }
            
            with self.stats_lock:
                self.stats['failed_queries'] += 1
            
            return fallback_context, metrics
    
    def _get_relevance_description(self, score: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if score >= 0.9:
            return "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
        elif score >= 0.7:
            return "–•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
        elif score >= 0.5:
            return "–°—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
        else:
            return "–°–ª–∞–±–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    
    def _get_speed_description(self, seconds: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
        if seconds < 2:
            return "–ë—ã—Å—Ç—Ä–æ"
        elif seconds <= 5:
            return "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
        else:
            return "–ú–µ–¥–ª–µ–Ω–Ω–æ"
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        """
        with self.stats_lock:
            stats_copy = self.stats.copy()
        
        with self.cache_lock:
            cache_size = len(self.rag_cache)
        
        total_queries = stats_copy['successful_queries'] + stats_copy['failed_queries']
        
        return {
            **stats_copy,
            "cache_size": cache_size,
            "total_queries": total_queries,
            "success_rate": round(stats_copy['successful_queries'] / max(total_queries, 1) * 100, 1),
            "cache_hit_rate": round(stats_copy['cache_hits'] / max(stats_copy['cache_hits'] + stats_copy['cache_misses'], 1) * 100, 1),
            "pinecone_available": self.pinecone_available
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RAG —Å–∏—Å—Ç–µ–º—ã
rag_system = RAGSystem()
