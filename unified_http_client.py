# unified_http_client.py (NEW MODULE)
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Unified Connection Management –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã

–ü–†–û–ë–õ–ï–ú–ê: –†–∞–∑–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ HTTP requests:
- app.py: ProductionConnectionPool
- telegram_bot.py: requests –Ω–∞–ø—Ä—è–º—É—é  
- hubspot_client.py: requests –Ω–∞–ø—Ä—è–º—É—é

–†–ï–®–ï–ù–ò–ï: –ï–¥–∏–Ω—ã–π connection manager –¥–ª—è –≤—Å–µ—Ö HTTP –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import requests
import threading
import atexit
import logging
from typing import Dict, Any, Optional
import time
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry


class UnifiedHTTPClient:
    """
    –ï–¥–∏–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
    
    –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
    1. Connection pooling –¥–ª—è –≤—Å–µ—Ö HTTP requests
    2. Retry –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å exponential backoff
    3. Proper timeout configuration
    4. Thread-safe operations
    5. Resource cleanup
    6. Performance metrics
    """
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        """Singleton pattern –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ connection pool"""
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if hasattr(self, '_initialized'):
            return
            
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–µ–º session —Å connection pooling
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "PUT", "DELETE", "OPTIONS", "TRACE", "POST"]
        )
        
        # HTTP –∏ HTTPS –∞–¥–∞–ø—Ç–µ—Ä—ã —Å connection pooling
        adapter = HTTPAdapter(
            pool_connections=20,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            pool_maxsize=40,      # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º pool size
            max_retries=retry_strategy,
            pool_block=False      # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ pool
        )
        
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ timeouts
        self.default_timeout = (5, 15)  # (connect, read)
        
        # Performance metrics
        self.metrics = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'retry_attempts': 0,
            'avg_response_time': 0,
            'telegram_requests': 0,
            'hubspot_requests': 0,
            'gemini_requests': 0
        }
        self.metrics_lock = threading.Lock()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup
        atexit.register(self.cleanup)
        
        self._initialized = True
        self.logger.info("üåê Unified HTTP Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def make_request(self, method: str, url: str, 
                    timeout: Optional[tuple] = None,
                    service_name: str = 'unknown',
                    **kwargs) -> requests.Response:
        """
        Unified –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö HTTP requests –≤ —Å–∏—Å—Ç–µ–º–µ
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, etc.)
            url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            timeout: Tuple (connect, read) timeout
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è requests
            
        Returns:
            requests.Response object
        """
        start_time = time.time()
        timeout = timeout or self.default_timeout
        
        try:
            with self.metrics_lock:
                self.metrics['total_requests'] += 1
                if service_name in ['telegram', 'hubspot', 'gemini']:
                    self.metrics[f'{service_name}_requests'] += 1
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ unified session
            response = self.session.request(
                method=method,
                url=url,
                timeout=timeout,
                **kwargs
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞
            response_time = time.time() - start_time
            with self.metrics_lock:
                self.metrics['successful_requests'] += 1
                self._update_avg_response_time(response_time)
            
            self.logger.debug(f"‚úÖ {service_name} {method} {url} - {response.status_code} ({response_time:.3f}s)")
            return response
            
        except requests.exceptions.RetryError as e:
            with self.metrics_lock:
                self.metrics['failed_requests'] += 1
                self.metrics['retry_attempts'] += 1
            self.logger.error(f"‚ùå {service_name} {method} {url} - Retry exhausted: {e}")
            raise
            
        except requests.exceptions.Timeout as e:
            with self.metrics_lock:
                self.metrics['failed_requests'] += 1
            self.logger.error(f"‚è∞ {service_name} {method} {url} - Timeout: {e}")
            raise
            
        except Exception as e:
            with self.metrics_lock:
                self.metrics['failed_requests'] += 1
            self.logger.error(f"üí• {service_name} {method} {url} - Error: {e}")
            raise
    
    def post(self, url: str, service_name: str = 'unknown', 
             timeout: Optional[tuple] = None, **kwargs) -> requests.Response:
        """Convenience method for POST requests"""
        return self.make_request('POST', url, timeout, service_name, **kwargs)
    
    def get(self, url: str, service_name: str = 'unknown',
            timeout: Optional[tuple] = None, **kwargs) -> requests.Response:
        """Convenience method for GET requests"""
        return self.make_request('GET', url, timeout, service_name, **kwargs)
    
    def put(self, url: str, service_name: str = 'unknown',
            timeout: Optional[tuple] = None, **kwargs) -> requests.Response:
        """Convenience method for PUT requests"""
        return self.make_request('PUT', url, timeout, service_name, **kwargs)
    
    def delete(self, url: str, service_name: str = 'unknown',
               timeout: Optional[tuple] = None, **kwargs) -> requests.Response:
        """Convenience method for DELETE requests"""
        return self.make_request('DELETE', url, timeout, service_name, **kwargs)
    
    def _update_avg_response_time(self, response_time: float):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
        current_avg = self.metrics['avg_response_time']
        successful_requests = self.metrics['successful_requests']
        
        if successful_requests == 1:
            self.metrics['avg_response_time'] = response_time
        else:
            new_avg = (current_avg * (successful_requests - 1) + response_time) / successful_requests
            self.metrics['avg_response_time'] = new_avg
    
    def get_metrics(self) -> Dict[str, Any]:
        """Thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.metrics_lock:
            metrics_copy = self.metrics.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_requests = metrics_copy['total_requests']
        if total_requests > 0:
            metrics_copy['success_rate'] = round(
                (metrics_copy['successful_requests'] / total_requests) * 100, 1
            )
            metrics_copy['failure_rate'] = round(
                (metrics_copy['failed_requests'] / total_requests) * 100, 1
            )
        
        return metrics_copy
    
    def cleanup(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, 'session'):
                self.session.close()
                self.logger.info("üåê Unified HTTP Client –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ HTTP client: {e}")
    
    def __del__(self):
        """Backup cleanup"""
        self.cleanup()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä unified HTTP client
http_client = UnifiedHTTPClient()