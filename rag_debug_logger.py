# rag_debug_logger.py
"""
üîç RAG Debug Logger v2: –õ–æ–≥–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –ò —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª—ã.
"""
import logging
import time
import os
from datetime import datetime
from typing import List

class RAGDebugLogger:
    """
    –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã. –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏.
    """
    
    def __init__(self):
        self.logger = logging.getLogger("RAG_DEBUG")
        self.log_dir = "rag_debug_logs"
        self.session_id = None
        self.start_time = None
        self.current_session_logs = [] # –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        if not self.logger.handlers:
            formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(formatter)
            self.logger.addHandler(console_handler)
            self.logger.setLevel(logging.INFO)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs(self.log_dir, exist_ok=True)
    
    def _log(self, message: str, level=logging.INFO):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥: –ª–æ–≥–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –ò –≤ –±—É—Ñ–µ—Ä —Å–µ—Å—Å–∏–∏."""
        self.logger.log(level, message)
        
        if self.session_id is not None:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
            log_entry = f"{timestamp} | {message}"
            self.current_session_logs.append(log_entry)

    def start_session(self, chat_id: str, user_message: str):
        """–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä."""
        self.session_id = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{chat_id}"
        self.start_time = time.time()
        self.current_session_logs = [] # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏

        self._log("=" * 60)
        self._log(f"üöÄ NEW SESSION: {self.session_id}")
        self._log(f"üë§ Chat: {chat_id}")
        self._log(f"‚ùì Question: {user_message}")
        self._log("=" * 60)
    
    def log_enricher_input(self, original_query: str, history: List[str]):
        self._log("üîç STAGE 1: ENRICHER INPUT")
        self._log(f"Original Query: {original_query}")
        self._log(f"History Messages: {len(history)}")
        if history:
            self._log("Recent History:")
            for i, msg in enumerate(history[-3:], 1):
                preview = msg[:80] + "..." if len(msg) > 80 else msg
                self._log(f"  {i}. {preview}")
    
    def log_enricher_prompt(self, prompt: str):
        self._log("ü§ñ STAGE 2: DYNAMIC PROMPT (SYSTEM INSTRUCTION)")
        self._log(f"Prompt Length: {len(prompt)} chars")
        self._log("Full Prompt:")
        self._log("-" * 40)
        self._log(prompt)
        self._log("-" * 40)
    
    def log_retrieval_results(self, chunks: List[str], scores: List[float], 
                            time_taken: float, total_before_rerank: int):
        self._log("üéØ STAGE 3: RETRIEVAL & RERANKING RESULTS")
        self._log(f"Time: {time_taken:.3f}s")
        self._log(f"Chunks: {total_before_rerank} ‚Üí {len(chunks)} (after rerank)")
        
        if scores:
            avg_score = sum(scores) / len(scores)
            self._log(f"Scores: MAX={max(scores):.3f} AVG={avg_score:.3f} MIN={min(scores):.3f}")
        
        self._log("Found Chunks:")
        for i, (chunk, score) in enumerate(zip(chunks, scores), 1):
            preview = chunk[:100].replace('\n', ' ')
            self._log(f"  {i}. [{score:.3f}] {preview}...")
    
    # –£ –Ω–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ app.py, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –Ω—É–∂–Ω—ã,
    # –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∏—Ö –ø—É—Å—Ç—ã–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≥–¥–µ-—Ç–æ –≤—ã–∑—ã–≤–∞–ª–∏—Å—å.
    def log_final_prompt(self, prompt: str, history_count: int): pass
    def log_enricher_output(self, output: str, time_taken: float): pass


    def log_final_response(self, response: str, time_taken: float):
        """–õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –°–û–•–†–ê–ù–Ø–ï–ú –õ–û–ì –°–ï–°–°–ò–ò –í –§–ê–ô–õ."""
        total_time = time.time() - self.start_time if self.start_time else 0
        
        self._log("üéâ STAGE 4: FINAL RESPONSE")
        self._log(f"Generation Time: {time_taken:.3f}s")
        self._log(f"Total Session Time: {total_time:.3f}s")
        self._log(f"Response Length: {len(response)} chars")
        self._log("AI Response:")
        self._log("-" * 40)
        self._log(response)
        self._log("-" * 40)
        
        # ‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –§–ê–ô–õ
        if self.session_id and self.current_session_logs:
            log_filename = os.path.join(self.log_dir, f"{self.session_id}.log")
            try:
                with open(log_filename, 'w', encoding='utf-8') as f:
                    f.write("\n".join(self.current_session_logs))
                
                self._log("üìä SESSION COMPLETE & SAVED")
                self.logger.info(f"üìù Log file saved: {log_filename}")

            except IOError as e:
                self.logger.error(f"‚ùå Failed to save session log file {log_filename}: {e}")
        
        self._log("=" * 60)
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
        self.session_id = None
        self.current_session_logs = []
        self.start_time = None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rag_debug = RAGDebugLogger()