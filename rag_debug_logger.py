# rag_debug_logger.py
"""
üîç RAG Debug Logger v3: –õ–æ–≥–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –≤ –ø–∞–º—è—Ç—å
–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –û–î–ò–ù —Ñ–∞–π–ª.
"""
import logging
import time
import os
from datetime import datetime
from typing import List

class RAGDebugLogger:
    def __init__(self):
        self.logger = logging.getLogger("RAG_DEBUG")
        self.log_dir = "rag_debug_logs"
        self.full_session_logs = []  # ‚úÖ –ï–¥–∏–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤

        if not self.logger.handlers:
            formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(formatter)
            self.logger.addHandler(console_handler)
            self.logger.setLevel(logging.INFO)
        
        os.makedirs(self.log_dir, exist_ok=True)
    
    def _log(self, message: str, level=logging.INFO):
        self.logger.log(level, message)
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        log_entry = f"{timestamp} | {message}"
        self.full_session_logs.append(log_entry)

    # –ú–µ—Ç–æ–¥—ã start_session, log_enricher_input –∏ —Ç.–¥. —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞—é—Ç _log
    def start_session(self, chat_id: str, user_message: str):
        self._log("=" * 80)
        self._log(f"üöÄ NEW SESSION | Chat: {chat_id}")
        self._log(f"‚ùì Question: {user_message}")
    
    def log_enricher_prompt(self, prompt: str):
        self._log("ü§ñ DYNAMIC SYSTEM PROMPT:")
        self._log(prompt)
    
    def log_retrieval_results(self, chunks: List[str], scores: List[float], time_taken: float, total_before_rerank: int):
        self._log(f"üéØ RETRIEVAL & RERANKING | Time: {time_taken:.3f}s | Chunks: {total_before_rerank} -> {len(chunks)}")
        if scores: self._log(f"Scores: MAX={max(scores):.3f} AVG={sum(scores) / len(scores):.3f}")
        for i, (chunk, score) in enumerate(zip(chunks, scores), 1):
            self._log(f"  Chunk {i}. [{score:.3f}] {chunk[:100].replace(chr(10), ' ')}...")
    
    def log_final_response(self, response: str, time_taken: float):
        self._log("üéâ FINAL RESPONSE")
        self._log(f"AI Response: {response}")
        self._log("-" * 80)

    # ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –ª–æ–≥–∞
    def save_full_log_to_file(self, filename: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤ –æ–¥–∏–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª."""
        if not self.full_session_logs:
            self.logger.warning("–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return False
            
        log_filepath = os.path.join(self.log_dir, filename)
        try:
            with open(log_filepath, 'w', encoding='utf-8') as f:
                f.write("\n".join(self.full_session_logs))
            self.logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {log_filepath}")
            self.full_session_logs = [] # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            return True
        except IOError as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞ {log_filepath}: {e}")
            return False

rag_debug = RAGDebugLogger()