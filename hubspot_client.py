# hubspot_client.py (CRITICAL CONNECTION POOLING FIX)
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ unified connection pooling

–ò–ó–ú–ï–ù–ï–ù–ò–Ø:
1. –ó–∞–º–µ–Ω–µ–Ω –ø—Ä—è–º–æ–π requests –Ω–∞ unified_http_client
2. –î–æ–±–∞–≤–ª–µ–Ω proper error handling —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
3. Performance metrics –¥–ª—è HubSpot API calls
4. Thread-safe operations
5. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
"""

import threading
import logging
import time
from typing import Dict, Any, Optional
from config import config

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º unified HTTP client
try:
    from unified_http_client import http_client
except ImportError:
    # Fallback –µ—Å–ª–∏ unified_http_client –Ω–µ –Ω–∞–π–¥–µ–Ω
    import requests
    http_client = None
    logging.getLogger(__name__).warning("Unified HTTP client –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telegram_bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# –ò–°–ü–†–ê–í–õ–ï–ù–û: Lazy import –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è circular dependencies
telegram_bot = None


class HubSpotClient:
    """
    THREAD-SAFE –≤–µ—Ä—Å–∏—è HubSpot –∫–ª–∏–µ–Ω—Ç–∞ —Å unified connection pooling
    
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    1. Unified HTTP connection pooling
    2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –¥–ª—è –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    3. Performance metrics –∏ error tracking
    4. Enhanced error handling —Å graceful degradation
    """
    
    def __init__(self):
        self.api_key = config.HUBSPOT_API_KEY
        self.base_url = "https://api.hubapi.com"
        self.logger = logging.getLogger(__name__)
        
        # Performance metrics
        self.metrics = {
            'contacts_created': 0,
            'webhooks_processed': 0,
            'api_errors': 0,
            'avg_create_time': 0,
            'follow_up_messages_sent': 0
        }
        self.metrics_lock = threading.Lock()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å unified HTTP client
        self.use_unified_client = http_client is not None
        if not self.use_unified_client:
            import requests
            self.fallback_session = requests.Session()
            self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback HTTP client –¥–ª—è HubSpot")
        
        self.logger.info("üîó Thread-safe HubSpot –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_contact(self, form_data: Dict[str, Any]) -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ unified HTTP client
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['firstName', 'lastName', 'email']
        for field in required_fields:
            if not form_data.get(field):
                self.logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        url = f"{self.base_url}/crm/v3/objects/contacts"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        contact_data = {
            "properties": {
                "firstname": str(form_data["firstName"])[:50],
                "lastname": str(form_data["lastName"])[:50], 
                "email": str(form_data["email"])[:100],
                "telegram_user_id": str(form_data.get("userId", ""))[:20]
            }
        }
        
        start_time = time.time()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º unified HTTP client
            if self.use_unified_client:
                response = http_client.post(
                    url=url,
                    service_name='hubspot',
                    headers=headers,
                    json=contact_data,
                    timeout=(10, 30)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ timeouts –¥–ª—è HubSpot API
                )
            else:
                # Fallback –Ω–∞ –ø—Ä—è–º—ã–µ requests
                response = self.fallback_session.post(
                    url, headers=headers, json=contact_data, timeout=(10, 30)
                )
            
            create_time = time.time() - start_time
            
            if response.status_code == 201:
                contact_info = response.json()
                contact_id = contact_info.get('id', 'unknown')
                
                with self.metrics_lock:
                    self.metrics['contacts_created'] += 1
                    self._update_avg_create_time(create_time)
                
                self.logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ HubSpot: {contact_id} ({create_time:.3f}s)")
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º follow-up —Å–æ–æ–±—â–µ–Ω–∏—è
                self._schedule_follow_up_messages_async(form_data)
                
                return True
            else:
                error_data = response.json() if response.content else {}
                self.logger.error(f"‚ùå HubSpot API error {response.status_code}: {error_data}")
                
                with self.metrics_lock:
                    self.metrics['api_errors'] += 1
                return False
                
        except Exception as e:
            with self.metrics_lock:
                self.metrics['api_errors'] += 1
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return False
    
    def _schedule_follow_up_messages_async(self, form_data: Dict[str, Any]):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        def schedule_messages():
            try:
                user_id = form_data.get('userId')
                if not user_id:
                    self.logger.warning("UserId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è follow-up —Å–æ–æ–±—â–µ–Ω–∏–π")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º telegram_bot —á–µ—Ä–µ–∑ lazy import
                global telegram_bot
                if telegram_bot is None:
                    from telegram_bot import telegram_bot as tb
                    telegram_bot = tb
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                first_name = form_data.get('firstName', '–¥—Ä—É–≥')

                # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
                self.logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}")
                threading.Timer(60, self._send_follow_up_message, 
                              args=(user_id, 'first_follow_up', first_name)).start()

                # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
                self.logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}")
                threading.Timer(120, self._send_follow_up_message, 
                              args=(user_id, 'second_follow_up', first_name)).start()
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è follow-up —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=schedule_messages, daemon=True).start()
    
    def _send_follow_up_message(self, user_id: str, message_type: str, first_name: str = '–¥—Ä—É–≥'):
        """
        THREAD-SAFE –æ—Ç–ø—Ä–∞–≤–∫–∞ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            messages = {
                'first_follow_up': f"""–ù—É —á—Ç–æ, {first_name}, –∫–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è? 
–ì–æ–≤–æ—Ä—è—Ç, –ø–æ—Å–ª–µ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–ø–µ–∫—Ç–∞–∫–ª—è —Ö–æ—á–µ—Ç—Å—è –æ–±—Å—É–¥–∏—Ç—å. –ê –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞ ‚Äî —Ö–æ—á–µ—Ç—Å—è –ª–∏–±–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ª–∏–±–æ –∑–∞–±—ã—Ç—å. –ù–∞–¥–µ—é—Å—å, —É –≤–∞—Å –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
–ï—Å–ª–∏ —á—Ç–æ, –º—ã —Ç—É—Ç, –Ω–∞ —Å–≤—è–∑–∏.""",
                
                'second_follow_up': f"""{first_name}, —ç—Ç–æ —Å–Ω–æ–≤–∞ –º—ã. 
–ù–µ —Ç–æ —á—Ç–æ–±—ã –º—ã —Å–∫—É—á–∞–ª–∏, –Ω–æ —Ç–∏—à–∏–Ω–∞ –≤ —ç—Ñ–∏—Ä–µ ‚Äî —ç—Ç–æ –∫–∞–∫ –∞–Ω—Ç—Ä–∞–∫—Ç, –∑–∞—Ç—è–Ω—É–≤—à–∏–π—Å—è –Ω–∞ –¥–≤–∞ –∞–∫—Ç–∞. –ï—Å–ª–∏ –≤—ã –µ—â–µ –¥—É–º–∞–µ—Ç–µ, —ç—Ç–æ —Ö–æ—Ä–æ—à–æ. –î—É–º–∞—Ç—å –ø–æ–ª–µ–∑–Ω–æ. –ù–æ –ø–æ–∫–∞ –º—ã –¥—É–º–∞–µ–º, –¥–µ—Ç–∏ —Ä–∞—Å—Ç—É—Ç.
–ú–æ–∂–µ—Ç, –≤—Å–µ-—Ç–∞–∫–∏ —Ä–µ—à–∏–º—Å—è –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä?"""
            }
            
            message_text = messages.get(message_type, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –∫—É—Ä—Å–∞–º!")
            
            # –ü–æ–ª—É—á–∞–µ–º telegram_bot —á–µ—Ä–µ–∑ lazy import
            global telegram_bot
            if telegram_bot is None:
                from telegram_bot import telegram_bot as tb
                telegram_bot = tb
            
            success = telegram_bot.send_message(user_id, message_text)
            
            if success:
                with self.metrics_lock:
                    self.metrics['follow_up_messages_sent'] += 1
                self.logger.info(f"‚úÖ Follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message_type} -> {user_id}")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type} -> {user_id}")
                
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def process_webhook(self, webhook_data: Dict[str, Any], message_type: str = 'first_follow_up'):
        """
        THREAD-SAFE –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç HubSpot
        """
        try:
            with self.metrics_lock:
                self.metrics['webhooks_processed'] += 1
            
            self.logger.info(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ HubSpot webhook: {message_type}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ webhook
            contact_data = self._extract_contact_from_webhook(webhook_data)
            
            if contact_data and contact_data.get('telegram_user_id'):
                user_id = contact_data['telegram_user_id']
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ
                def send_webhook_message():
                    self._send_follow_up_message(user_id, message_type)
                
                threading.Thread(target=send_webhook_message, daemon=True).start()
                
                self.logger.info(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            else:
                self.logger.warning("Webhook –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ telegram_user_id")
                
        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    
    def _extract_contact_from_webhook(self, webhook_data: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ webhook –¥–∞–Ω–Ω—ã—Ö HubSpot
        """
        try:
            # HubSpot webhook –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            
            if 'objectId' in webhook_data:
                # –ü—Ä–æ—Å—Ç–æ–π webhook —Å ID –æ–±—ä–µ–∫—Ç–∞
                contact_id = webhook_data['objectId']
                return {'contact_id': contact_id}
            
            if 'events' in webhook_data:
                # Webhook —Å –º–∞—Å—Å–∏–≤–æ–º —Å–æ–±—ã—Ç–∏–π
                events = webhook_data['events']
                if events and len(events) > 0:
                    first_event = events[0]
                    if 'objectId' in first_event:
                        contact_id = first_event['objectId']
                        return {'contact_id': contact_id}
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ webhook")
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ webhook: {e}")
            return None
    
    def _update_avg_create_time(self, create_time: float):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        current_avg = self.metrics['avg_create_time']
        contacts_created = self.metrics['contacts_created']
        
        if contacts_created == 1:
            self.metrics['avg_create_time'] = create_time
        else:
            new_avg = (current_avg * (contacts_created - 1) + create_time) / contacts_created
            self.metrics['avg_create_time'] = new_avg
    
    def get_metrics(self) -> Dict[str, Any]:
        """Thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.metrics_lock:
            metrics_copy = self.metrics.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å unified client
        metrics_copy['unified_client_status'] = 'active' if self.use_unified_client else 'fallback'
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if metrics_copy['contacts_created'] > 0:
            total_api_calls = metrics_copy['contacts_created'] + metrics_copy['api_errors']
            metrics_copy['success_rate'] = round(
                (metrics_copy['contacts_created'] / total_api_calls) * 100, 1
            )
        
        return metrics_copy
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å HubSpot API
        """
        url = f"{self.base_url}/crm/v3/objects/contacts"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            if self.use_unified_client:
                response = http_client.get(
                    url=f"{url}?limit=1",
                    service_name='hubspot',
                    headers=headers,
                    timeout=(5, 10)
                )
            else:
                response = self.fallback_session.get(
                    f"{url}?limit=1", headers=headers, timeout=(5, 10)
                )
            
            if response.status_code == 200:
                self.logger.info("‚úÖ HubSpot API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.logger.error(f"‚ùå HubSpot API —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HubSpot —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def cleanup(self):
        """Cleanup —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, 'fallback_session'):
                self.fallback_session.close()
            self.logger.info("üîó HubSpot client cleanup completed")
        except Exception as e:
            self.logger.error(f"HubSpot client cleanup error: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä HubSpot –∫–ª–∏–µ–Ω—Ç–∞
hubspot_client = HubSpotClient()