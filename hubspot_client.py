# hubspot_client.py
"""
HubSpot CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è Ukido AI Assistant.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è.
"""

import requests
import logging
from typing import Dict, Any, Optional
from config import config
from telegram_bot import telegram_bot


class HubSpotClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HubSpot CRM API"""
    
    def __init__(self):
        self.api_key = config.HUBSPOT_API_KEY
        self.base_url = "https://api.hubapi.com"
        self.logger = logging.getLogger(__name__)
        self.logger.info("üîó HubSpot –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_contact(self, form_data: Dict[str, Any]) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ HubSpot CRM
        
        Args:
            form_data: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—è–º–∏ firstName, lastName, email, userId
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['firstName', 'lastName', 'email']
        for field in required_fields:
            if not form_data.get(field):
                self.logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        url = f"{self.base_url}/crm/v3/objects/contacts"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        contact_data = {
            "properties": {
                "firstname": str(form_data["firstName"])[:50],
                "lastname": str(form_data["lastName"])[:50], 
                "email": str(form_data["email"])[:100],
                "telegram_user_id": str(form_data.get("userId", ""))[:20]
            }
        }
        
        try:
            response = requests.post(url, headers=headers, json=contact_data, timeout=10)
            
            if response.status_code == 201:
                self.logger.info("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ HubSpot")
                return True
            else:
                self.logger.error(f"‚ùå HubSpot API error: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return False
    
    def process_webhook(self, webhook_data: Dict[str, Any], message_type: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç HubSpot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook –æ—Ç HubSpot
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (first_follow_up, second_follow_up)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            properties = webhook_data.get('properties', {})
            first_name = properties.get('firstname', {}).get('value', '–¥—Ä—É–≥')
            telegram_id = properties.get('telegram_user_id', {}).get('value')
            
            if not telegram_id:
                self.logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω telegram_user_id –≤ webhook")
                return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            message_generators = {
                'first_follow_up': f"""–ù—É —á—Ç–æ, {first_name}, –∫–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è? 

–ì–æ–≤–æ—Ä—è—Ç, –ø–æ—Å–ª–µ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–ø–µ–∫—Ç–∞–∫–ª—è —Ö–æ—á–µ—Ç—Å—è –æ–±—Å—É–¥–∏—Ç—å. –ê –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞ ‚Äî —Ö–æ—á–µ—Ç—Å—è –ª–∏–±–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ª–∏–±–æ –∑–∞–±—ã—Ç—å. –ù–∞–¥–µ—é—Å—å, —É –≤–∞—Å –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.

–ï—Å–ª–∏ —á—Ç–æ, –º—ã —Ç—É—Ç, –Ω–∞ —Å–≤—è–∑–∏.""",
                
                'second_follow_up': f"""{first_name}, —ç—Ç–æ —Å–Ω–æ–≤–∞ –º—ã. 

–ù–µ —Ç–æ —á—Ç–æ–±—ã –º—ã —Å–∫—É—á–∞–ª–∏, –Ω–æ —Ç–∏—à–∏–Ω–∞ –≤ —ç—Ñ–∏—Ä–µ ‚Äî —ç—Ç–æ –∫–∞–∫ –∞–Ω—Ç—Ä–∞–∫—Ç, –∑–∞—Ç—è–Ω—É–≤—à–∏–π—Å—è –Ω–∞ –¥–≤–∞ –∞–∫—Ç–∞. –ï—Å–ª–∏ –≤—ã –µ—â–µ –¥—É–º–∞–µ—Ç–µ, —ç—Ç–æ —Ö–æ—Ä–æ—à–æ. –î—É–º–∞—Ç—å –ø–æ–ª–µ–∑–Ω–æ. –ù–æ –ø–æ–∫–∞ –º—ã –¥—É–º–∞–µ–º, –¥–µ—Ç–∏ —Ä–∞—Å—Ç—É—Ç.

–ú–æ–∂–µ—Ç, –≤—Å–µ-—Ç–∞–∫–∏ —Ä–µ—à–∏–º—Å—è –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä?"""
            }
            
            message_to_send = message_generators.get(message_type)
            
            if message_to_send:
                success = telegram_bot.send_message(telegram_id, message_to_send)
                if success:
                    self.logger.info(f"‚úÖ Follow-up '{message_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_id}")
                    return True
                else:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å follow-up {telegram_id}")
                    return False
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HubSpot webhook: {e}")
            return False


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä HubSpot –∫–ª–∏–µ–Ω—Ç–∞
hubspot_client = HubSpotClient()
