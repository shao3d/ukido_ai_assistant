# telegram_bot.py (CRITICAL CONNECTION POOLING FIX)
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ unified connection pooling

–ò–ó–ú–ï–ù–ï–ù–ò–Ø:
1. –ó–∞–º–µ–Ω–µ–Ω –ø—Ä—è–º–æ–π requests –Ω–∞ unified_http_client
2. –î–æ–±–∞–≤–ª–µ–Ω proper error handling —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
3. Performance metrics –¥–ª—è Telegram API calls
4. Thread-safe operations
"""

import threading
import logging
from datetime import datetime
from flask import request, render_template
from typing import Optional, Dict, Any, Callable
from config import config

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º unified HTTP client –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö requests
try:
    from unified_http_client import http_client
except ImportError:
    # Fallback –µ—Å–ª–∏ unified_http_client –Ω–µ –Ω–∞–π–¥–µ–Ω
    import requests
    http_client = None
    logging.getLogger(__name__).warning("Unified HTTP client –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")


class TelegramBot:
    """
    THREAD-SAFE –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ —Å unified connection pooling
    
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    1. Unified HTTP connection pooling
    2. Proper retry mechanisms —á–µ—Ä–µ–∑ unified client
    3. Performance metrics –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    4. Enhanced error handling
    """
    
    def __init__(self):
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.logger = logging.getLogger(__name__)
        
        # Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_handler: Optional[Callable] = None
        
        # Performance metrics
        self.metrics = {
            'messages_sent': 0,
            'messages_received': 0,
            'api_errors': 0,
            'webhook_calls': 0,
            'avg_send_time': 0
        }
        self.metrics_lock = threading.Lock()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å unified HTTP client
        self.use_unified_client = http_client is not None
        if not self.use_unified_client:
            import requests
            self.fallback_session = requests.Session()
            self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback HTTP client")
        
        self.logger.info("ü§ñ Thread-safe Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_message_handler(self, handler: Callable):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        self.message_handler = handler
        self.logger.info("üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def send_message(self, chat_id: str, text: str) -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ unified HTTP client
        """
        if not text or not chat_id:
            self.logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ chat_id")
            return False
        
        url = f"{self.base_url}/sendMessage"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        start_time = time.time()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º unified HTTP client
            if self.use_unified_client:
                response = http_client.post(
                    url=url,
                    service_name='telegram',
                    json=data,
                    timeout=(5, 10)  # –ë—ã—Å—Ç—Ä—ã–µ timeouts –¥–ª—è Telegram
                )
            else:
                # Fallback –Ω–∞ –ø—Ä—è–º—ã–µ requests
                response = self.fallback_session.post(url, json=data, timeout=(5, 10))
            
            send_time = time.time() - start_time
            
            if response.status_code == 200:
                with self.metrics_lock:
                    self.metrics['messages_sent'] += 1
                    self._update_avg_send_time(send_time)
                
                self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id} ({send_time:.3f}s)")
                return True
            else:
                error_data = response.json() if response.content else {}
                self.logger.error(f"‚ùå Telegram API error {response.status_code}: {error_data}")
                
                with self.metrics_lock:
                    self.metrics['api_errors'] += 1
                return False
                
        except Exception as e:
            with self.metrics_lock:
                self.metrics['api_errors'] += 1
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def handle_webhook(self) -> tuple:
        """
        THREAD-SAFE –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
        """
        try:
            with self.metrics_lock:
                self.metrics['webhook_calls'] += 1
            
            data = request.get_json()
            if not data:
                self.logger.warning("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ webhook")
                return "No data", 400
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            message = data.get('message')
            if not message:
                self.logger.info("Webhook –±–µ–∑ message (–≤–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)")
                return "OK", 200
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏
            message_date = message.get('date', 0)
            if message_date < config.SERVER_START_TIME:
                self.logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_date}")
                return "OK", 200
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id = str(message['chat']['id'])
            text = message.get('text', '').strip()
            
            if not text:
                self.logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                return "OK", 200
            
            with self.metrics_lock:
                self.metrics['messages_received'] += 1
            
            self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text[:50]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π handler
            if self.message_handler:
                try:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è webhook
                    def process_message():
                        try:
                            response = self.message_handler(chat_id, text)
                            self.send_message(chat_id, response)
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ message_handler: {e}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
                            self.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    threading.Thread(target=process_message, daemon=True).start()
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return "Processing Error", 500
            else:
                self.logger.warning("Message handler –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return "No Handler", 500
            
            return "OK", 200
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
            return "Internal Error", 500
    
    def show_lesson_page(self) -> str:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        try:
            user_id = request.args.get('user_id', 'demo')
            
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            lesson_data = {
                'user_id': user_id,
                'lesson_title': '–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é soft-skills',
                'current_time': datetime.now().strftime("%H:%M"),
                'current_date': datetime.now().strftime("%d.%m.%Y")
            }
            
            return render_template('lesson.html', **lesson_data)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–∫–∞: {e}")
            return f"<h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞</h1><p>{e}</p>", 500
    
    def _update_avg_send_time(self, send_time: float):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        current_avg = self.metrics['avg_send_time']
        messages_sent = self.metrics['messages_sent']
        
        if messages_sent == 1:
            self.metrics['avg_send_time'] = send_time
        else:
            new_avg = (current_avg * (messages_sent - 1) + send_time) / messages_sent
            self.metrics['avg_send_time'] = new_avg
    
    def get_metrics(self) -> Dict[str, Any]:
        """Thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.metrics_lock:
            metrics_copy = self.metrics.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å unified client
        metrics_copy['unified_client_status'] = 'active' if self.use_unified_client else 'fallback'
        
        return metrics_copy
    
    def get_bot_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        """
        url = f"{self.base_url}/getMe"
        
        try:
            if self.use_unified_client:
                response = http_client.get(
                    url=url,
                    service_name='telegram',
                    timeout=(3, 5)
                )
            else:
                response = self.fallback_session.get(url, timeout=(3, 5))
            
            if response.status_code == 200:
                bot_data = response.json()
                self.logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                return bot_data.get('result', {})
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {response.status_code}")
                return {}
                
        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return {}
    
    def cleanup(self):
        """Cleanup —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, 'fallback_session'):
                self.fallback_session.close()
            self.logger.info("ü§ñ Telegram bot cleanup completed")
        except Exception as e:
            self.logger.error(f"Telegram bot cleanup error: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBot()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time –¥–ª—è metrics
import time