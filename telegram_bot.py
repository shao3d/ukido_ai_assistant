# telegram_bot.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
–û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É/–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É webhook'–æ–≤.
–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Telegram.
"""

import requests
import threading
import logging
from datetime import datetime
from flask import request, render_template
from typing import Optional, Dict, Any, Callable
from config import config


class TelegramBot:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
    –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ Telegram –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    
    def __init__(self):
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.logger = logging.getLogger(__name__)
        
        # Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–≤–Ω–µ)
        self.message_handler: Optional[Callable] = None
        
        self.logger.info("ü§ñ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_message_handler(self, handler: Callable):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "Dependency Injection" - –º—ã –Ω–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞,
        –∞ –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∏–∑–≤–Ω–µ. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º.
        """
        self.message_handler = handler
        self.logger.info("üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def send_message(self, chat_id: str, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
        –í–∫–ª—é—á–∞–µ—Ç retry –ª–æ–≥–∏–∫—É –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not text or len(text.strip()) == 0:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return False
        
        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(text) > 4096:
            text = text[:4093] + "..."
            self.logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ –ª–∏–º–∏—Ç–∞ Telegram")
        
        url = f"{self.base_url}/sendMessage"
        payload = {
            "chat_id": str(chat_id),
            "text": text
        }
        
        # –†–µ–∞–ª–∏–∑—É–µ–º retry –ª–æ–≥–∏–∫—É - 3 –ø–æ–ø—ã—Ç–∫–∏ —Å –ø–∞—É–∑–∞–º–∏
        for attempt in range(3):
            try:
                response = requests.post(url, json=payload, timeout=10)
                
                if response.status_code == 200:
                    self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                    return True
                else:
                    self.logger.warning(
                        f"‚ö†Ô∏è Telegram API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}"
                    )
                    
            except requests.exceptions.Timeout:
                self.logger.error(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3)")
            except Exception as e:
                self.logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {e}"
                )
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (–Ω–æ –Ω–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < 2:
                import time
                time.sleep(1)
        
        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    def process_message_in_background(self, chat_id: str, message_text: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
        –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ webhook'–∞.
        
        –ü–†–ò–ù–¶–ò–ü: Telegram –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç 200 OK –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.
        –ï—Å–ª–∏ –º—ã –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Å RAG, LLM –∏ —Ç.–¥.),
        —Ç–æ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ Telegram –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        """
        self.logger.info(f"üîÑ –ù–∞—á–∞–ª–æ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        try:
            if not self.message_handler:
                self.logger.error("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return
            
            # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–æ–Ω –±—É–¥–µ—Ç –∏–∑ conversation –º–æ–¥—É–ª—è)
            response_text = self.message_handler(chat_id, message_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success = self.send_message(chat_id, response_text)
            
            if success:
                self.logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                
        except Exception as e:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ø–æ—Ç–æ–∫–∞—Ö!
            # –ë–µ–∑ —ç—Ç–æ–≥–æ –æ—à–∏–±–∫–∏ "–ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞—é—Ç—Å—è" –∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            self.logger.error(
                f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", 
                exc_info=True
            )
    
    def handle_webhook(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ webhook'–∏ –æ—Ç Telegram.
        
        –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ.
        –ú—ã —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK.
        """
        try:
            update = request.get_json()
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook'–∞
            if not update or "message" not in update:
                self.logger.debug("–ü–æ–ª—É—á–µ–Ω webhook –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª—É–∂–µ–±–Ω—ã–π)")
                return "OK", 200
            
            message = update.get("message", {})
            
            # –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º—ã!
            # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
            # message_date = message.get("date")
            # if message_date and message_date < config.SERVER_START_TIME:
            #     self.logger.info(
            #         f"‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–∞—Ç–∞: {message_date}, "
            #         f"—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: {config.SERVER_START_TIME})"
            #     )
            #     return "OK", 200
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–æ–º
            if "text" not in message or "chat" not in message:
                self.logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—Ç–∏–∫–µ—Ä, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)")
                return "OK", 200
            
            chat_id = message["chat"]["id"]
            received_text = message["text"]
            
            self.logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {received_text[:50]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(
                target=self.process_message_in_background,
                args=(chat_id, received_text),
                daemon=True  # –ü–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            )
            thread.start()
            
            self.logger.info(f"üöÄ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö Telegram'—É
            return "OK", 200
            
        except Exception as e:
            # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å webhook
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ webhook (–¥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞): {e}")
            return "Error", 500
    
    def show_lesson_page(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–∞.
        –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º Telegram —Ñ—É–Ω–∫—Ü–∏—è, –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É —Å—Å—ã–ª–∫–∞
        –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –±–æ—Ç–æ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
        """
        user_id = request.args.get('user_id')
        self.logger.info(f"üéì –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return render_template('lesson.html', user_id=user_id)
    
    def set_webhook(self, webhook_url: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook URL –¥–ª—è –±–æ—Ç–∞.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–∞.
        """
        url = f"{self.base_url}/setWebhook"
        payload = {"url": webhook_url}
        
        try:
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    self.logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                    return True
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
                    return False
            else:
                self.logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            return False
    
    def get_webhook_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook'–µ.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.
        """
        url = f"{self.base_url}/getWebhookInfo"
        
        try:
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            return {"error": str(e)}


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
telegram_bot = TelegramBot()
