# llamaindex_ingest.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ä–µ—à–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å prompt_template)
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ –≤ Pinecone.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (Markdown -> Semantic) –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
–≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ RAG.
"""
import logging
import os
import pinecone
from llama_index.core import (
    SimpleDirectoryReader,
    Settings,
    PromptTemplate,
)
from llama_index.core.node_parser import (
    MarkdownNodeParser,
    SemanticSplitterNodeParser,
)
from llama_index.core.ingestion import IngestionPipeline
from llama_index.core.extractors import QuestionsAnsweredExtractor
from llama_index.vector_stores.pinecone import PineconeVectorStore
from llama_index.embeddings.gemini import GeminiEmbedding
from llama_index.llms.openrouter import OpenRouter
from custom_metadata_extractor import CustomMetadataExtractor

try:
    from config import config
except ImportError:
    import sys
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    from config import config

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
PINECONE_INDEX_NAME = "ukido"
DATA_DIRECTORY = "data_facts"
QUESTIONS_FILE = "questions.txt"

def load_questions(filepath: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    logger = logging.getLogger(__name__)
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            questions = [line.strip() for line in f if line.strip()]
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤-–ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ '{filepath}'.")
        return "\n".join(f"{i+1}. {q}" for i, q in enumerate(questions))
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ '{filepath}' –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏."""
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (–°—Ç—Ä—É–∫—Ç—É—Ä–∞ -> –°–µ–º–∞–Ω—Ç–∏–∫–∞)...")

    example_questions = load_questions(QUESTIONS_FILE)

    logger.info("‚öôÔ∏è  –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π...")
    llm = OpenRouter(api_key=config.OPENROUTER_API_KEY, model="mistralai/mistral-7b-instruct-v0.2")
    embed_model = GeminiEmbedding(model_name=config.EMBEDDING_MODEL, api_key=config.GEMINI_API_KEY)
    Settings.llm = llm
    Settings.embed_model = embed_model
    
    # --- üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï üî• ---
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –°–¢–†–û–ö–£ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞, –≤—Å—Ç–∞–≤–ª—è—è –≤ –Ω–µ–µ –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    qa_generate_prompt_str = (
        "–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n"
        "---------------------\n"
        "{context_str}\n"
        "---------------------\n"
        "–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, "
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π {num_questions} –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n"
        "–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å—Ç–∏–ª–µ –∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ, –∫–∞–∫ –≤ —ç—Ç–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö:\n"
        "--- –ü–†–ò–ú–ï–†–´ –í–û–ü–†–û–°–û–í ---\n"
        f"{example_questions}\n"
        "------------------------\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    )

    logger.info(f"üìÇ –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ '{DATA_DIRECTORY}'...")
    documents = SimpleDirectoryReader(DATA_DIRECTORY, required_exts=[".md"]).load_data()

    logger.info("üî™ –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –î–í–£–•–°–¢–£–ü–ï–ù–ß–ê–¢–û–ì–û –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤—É—é –°–¢–†–û–ö–£, –∫–∞–∫ –æ–Ω –∏ –ø—Ä–æ—Å–∏—Ç
    question_extractor = QuestionsAnsweredExtractor(
        questions=5,
        prompt_template=qa_generate_prompt_str,
        llm=llm,
    )

    pipeline = IngestionPipeline(
        transformations=[
            MarkdownNodeParser(include_metadata=True),
            SemanticSplitterNodeParser(
                buffer_size=1,
                breakpoint_percentile_threshold=95,
                embed_model=embed_model
            ),
            question_extractor,
            CustomMetadataExtractor(),  # –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
            embed_model,
        ],
    )
    
    logger.info("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    nodes = pipeline.run(documents=documents, show_progress=True)
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(nodes)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö, —É–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤.")

    logger.info(f"üå≤ –®–∞–≥ 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pinecone –∏ –æ—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ '{PINECONE_INDEX_NAME}'...")
    pc = pinecone.Pinecone(api_key=config.PINECONE_API_KEY)
    pinecone_index = pc.Index(PINECONE_INDEX_NAME)
    pinecone_index.delete(delete_all=True)
    logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å –æ—á–∏—â–µ–Ω.")

    logger.info("üì§ –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤ Pinecone...")
    vector_store = PineconeVectorStore(pinecone_index=pinecone_index)
    vector_store.add(nodes)
    
    stats = pinecone_index.describe_index_stats()
    logger.info(f"üéâüéâüéâ –£–°–ü–ï–•! –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í –±–∞–∑–µ {stats.get('total_vector_count', 'N/A')} –≤–µ–∫—Ç–æ—Ä–æ–≤. üéâüéâüéâ")

if __name__ == "__main__":
    if not os.path.isdir(DATA_DIRECTORY):
        print(f"‚ùå –ü–∞–ø–∫–∞ '{DATA_DIRECTORY}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–µ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ –≤–∞—à–∏ .md —Ñ–∞–π–ª—ã.")
    elif not os.path.exists(QUESTIONS_FILE):
        print(f"‚ùå –§–∞–π–ª '{QUESTIONS_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
    else:
        main()