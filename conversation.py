# conversation.py (CRITICAL THREADING FIX)
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ deadlocks –ø—Ä–∏ parallel execution

–ü–†–û–ë–õ–ï–ú–ê: app.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
- get_dialogue_state(chat_id)  
- get_conversation_history(chat_id)
- update_conversation_history(chat_id, ...)

–ü—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ –æ–¥–Ω–æ–º—É chat_id –≤–æ–∑–º–æ–∂–Ω—ã deadlocks –∏–∑-–∑–∞ user-level locks.

–†–ï–®–ï–ù–ò–ï:
1. Timeout-based locks –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è deadlocks
2. Read-Write lock pattern –¥–ª—è concurrent reads
3. Atomic operations –¥–ª—è thread-safe updates
4. Graceful degradation –ø—Ä–∏ lock timeouts
"""

import redis
import threading
import logging
import hashlib
import time
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from config import config


class TimeoutLock:
    """
    Lock —Å timeout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è deadlocks
    """
    
    def __init__(self, timeout: float = 5.0):
        self._lock = threading.Lock()
        self.timeout = timeout
        self.logger = logging.getLogger(f"{__name__}.TimeoutLock")
    
    def acquire(self, timeout: Optional[float] = None) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å timeout"""
        timeout = timeout or self.timeout
        return self._lock.acquire(timeout=timeout)
    
    def release(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            self._lock.release()
        except Exception as e:
            self.logger.warning(f"Lock release warning: {e}")
    
    def __enter__(self):
        acquired = self.acquire()
        if not acquired:
            raise TimeoutError("Failed to acquire lock within timeout")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.release()


class ReadWriteLock:
    """
    Read-Write lock –¥–ª—è concurrent reads –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    """
    
    def __init__(self):
        self._read_ready = threading.Condition(threading.RLock())
        self._readers = 0
        
    def acquire_read(self, timeout: float = 5.0):
        """–ü–æ–ª—É—á–∏—Ç—å read lock"""
        return ReadContext(self, timeout)
    
    def acquire_write(self, timeout: float = 5.0):
        """–ü–æ–ª—É—á–∏—Ç—å write lock"""
        return WriteContext(self, timeout)
    
    def _acquire_read_internal(self, timeout: float) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è read lock"""
        if not self._read_ready.acquire(timeout=timeout):
            return False
        try:
            self._readers += 1
            return True
        finally:
            self._read_ready.release()
    
    def _release_read_internal(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è release read lock"""
        with self._read_ready:
            self._readers -= 1
            if self._readers == 0:
                self._read_ready.notifyAll()
    
    def _acquire_write_internal(self, timeout: float) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è write lock"""
        if not self._read_ready.acquire(timeout=timeout):
            return False
        try:
            start_time = time.time()
            while self._readers > 0:
                remaining_timeout = timeout - (time.time() - start_time)
                if remaining_timeout <= 0:
                    return False
                self._read_ready.wait(remaining_timeout)
            return True
        finally:
            pass  # –ù–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º lock –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç WriteContext
    
    def _release_write_internal(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è release write lock"""
        try:
            self._read_ready.release()
        except Exception:
            pass


class ReadContext:
    """Context manager –¥–ª—è read operations"""
    
    def __init__(self, rw_lock: ReadWriteLock, timeout: float):
        self.rw_lock = rw_lock
        self.timeout = timeout
        self.acquired = False
    
    def __enter__(self):
        self.acquired = self.rw_lock._acquire_read_internal(self.timeout)
        if not self.acquired:
            raise TimeoutError("Failed to acquire read lock within timeout")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.acquired:
            self.rw_lock._release_read_internal()


class WriteContext:
    """Context manager –¥–ª—è write operations"""
    
    def __init__(self, rw_lock: ReadWriteLock, timeout: float):
        self.rw_lock = rw_lock
        self.timeout = timeout
        self.acquired = False
    
    def __enter__(self):
        self.acquired = self.rw_lock._acquire_write_internal(self.timeout)
        if not self.acquired:
            raise TimeoutError("Failed to acquire write lock within timeout")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.acquired:
            self.rw_lock._release_write_internal()


class ConversationManager:
    """
    THREAD-SAFE –≤–µ—Ä—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π parallel execution
    
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    1. Read-Write locks –¥–ª—è concurrent reads
    2. Timeout-based locks –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è deadlocks  
    3. Atomic operations –¥–ª—è thread-safe updates
    4. Graceful degradation –ø—Ä–∏ timeouts
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    DIALOGUE_STATES = {
        'greeting': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
        'problem_solving': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Ä–µ–±–µ–Ω–∫–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 
        'fact_finding': '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö, —Ü–µ–Ω–∞—Ö, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏',
        'closing': '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫'
    }
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    STATE_KEYWORDS = {
        'problem_solving': ['–ø—Ä–æ–±–ª–µ–º', '—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', '–∑–∞—Å—Ç–µ–Ω—á–∏–≤', '–±–æ–∏—Ç—Å—è', 
                           '–Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è', '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω', '–∑–∞–º–∫–Ω', '–ø–æ–º–æ–≥–∏—Ç–µ'],
        'fact_finding': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', 
                        '—Å–∫–æ–ª—å–∫–æ', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–≥—Ä—É–ø–ø–∞', '–≤–æ–∑—Ä–∞—Å—Ç'],
        'closing': ['–∑–∞–ø–∏—Å–∞—Ç', '–ø–æ–ø—Ä–æ–±–æ–≤–∞', '—Ö–æ—á—É', '–≥–æ—Ç–æ–≤', '—Ä–µ—à–∏–ª', 
                   '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–¥–∞–≤–∞–π—Ç–µ']
    }
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        self.redis_client = None
        self.redis_available = False
        self._init_redis()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback –ø–∞–º—è—Ç—å —Å thread-safe –¥–æ—Å—Ç—É–ø–æ–º
        self.fallback_memory = {}
        self.fallback_memory_lock = threading.RLock()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: Read-Write locks –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_rw_locks = {}
        self.user_locks_lock = threading.RLock()
        
        # Performance metrics –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.performance_stats = {
            'successful_reads': 0,
            'successful_writes': 0,
            'timeout_errors': 0,
            'redis_errors': 0,
            'fallback_usage': 0
        }
        self.stats_lock = threading.Lock()
        
        self.logger.info("üß† Thread-safe –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if config.CLEAR_MEMORY_ON_START:
            self._clear_all_memory()
            self.logger.info("üßπ –í—Å—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    
    def _init_redis(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å graceful degradation.
        """
        try:
            if config.REDIS_URL:
                self.redis_client = redis.from_url(config.REDIS_URL, decode_responses=True)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                self.redis_client.ping()
                self.redis_available = True
                self.logger.info("‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                self.logger.info("‚ÑπÔ∏è Redis URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø–∞–º—è—Ç—å")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø–∞–º—è—Ç—å")
            self.redis_available = False
    
    def _get_user_rw_lock(self, chat_id: str) -> ReadWriteLock:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç Read-Write lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å timeout protection
        """
        with self.user_locks_lock:
            if chat_id not in self.user_rw_locks:
                self.user_rw_locks[chat_id] = ReadWriteLock()
                
                # Cleanup —Å—Ç–∞—Ä—ã—Ö locks –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leak
                if len(self.user_rw_locks) > config.MAX_FALLBACK_USERS:
                    old_chat_ids = list(self.user_rw_locks.keys())[:len(self.user_rw_locks)//4]
                    for old_id in old_chat_ids:
                        del self.user_rw_locks[old_id]
                    self.logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ user locks: {len(old_chat_ids)}")
            
            return self.user_rw_locks[chat_id]
    
    def _normalize_chat_id(self, chat_id: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç chat_id –¥–ª—è consistent –¥–æ—Å—Ç—É–ø–∞"""
        return str(chat_id).strip() if chat_id else ""
    
    def get_dialogue_state(self, chat_id: str) -> str:
        """
        THREAD-SAFE –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å concurrent read support
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id:
            return 'greeting'
        
        user_rw_lock = self._get_user_rw_lock(chat_id)
        
        try:
            with user_rw_lock.acquire_read(timeout=3.0):
                state = self._get_dialogue_state_internal(chat_id)
                with self.stats_lock:
                    self.performance_stats['successful_reads'] += 1
                return state
                
        except TimeoutError:
            # Graceful degradation –ø—Ä–∏ timeout
            with self.stats_lock:
                self.performance_stats['timeout_errors'] += 1
            self.logger.warning(f"Read timeout for chat_id: {chat_id}, using default state")
            return 'greeting'
        except Exception as e:
            self.logger.error(f"Error getting dialogue state: {e}")
            return 'greeting'
    
    def _get_dialogue_state_internal(self, chat_id: str) -> str:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)"""
        if self.redis_available:
            try:
                state_key = f"state:{chat_id}"
                state = self.redis_client.get(state_key)
                return state if state in self.DIALOGUE_STATES else 'greeting'
            except Exception as e:
                self.logger.warning(f"Redis state read error: {e}")
                with self.stats_lock:
                    self.performance_stats['redis_errors'] += 1
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        with self.fallback_memory_lock:
            user_data = self.fallback_memory.get(chat_id, {})
            return user_data.get('state', 'greeting')
    
    def set_dialogue_state(self, chat_id: str, state: str):
        """
        THREAD-SAFE —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id or state not in self.DIALOGUE_STATES:
            return
        
        user_rw_lock = self._get_user_rw_lock(chat_id)
        
        try:
            with user_rw_lock.acquire_write(timeout=3.0):
                self._set_dialogue_state_internal(chat_id, state)
                with self.stats_lock:
                    self.performance_stats['successful_writes'] += 1
                    
        except TimeoutError:
            with self.stats_lock:
                self.performance_stats['timeout_errors'] += 1
            self.logger.warning(f"Write timeout for chat_id: {chat_id}, state: {state}")
        except Exception as e:
            self.logger.error(f"Error setting dialogue state: {e}")
    
    def _set_dialogue_state_internal(self, chat_id: str, state: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.redis_available:
            try:
                state_key = f"state:{chat_id}"
                self.redis_client.setex(state_key, config.CONVERSATION_EXPIRATION_SECONDS, state)
                return
            except Exception as e:
                self.logger.warning(f"Redis state write error: {e}")
                with self.stats_lock:
                    self.performance_stats['redis_errors'] += 1
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        with self.fallback_memory_lock:
            if chat_id not in self.fallback_memory:
                self.fallback_memory[chat_id] = {}
            self.fallback_memory[chat_id]['state'] = state
            self.fallback_memory[chat_id]['last_update'] = time.time()
            
            with self.stats_lock:
                self.performance_stats['fallback_usage'] += 1
    
    def get_conversation_history(self, chat_id: str) -> List[str]:
        """
        THREAD-SAFE –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å concurrent read support
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id:
            return []
        
        user_rw_lock = self._get_user_rw_lock(chat_id)
        
        try:
            with user_rw_lock.acquire_read(timeout=3.0):
                history = self._get_conversation_history_internal(chat_id)
                with self.stats_lock:
                    self.performance_stats['successful_reads'] += 1
                return history
                
        except TimeoutError:
            with self.stats_lock:
                self.performance_stats['timeout_errors'] += 1
            self.logger.warning(f"History read timeout for chat_id: {chat_id}")
            return []
        except Exception as e:
            self.logger.error(f"Error getting conversation history: {e}")
            return []
    
    def _get_conversation_history_internal(self, chat_id: str) -> List[str]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
        if self.redis_available:
            try:
                history_key = f"history:{chat_id}"
                # Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                return self.redis_client.lrange(history_key, 0, -1)[::-1]
            except Exception as e:
                self.logger.warning(f"Redis history read error: {e}")
                with self.stats_lock:
                    self.performance_stats['redis_errors'] += 1
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        with self.fallback_memory_lock:
            user_data = self.fallback_memory.get(chat_id, {})
            return user_data.get('history', [])
    
    def update_conversation_history(self, chat_id: str, user_message: str, ai_response: str):
        """
        THREAD-SAFE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id or not user_message:
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        clean_response = ai_response.replace("[ACTION:SEND_LESSON_LINK]", "[–°–°–´–õ–ö–ê_–ù–ê_–£–†–û–ö]")
        
        user_rw_lock = self._get_user_rw_lock(chat_id)
        
        try:
            with user_rw_lock.acquire_write(timeout=3.0):
                self._update_conversation_history_internal(chat_id, user_message, clean_response)
                with self.stats_lock:
                    self.performance_stats['successful_writes'] += 1
                    
        except TimeoutError:
            with self.stats_lock:
                self.performance_stats['timeout_errors'] += 1
            self.logger.warning(f"History update timeout for chat_id: {chat_id}")
        except Exception as e:
            self.logger.error(f"Error updating conversation history: {e}")
    
    def _update_conversation_history_internal(self, chat_id: str, user_message: str, ai_response: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
        timestamp = datetime.now().isoformat()
        
        if self.redis_available:
            try:
                history_key = f"history:{chat_id}"
                metadata_key = f"metadata:{chat_id}"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
                pipe = self.redis_client.pipeline()
                pipe.lpush(history_key, f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
                pipe.lpush(history_key, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
                pipe.ltrim(history_key, 0, (config.CONVERSATION_MEMORY_SIZE * 2) - 1)
                pipe.expire(history_key, config.CONVERSATION_EXPIRATION_SECONDS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    "last_activity": timestamp,
                    "message_count": len(self._get_conversation_history_internal(chat_id)) // 2 + 1
                }
                pipe.hset(metadata_key, mapping=metadata)
                pipe.expire(metadata_key, config.CONVERSATION_EXPIRATION_SECONDS)
                
                pipe.execute()
                return
                
            except Exception as e:
                self.logger.error(f"Redis history update error: {e}")
                with self.stats_lock:
                    self.performance_stats['redis_errors'] += 1
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        self._update_fallback_memory(chat_id, user_message, ai_response)
    
    def _update_fallback_memory(self, chat_id: str, user_message: str, ai_response: str):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ fallback –ø–∞–º—è—Ç–∏"""
        with self.fallback_memory_lock:
            if chat_id not in self.fallback_memory:
                self.fallback_memory[chat_id] = {'history': [], 'state': 'greeting'}
            
            history = self.fallback_memory[chat_id]['history']
            history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
            history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            max_lines = config.CONVERSATION_MEMORY_SIZE * 2
            if len(history) > max_lines:
                history[:] = history[-max_lines:]
            
            self.fallback_memory[chat_id]['last_update'] = time.time()
            
            with self.stats_lock:
                self.performance_stats['fallback_usage'] += 1
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            self._cleanup_fallback_memory()
    
    def _cleanup_fallback_memory(self):
        """Thread-safe –æ—á–∏—Å—Ç–∫–∞ fallback –ø–∞–º—è—Ç–∏"""
        if len(self.fallback_memory) > config.MAX_FALLBACK_USERS:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            current_time = time.time()
            old_entries = []
            
            for chat_id, data in self.fallback_memory.items():
                last_update = data.get('last_update', 0)
                if current_time - last_update > 3600:  # –°—Ç–∞—Ä—à–µ —á–∞—Å–∞
                    old_entries.append(chat_id)
            
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
            if len(old_entries) < len(self.fallback_memory) // 4:
                sorted_entries = sorted(
                    self.fallback_memory.items(),
                    key=lambda x: x[1].get('last_update', 0)
                )
                old_entries.extend([chat_id for chat_id, _ in sorted_entries[:len(self.fallback_memory)//4]])
            
            for chat_id in old_entries[:len(self.fallback_memory)//2]:
                del self.fallback_memory[chat_id]
            
            if old_entries:
                self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ fallback –ø–∞–º—è—Ç—å: —É–¥–∞–ª–µ–Ω–æ {len(old_entries)} –∑–∞–ø–∏—Å–µ–π")
    
    def analyze_message_for_state_transition(self, user_message: str, current_state: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω stateless.
        """
        if not user_message:
            return current_state
        
        message_lower = user_message.lower()
        
        # –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Ä–æ–∫–∞ –∏–º–µ—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        direct_lesson_keywords = ["–ø—Ä–æ–±–Ω", "–±–µ—Å–ø–ª–∞—Ç–Ω", "–ø–æ–ø—Ä–æ–±–æ–≤–∞", "–∑–∞–ø–∏—Å–∞—Ç", "—Ö–æ—á—É —É—Ä–æ–∫", "–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É"]
        if any(word in message_lower for word in direct_lesson_keywords):
            self.logger.info("–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Ä–æ–∫–∞ -> closing")
            return 'closing'
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for state, keywords in self.STATE_KEYWORDS.items():
            if any(keyword in message_lower for keyword in keywords):
                self.logger.info(f"–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{state}' –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
                return state
        
        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ–Ω–µ–µ 5 —Å–ª–æ–≤) —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        if len(user_message.split()) < 5:
            return current_state
        
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if current_state == 'greeting':
            return 'fact_finding'
        elif current_state == 'fact_finding' and len(user_message.split()) > 10:
            return 'problem_solving'
        
        return current_state
    
    def get_conversation_stats(self, chat_id: str) -> Dict[str, Any]:
        """
        Thread-safe –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        chat_id = self._normalize_chat_id(chat_id)
        
        try:
            history = self.get_conversation_history(chat_id)
            current_state = self.get_dialogue_state(chat_id)
            
            with self.stats_lock:
                performance_stats = self.performance_stats.copy()
            
            return {
                "chat_id": chat_id,
                "current_state": current_state,
                "message_count": len(history),
                "redis_available": self.redis_available,
                "last_messages": history[-4:] if history else [],
                "performance_stats": performance_stats
            }
        except Exception as e:
            self.logger.error(f"Error getting conversation stats: {e}")
            return {
                "chat_id": chat_id,
                "error": str(e),
                "redis_available": self.redis_available
            }
    
    def _clear_all_memory(self):
        """
        Thread-safe –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        """
        cleared_redis = 0
        cleared_fallback = 0
        
        # –û—á–∏—â–∞–µ–º Redis
        if self.redis_available:
            try:
                keys_to_delete = []
                for pattern in ['history:*', 'state:*', 'metadata:*']:
                    keys = self.redis_client.keys(pattern)
                    keys_to_delete.extend(keys)
                
                if keys_to_delete:
                    cleared_redis = self.redis_client.delete(*keys_to_delete)
                    self.logger.info(f"–û—á–∏—â–µ–Ω–æ {cleared_redis} –∫–ª—é—á–µ–π –∏–∑ Redis")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}")
        
        # –û—á–∏—â–∞–µ–º fallback –ø–∞–º—è—Ç—å
        with self.fallback_memory_lock:
            cleared_fallback = len(self.fallback_memory)
            self.fallback_memory.clear()
        
        # –û—á–∏—â–∞–µ–º user locks
        with self.user_locks_lock:
            self.user_rw_locks.clear()
        
        if cleared_fallback > 0:
            self.logger.info(f"–û—á–∏—â–µ–Ω–æ {cleared_fallback} –∑–∞–ø–∏—Å–µ–π –∏–∑ fallback –ø–∞–º—è—Ç–∏")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä thread-safe –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
conversation_manager = ConversationManager()