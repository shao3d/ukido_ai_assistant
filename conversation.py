# conversation.py
"""
‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø v7: –ì–∏–±–∫–∞—è —Å–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
- –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ "–∑–∞—Å—Ç—Ä–µ–≤–∞–µ—Ç" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö 'problem_solving' –∏–ª–∏ 'closing'.
"""
import redis
import threading
import logging
import time
from typing import List, Dict, Any, Optional
from config import config


class ReadWriteLock:
    def __init__(self):
        self._read_ready = threading.Condition(threading.RLock())
        self._readers = 0
    def acquire_read(self, timeout: float = 5.0): return ReadContext(self, timeout)
    def acquire_write(self, timeout: float = 5.0): return WriteContext(self, timeout)
    def _acquire_read_internal(self, timeout: float) -> bool:
        if not self._read_ready.acquire(timeout=timeout): return False
        try:
            self._readers += 1
            return True
        finally: self._read_ready.release()
    def _release_read_internal(self):
        with self._read_ready:
            self._readers -= 1
            if self._readers == 0: self._read_ready.notifyAll()
    def _acquire_write_internal(self, timeout: float) -> bool:
        if not self._read_ready.acquire(timeout=timeout): return False
        try:
            start_time = time.time()
            while self._readers > 0:
                remaining_timeout = timeout - (time.time() - start_time)
                if remaining_timeout <= 0: return False
                self._read_ready.wait(remaining_timeout)
            return True
        finally: pass
    def _release_write_internal(self):
        try: self._read_ready.release()
        except Exception: pass

class ReadContext:
    def __init__(self, rw_lock: ReadWriteLock, timeout: float):
        self.rw_lock = rw_lock
        self.timeout = timeout
        self.acquired = False
    def __enter__(self):
        self.acquired = self.rw_lock._acquire_read_internal(self.timeout)
        if not self.acquired: raise TimeoutError("Failed to acquire read lock")
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.acquired: self.rw_lock._release_read_internal()

class WriteContext:
    def __init__(self, rw_lock: ReadWriteLock, timeout: float):
        self.rw_lock = rw_lock
        self.timeout = timeout
        self.acquired = False
    def __enter__(self):
        self.acquired = self.rw_lock._acquire_write_internal(self.timeout)
        if not self.acquired: raise TimeoutError("Failed to acquire write lock")
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.acquired: self.rw_lock._release_write_internal()


class ConversationManager:
    """
    THREAD-SAFE –≤–µ—Ä—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ú–∞—à–∏–Ω–æ–π –°–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    DIALOGUE_STATES = {
        'greeting': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
        'problem_solving': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Ä–µ–±–µ–Ω–∫–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 
        'fact_finding': '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö, —Ü–µ–Ω–∞—Ö, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏',
        'closing': '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫'
    }
    STATE_KEYWORDS = {
        'problem_solving': ['–ø—Ä–æ–±–ª–µ–º', '—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', '–∑–∞—Å—Ç–µ–Ω—á–∏–≤', '–±–æ–∏—Ç—Å—è', 
                           '–Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è', '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω', '–∑–∞–º–∫–Ω', '–ø–æ–º–æ–≥–∏—Ç–µ', '–æ–±–∏–∂–∞–ª–∏', '—Ç—Ä–∞–≤–ª—é', '—Å—Ç—Ä–µ—Å—Å'],
        'fact_finding': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', 
                        '—Å–∫–æ–ª—å–∫–æ', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–≥—Ä—É–ø–ø–∞', '–≤–æ–∑—Ä–∞—Å—Ç', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–ø—Ä–æ–≥—Ä–∞–º–º—ã', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é', '–¥–∞–Ω–Ω—ã—Ö', '–∑–∞–ø–∏—Å–∏', '—É—Ä–æ–∫–æ–≤', '–ª—å–≥–æ—Ç—ã'],
        'closing': ['–∑–∞–ø–∏—Å–∞—Ç', '–ø–æ–ø—Ä–æ–±–æ–≤–∞', '—Ö–æ—á—É', '–≥–æ—Ç–æ–≤', '—Ä–µ—à–∏–ª', 
                   '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–¥–∞–≤–∞–π—Ç–µ', '—É—Ä–æ–∫']
    }

    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.redis_client = None
        self.redis_available = False
        self._init_redis()
        
        self.fallback_memory = {}
        self.fallback_memory_lock = threading.RLock()
        
        self.user_rw_locks = {}
        self.user_locks_lock = threading.RLock()
        
        self.logger.info("üß† Thread-safe –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ (v7) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if config.CLEAR_MEMORY_ON_START:
            self.clear_all_conversations()
            self.logger.info("üßπ –í—Å—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    
    def _init_redis(self):
        try:
            if config.REDIS_URL:
                self.redis_client = redis.from_url(config.REDIS_URL, decode_responses=True)
                self.redis_client.ping()
                self.redis_available = True
                self.logger.info("‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                self.logger.info("‚ÑπÔ∏è Redis URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø–∞–º—è—Ç—å")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø–∞–º—è—Ç—å")
            self.redis_available = False
    
    def _get_user_rw_lock(self, chat_id: str) -> ReadWriteLock:
        with self.user_locks_lock:
            if chat_id not in self.user_rw_locks:
                self.user_rw_locks[chat_id] = ReadWriteLock()
            return self.user_rw_locks[chat_id]
    
    def _normalize_chat_id(self, chat_id: str) -> str:
        return str(chat_id).strip() if chat_id else ""
    
    def get_dialogue_state(self, chat_id: str) -> str:
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id: return 'greeting'
        user_rw_lock = self._get_user_rw_lock(chat_id)
        try:
            with user_rw_lock.acquire_read(timeout=3.0):
                if self.redis_available:
                    state = self.redis_client.get(f"state:{chat_id}")
                    return state if state in self.DIALOGUE_STATES else 'greeting'
                with self.fallback_memory_lock:
                    return self.fallback_memory.get(chat_id, {}).get('state', 'greeting')
        except (TimeoutError, redis.exceptions.RedisError) as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {chat_id}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
            with self.fallback_memory_lock:
                return self.fallback_memory.get(chat_id, {}).get('state', 'greeting')

    def set_dialogue_state(self, chat_id: str, state: str):
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id or state not in self.DIALOGUE_STATES: return
        user_rw_lock = self._get_user_rw_lock(chat_id)
        try:
            with user_rw_lock.acquire_write(timeout=3.0):
                if self.redis_available:
                    self.redis_client.setex(f"state:{chat_id}", config.CONVERSATION_EXPIRATION_SECONDS, state)
                    return
                with self.fallback_memory_lock:
                    if chat_id not in self.fallback_memory: self.fallback_memory[chat_id] = {}
                    self.fallback_memory[chat_id]['state'] = state
        except (TimeoutError, redis.exceptions.RedisError) as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {chat_id}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
            with self.fallback_memory_lock:
                 if chat_id not in self.fallback_memory: self.fallback_memory[chat_id] = {}
                 self.fallback_memory[chat_id]['state'] = state

    def get_conversation_history(self, chat_id: str) -> List[str]:
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id: return []
        user_rw_lock = self._get_user_rw_lock(chat_id)
        try:
            with user_rw_lock.acquire_read(timeout=3.0):
                if self.redis_available:
                    return self.redis_client.lrange(f"history:{chat_id}", 0, -1)
                with self.fallback_memory_lock:
                    return self.fallback_memory.get(chat_id, {}).get('history', [])
        except (TimeoutError, redis.exceptions.RedisError) as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {chat_id}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
            with self.fallback_memory_lock:
                return self.fallback_memory.get(chat_id, {}).get('history', [])

    def update_conversation_history(self, chat_id: str, user_message: str, ai_response: str):
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id or not user_message: return
        user_rw_lock = self._get_user_rw_lock(chat_id)
        user_entry = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}"
        ai_entry = f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}"
        try:
            with user_rw_lock.acquire_write(timeout=3.0):
                if self.redis_available:
                    pipe = self.redis_client.pipeline()
                    pipe.lpush(f"history:{chat_id}", ai_entry, user_entry)
                    pipe.ltrim(f"history:{chat_id}", 0, (config.CONVERSATION_MEMORY_SIZE * 2) - 1)
                    pipe.expire(f"history:{chat_id}", config.CONVERSATION_EXPIRATION_SECONDS)
                    pipe.execute()
                    return
                with self.fallback_memory_lock:
                    if chat_id not in self.fallback_memory: self.fallback_memory[chat_id] = {'history': [], 'state': 'greeting'}
                    history = self.fallback_memory[chat_id]['history']
                    history.extend([user_entry, ai_entry])
                    max_lines = config.CONVERSATION_MEMORY_SIZE * 2
                    if len(history) > max_lines:
                        self.fallback_memory[chat_id]['history'] = history[-max_lines:]
                    self.fallback_memory[chat_id]['last_update'] = time.time()
                    self._cleanup_fallback_memory()
        except (TimeoutError, redis.exceptions.RedisError) as e:
             self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {chat_id}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
             with self.fallback_memory_lock:
                if chat_id not in self.fallback_memory: self.fallback_memory[chat_id] = {'history': [], 'state': 'greeting'}
                self.fallback_memory[chat_id]['history'].extend([user_entry, ai_entry])

    def _cleanup_fallback_memory(self):
        if len(self.fallback_memory) > config.MAX_FALLBACK_USERS:
            sorted_entries = sorted(self.fallback_memory.items(), key=lambda x: x[1].get('last_update', 0))
            entries_to_remove = sorted_entries[:len(self.fallback_memory)//2]
            for chat_id, _ in entries_to_remove: del self.fallback_memory[chat_id]
            if entries_to_remove: self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ fallback –ø–∞–º—è—Ç—å: —É–¥–∞–ª–µ–Ω–æ {len(entries_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")

    def analyze_message_for_state_transition(self, user_message: str, current_state: str) -> str:
        """
        ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
        –¢–µ–ø–µ—Ä—å —É–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏–∑ –Ω–µ-—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
        """
        if not user_message:
            return current_state
        
        message_lower = user_message.lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –ù–û–í–û–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for state, keywords in self.STATE_KEYWORDS.items():
            if any(keyword in message_lower for keyword in keywords):
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏ –æ–Ω–æ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –º–µ–Ω—è–µ–º
                if state != current_state:
                    self.logger.info(f"–°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{current_state}' -> '{state}'")
                return state
        
        # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'closing' –∏–ª–∏ 'problem_solving',
        # –∞ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∑–Ω–∞—á–∏—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –∑–∞–¥–∞–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É —Ñ–∞–∫—Ç–æ–≤.
        if current_state in ['closing', 'problem_solving']:
            self.logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è '{current_state}' –≤ 'fact_finding' –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
            return 'fact_finding'
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –º—ã –Ω–µ –±—ã–ª–∏ –≤ —Å–ø–µ—Ü. —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º
        return current_state

    def clear_all_conversations(self):
        self.logger.info("üßπ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –ø–∞–º—è—Ç–∏...")
        if self.redis_available and self.redis_client:
            try:
                keys_to_delete = list(self.redis_client.scan_iter("*:*"))
                if keys_to_delete: self.redis_client.delete(*keys_to_delete)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}", exc_info=True)
        with self.fallback_memory_lock: self.fallback_memory.clear()
        with self.user_locks_lock: self.user_rw_locks.clear()
        self.logger.info("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

conversation_manager = ConversationManager()
