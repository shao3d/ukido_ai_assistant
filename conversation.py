# conversation.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–∞–º—è—Ç—å—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã, –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""

import redis
import threading
import logging
import hashlib
import time
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from config import config


class ConversationManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–∞–º—è—Ç—å—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:
    1. –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (greeting, fact_finding, problem_solving, closing)
    2. –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ Redis (–∏–ª–∏ fallback –ø–∞–º—è—Ç–∏)
    3. –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    4. –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ thread-safe –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    DIALOGUE_STATES = {
        'greeting': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
        'problem_solving': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Ä–µ–±–µ–Ω–∫–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 
        'fact_finding': '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö, —Ü–µ–Ω–∞—Ö, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏',
        'closing': '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫'
    }
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    STATE_KEYWORDS = {
        'problem_solving': ['–ø—Ä–æ–±–ª–µ–º', '—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', '–∑–∞—Å—Ç–µ–Ω—á–∏–≤', '–±–æ–∏—Ç—Å—è', 
                           '–Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è', '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω', '–∑–∞–º–∫–Ω', '–ø–æ–º–æ–≥–∏—Ç–µ'],
        'fact_finding': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', 
                        '—Å–∫–æ–ª—å–∫–æ', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–≥—Ä—É–ø–ø–∞', '–≤–æ–∑—Ä–∞—Å—Ç'],
        'closing': ['–∑–∞–ø–∏—Å–∞—Ç', '–ø–æ–ø—Ä–æ–±–æ–≤–∞', '—Ö–æ—á—É', '–≥–æ—Ç–æ–≤', '—Ä–µ—à–∏–ª', 
                   '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–¥–∞–≤–∞–π—Ç–µ']
    }
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        self.redis_client = None
        self.redis_available = False
        self._init_redis()
        
        # Fallback –ø–∞–º—è—Ç—å –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        self.fallback_memory = {}
        self.fallback_memory_lock = threading.Lock()
        
        # Thread safety: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_locks = {}
        self.user_locks_lock = threading.Lock()
        
        self.logger.info("üß† –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_redis(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å graceful degradation.
        –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å fallback –ø–∞–º—è—Ç—å—é.
        """
        if not config.REDIS_URL:
            self.logger.info("üî∂ Redis URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–∞–º—è—Ç—å")
            return
        
        try:
            self.redis_client = redis.from_url(config.REDIS_URL, decode_responses=True)
            self.redis_client.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.redis_available = True
            self.logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.redis_available = False
            self.logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.logger.info("üîÑ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å fallback –ø–∞–º—è—Ç—å—é")
    
    def _get_user_lock(self, chat_id: str) -> threading.Lock:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
        –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ.
        """
        chat_id = str(chat_id)
        with self.user_locks_lock:
            if chat_id not in self.user_locks:
                self.user_locks[chat_id] = threading.Lock()
            return self.user_locks[chat_id]
    
    def _normalize_chat_id(self, chat_id) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç chat_id –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if chat_id is None:
            return ""
        return str(chat_id)
    
    def get_dialogue_state(self, chat_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
        2. –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        3. –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'greeting'
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id:
            return 'greeting'
        
        user_lock = self._get_user_lock(chat_id)
        with user_lock:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
            if self.redis_available:
                try:
                    state_key = f"state:{chat_id}"
                    state = self.redis_client.get(state_key)
                    if state and state in self.DIALOGUE_STATES:
                        return state
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ Redis: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ Redis, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            history = self._get_conversation_history_internal(chat_id)
            return self._infer_state_from_history(history)
    
    def _infer_state_from_history(self, history: List[str]) -> str:
        """
        –í—ã–≤–æ–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
        """
        if not history:
            return 'greeting'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in history if msg.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")][-4:]
        recent_text = ' '.join(user_messages).lower()
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for state, keywords in self.STATE_KEYWORDS.items():
            if any(keyword in recent_text for keyword in keywords):
                self.logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{state}' –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
                return state
        
        # Fallback –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏
        if len(history) < 4:
            return 'greeting'
        elif len(history) < 8:
            return 'fact_finding'
        else:
            return 'problem_solving'
    
    def update_dialogue_state(self, chat_id: str, new_state: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Thread-safe –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ Redis –∏ fallback.
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id or new_state not in self.DIALOGUE_STATES:
            self.logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è: {chat_id}, {new_state}")
            return
        
        user_lock = self._get_user_lock(chat_id)
        with user_lock:
            if self.redis_available:
                try:
                    state_key = f"state:{chat_id}"
                    self.redis_client.set(state_key, new_state, ex=config.CONVERSATION_EXPIRATION_SECONDS)
                    self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {chat_id} -> {new_state}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ Redis: {e}")
    
    def get_conversation_history(self, chat_id: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ...", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ..."]
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id:
            return []
        
        user_lock = self._get_user_lock(chat_id)
        with user_lock:
            return self._get_conversation_history_internal(chat_id)
    
    def _get_conversation_history_internal(self, chat_id: str) -> List[str]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏).
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—ã–∑—ã–≤–∞—é—â–∏–º –∫–æ–¥–æ–º.
        """
        if self.redis_available:
            try:
                history_key = f"history:{chat_id}"
                # Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                return self.redis_client.lrange(history_key, 0, -1)[::-1]
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Redis: {e}")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        with self.fallback_memory_lock:
            return self.fallback_memory.get(chat_id, [])
    
    def update_conversation_history(self, chat_id: str, user_message: str, ai_response: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç AI.
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI (–¥–ª—è —á–∏—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏)
        2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis/fallback
        3. –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏
        """
        chat_id = self._normalize_chat_id(chat_id)
        if not chat_id or not user_message:
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        clean_response = ai_response.replace("[ACTION:SEND_LESSON_LINK]", "[–°–°–´–õ–ö–ê_–ù–ê_–£–†–û–ö]")
        
        user_lock = self._get_user_lock(chat_id)
        with user_lock:
            timestamp = datetime.now().isoformat()
            
            if self.redis_available:
                try:
                    history_key = f"history:{chat_id}"
                    metadata_key = f"metadata:{chat_id}"
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
                    pipe = self.redis_client.pipeline()
                    pipe.lpush(history_key, f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {clean_response}")
                    pipe.lpush(history_key, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
                    pipe.ltrim(history_key, 0, (config.CONVERSATION_MEMORY_SIZE * 2) - 1)
                    pipe.expire(history_key, config.CONVERSATION_EXPIRATION_SECONDS)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = {
                        "last_activity": timestamp,
                        "message_count": len(self._get_conversation_history_internal(chat_id)) // 2 + 1
                    }
                    pipe.hset(metadata_key, mapping=metadata)
                    pipe.expire(metadata_key, config.CONVERSATION_EXPIRATION_SECONDS)
                    
                    pipe.execute()
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ Redis: {e}")
                    self._update_fallback_memory(chat_id, user_message, clean_response)
            else:
                self._update_fallback_memory(chat_id, user_message, clean_response)
    
    def _update_fallback_memory(self, chat_id: str, user_message: str, ai_response: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç fallback –ø–∞–º—è—Ç—å –∫–æ–≥–¥–∞ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏.
        """
        with self.fallback_memory_lock:
            if chat_id not in self.fallback_memory:
                self.fallback_memory[chat_id] = []
            
            self.fallback_memory[chat_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
            self.fallback_memory[chat_id].append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            max_lines = config.CONVERSATION_MEMORY_SIZE * 2
            if len(self.fallback_memory[chat_id]) > max_lines:
                self.fallback_memory[chat_id] = self.fallback_memory[chat_id][-max_lines:]
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            self._cleanup_fallback_memory()
    
    def _cleanup_fallback_memory(self):
        """
        –û—á–∏—â–∞–µ—Ç fallback –ø–∞–º—è—Ç—å –æ—Ç –ª–∏—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.
        """
        if len(self.fallback_memory) > config.MAX_FALLBACK_USERS:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            old_keys = list(self.fallback_memory.keys())[:len(self.fallback_memory)//2]
            for key in old_keys:
                del self.fallback_memory[key]
            self.logger.info(f"–û—á–∏—â–µ–Ω–∞ fallback –ø–∞–º—è—Ç—å: —É–¥–∞–ª–µ–Ω–æ {len(old_keys)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    def analyze_message_for_state_transition(self, user_message: str, current_state: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Ä–æ–∫–∞ (-> closing)
        2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        3. –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
        4. –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        """
        if not user_message:
            return current_state
        
        message_lower = user_message.lower()
        
        # –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Ä–æ–∫–∞ –∏–º–µ—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        direct_lesson_keywords = ["–ø—Ä–æ–±–Ω", "–±–µ—Å–ø–ª–∞—Ç–Ω", "–ø–æ–ø—Ä–æ–±–æ–≤–∞", "–∑–∞–ø–∏—Å–∞—Ç", "—Ö–æ—á—É —É—Ä–æ–∫", "–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É"]
        if any(word in message_lower for word in direct_lesson_keywords):
            self.logger.info("–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Ä–æ–∫–∞ -> closing")
            return 'closing'
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for state, keywords in self.STATE_KEYWORDS.items():
            if any(keyword in message_lower for keyword in keywords):
                self.logger.info(f"–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{state}' –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
                return state
        
        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ–Ω–µ–µ 5 —Å–ª–æ–≤) —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        if len(user_message.split()) < 5:
            return current_state
        
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if current_state == 'greeting':
            return 'fact_finding'
        elif current_state == 'fact_finding' and len(user_message.split()) > 10:
            return 'problem_solving'
        
        return current_state
    
    def get_conversation_stats(self, chat_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        """
        chat_id = self._normalize_chat_id(chat_id)
        history = self.get_conversation_history(chat_id)
        current_state = self.get_dialogue_state(chat_id)
        
        return {
            "chat_id": chat_id,
            "current_state": current_state,
            "message_count": len(history),
            "redis_available": self.redis_available,
            "last_messages": history[-4:] if history else []
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
conversation_manager = ConversationManager()
