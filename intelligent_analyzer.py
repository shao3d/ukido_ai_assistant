# intelligent_analyzer.py
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ + AI –∞–Ω–∞–ª–∏–∑ + —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞.

–ü–†–û–î–ê–ö–®–ù –£–õ–£–ß–®–ï–ù–ò–Ø:
- –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
- –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è LLM –∑–∞—Ç—Ä–∞—Ç
- –£–º–Ω–æ–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
import hashlib
import time
import threading
from typing import Tuple, List, Optional, Dict, Any
from collections import defaultdict
from config import config


class AdvancedCache:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–µ—à–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ TTL
        self.category_cache = {}      # –ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–æ–ª–≥–∏–π TTL)
        self.state_cache = {}         # –ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–æ–≤ (—Å—Ä–µ–¥–Ω–∏–π TTL)
        self.philosophy_cache = {}    # –ö–µ—à —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–π TTL)
        
        # TTL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.category_ttl = 24 * 3600    # 24 —á–∞—Å–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.state_ttl = 4 * 3600        # 4 —á–∞—Å–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.philosophy_ttl = 2 * 3600   # 2 —á–∞—Å–∞ –¥–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache_stats = {
            'category_hits': 0, 'category_misses': 0,
            'state_hits': 0, 'state_misses': 0,
            'philosophy_hits': 0, 'philosophy_misses': 0,
            'total_ai_calls_saved': 0
        }
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.popular_patterns = defaultdict(int)
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è thread safety
        self.category_lock = threading.Lock()
        self.state_lock = threading.Lock()
        self.philosophy_lock = threading.Lock()
        self.stats_lock = threading.Lock()
        
        self.logger = logging.getLogger(f"{__name__}.AdvancedCache")
        self.logger.info("üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _cleanup_expired_entries(self, cache_dict: dict, ttl: int, lock: threading.Lock):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞"""
        current_time = time.time()
        with lock:
            expired_keys = [
                key for key, value in cache_dict.items()
                if current_time - value['timestamp'] > ttl
            ]
            for key in expired_keys:
                del cache_dict[key]
            
            if expired_keys:
                self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞")
    
    def get_category_cache(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–µ—à–∞"""
        self._cleanup_expired_entries(self.category_cache, self.category_ttl, self.category_lock)
        
        with self.category_lock:
            if key in self.category_cache:
                entry = self.category_cache[key]
                if time.time() - entry['timestamp'] < self.category_ttl:
                    with self.stats_lock:
                        self.cache_stats['category_hits'] += 1
                        self.cache_stats['total_ai_calls_saved'] += 1
                    return entry['value']
        
        with self.stats_lock:
            self.cache_stats['category_misses'] += 1
        return None
    
    def set_category_cache(self, key: str, value: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–µ—à"""
        with self.category_lock:
            self.category_cache[key] = {
                'value': value,
                'timestamp': time.time()
            }
    
    def get_state_cache(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∫–µ—à–∞"""
        self._cleanup_expired_entries(self.state_cache, self.state_ttl, self.state_lock)
        
        with self.state_lock:
            if key in self.state_cache:
                entry = self.state_cache[key]
                if time.time() - entry['timestamp'] < self.state_ttl:
                    with self.stats_lock:
                        self.cache_stats['state_hits'] += 1
                        self.cache_stats['total_ai_calls_saved'] += 1
                    return entry['value']
        
        with self.stats_lock:
            self.cache_stats['state_misses'] += 1
        return None
    
    def set_state_cache(self, key: str, value: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–µ—à"""
        with self.state_lock:
            self.state_cache[key] = {
                'value': value,
                'timestamp': time.time()
            }
    
    def get_philosophy_cache(self, key: str) -> Optional[Tuple[bool, int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑ –∫–µ—à–∞"""
        self._cleanup_expired_entries(self.philosophy_cache, self.philosophy_ttl, self.philosophy_lock)
        
        with self.philosophy_lock:
            if key in self.philosophy_cache:
                entry = self.philosophy_cache[key]
                if time.time() - entry['timestamp'] < self.philosophy_ttl:
                    with self.stats_lock:
                        self.cache_stats['philosophy_hits'] += 1
                    return entry['value']
        
        with self.stats_lock:
            self.cache_stats['philosophy_misses'] += 1
        return None
    
    def set_philosophy_cache(self, key: str, value: Tuple[bool, int]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ –∫–µ—à"""
        with self.philosophy_lock:
            self.philosophy_cache[key] = {
                'value': value,
                'timestamp': time.time()
            }
    
    def track_popular_pattern(self, pattern: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.popular_patterns[pattern] += 1
        
        # –ö–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if sum(self.popular_patterns.values()) % 100 == 0:
            self._analyze_popular_patterns()
    
    def _analyze_popular_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        sorted_patterns = sorted(self.popular_patterns.items(), key=lambda x: x[1], reverse=True)
        top_patterns = sorted_patterns[:10]
        
        self.logger.info(f"üìä –¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {top_patterns}")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with self.stats_lock:
            stats = self.cache_stats.copy()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        category_total = stats['category_hits'] + stats['category_misses']
        state_total = stats['state_hits'] + stats['state_misses']
        philosophy_total = stats['philosophy_hits'] + stats['philosophy_misses']
        
        stats.update({
            'category_hit_rate': round(stats['category_hits'] / max(category_total, 1) * 100, 1),
            'state_hit_rate': round(stats['state_hits'] / max(state_total, 1) * 100, 1),
            'philosophy_hit_rate': round(stats['philosophy_hits'] / max(philosophy_total, 1) * 100, 1),
            'total_requests': category_total + state_total + philosophy_total,
            'cache_sizes': {
                'category': len(self.category_cache),
                'state': len(self.state_cache), 
                'philosophy': len(self.philosophy_cache)
            }
        })
        
        return stats


class IntelligentAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–æ–≤.
    –í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è" –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
    
    –ü–†–û–î–ê–ö–®–ù –£–õ–£–ß–®–ï–ù–ò–Ø:
    - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ LLM API
    - –£–º–Ω–æ–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache = AdvancedCache()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.CATEGORY_KEYWORDS = {
            'factual': [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '—Ä–∞—Å—Ü–µ–Ω–∫–∏', '—Ç–∞—Ä–∏—Ñ—ã',
                '–∫—É—Ä—Å', '–∫—É—Ä—Å—ã', '–∑–∞–Ω—è—Ç–∏—è', '—É—Ä–æ–∫–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–æ–≥—Ä–∞–º–º—ã',
                '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '—Ç—Ä–µ–Ω–µ—Ä', '—É—á–∏—Ç–µ–ª—å', '–∫—Ç–æ –≤–µ–¥–µ—Ç', '–∫—Ç–æ —É—á–∏—Ç',
                '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', '–≤–æ —Å–∫–æ–ª—å–∫–æ', '–≥—Ä–∞—Ñ–∏–∫',
                '–≤–æ–∑—Ä–∞—Å—Ç', '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏', '–º–æ–∂–Ω–æ –ª–∏ –≤',
                '–≥—Ä—É–ø–ø–∞', '—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π', '—Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ',
                '–æ–Ω–ª–∞–π–Ω', '—Ñ–æ—Ä–º–∞—Ç', '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
                '–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', '–ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—Å—å',
                '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–≥–∞—Ä–∞–Ω—Ç–∏–∏',
                '—Å–∫–∏–¥–∫–∏', '–∞–∫—Ü–∏–∏', '–ª—å–≥–æ—Ç—ã', '—Ä–∞—Å—Å—Ä–æ—á–∫–∞', '–æ–ø–ª–∞—Ç–∞'
            ],
            
            'philosophical': [
                # –ì–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏
                '–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—á—Ç–æ –¥–µ–ª–∞—Ç—å —Å', '–∫–∞–∫ –±—ã—Ç—å', '–∫–∞–∫ –∂–∏—Ç—å',
                '–ø–æ—á–µ–º—É –¥–µ—Ç–∏', '–∑–∞—á–µ–º –¥–µ—Ç—è–º', '–≤ –Ω–∞—à–µ –≤—Ä–µ–º—è', '—Ä–∞–Ω—å—à–µ –±—ã–ª–æ',
                '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ—Ç–∏', '–ø–æ–∫–æ–ª–µ–Ω–∏–µ', '–º–æ–ª–æ–¥–µ–∂—å —Å–µ–π—á–∞—Å',
                '–ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è', '–º–µ—Ç–æ–¥–∏–∫–∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è', '–ø–æ–¥—Ö–æ–¥—ã –∫ –¥–µ—Ç—è–º',
                '—Å–º—ã—Å–ª', '–≤–∞–∂–Ω–æ—Å—Ç—å', '–Ω—É–∂–Ω–æ –ª–∏', '—Å—Ç–æ–∏—Ç –ª–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å',
                '—á—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ', '–∫–∞–∫ –ø–æ–Ω—è—Ç—å —Ä–µ–±–µ–Ω–∫–∞',
                '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è', '–≥–ª—É–±–∏–Ω–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã'
            ],
            
            'problem_solving': [
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                '–Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è', '–∫–∞–ø—Ä–∏–∑–Ω–∏—á–∞–µ—Ç', '–ø–ª–∞—á–µ—Ç', '–∏—Å—Ç–µ—Ä–∏–∫–∏',
                '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π', '–¥–µ—Ä–µ—Ç—Å—è', '–∫—Ä–∏—á–∏—Ç', '–Ω–µ –≥–æ–≤–æ—Ä–∏—Ç',
                '–∑–∞–º–∫–Ω—É—Ç—ã–π', '—Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π', '–±–æ–∏—Ç—Å—è', '—Ç—Ä–µ–≤–æ–∂–Ω—ã–π',
                '–Ω–µ —Ö–æ—á–µ—Ç', '–æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è', '–ª–µ–Ω–∏–≤—ã–π', '–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–π',
                '–ø—Ä–æ–±–ª–µ–º–∞ —Å', '–∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è', '—á—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏'
            ]
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–æ–≤
        self.STATE_KEYWORDS = {
            'greeting': [
                '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
                '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —à–∫–æ–ª–µ', '—á—Ç–æ —ç—Ç–æ –∑–∞ —à–∫–æ–ª–∞', '–ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Å–ª—ã—à—É'
            ],
            'fact_finding': [
                '—É–∑–Ω–∞—Ç—å', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
                '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç', '—É—Å–ª–æ–≤–∏—è'
            ],
            'problem_solving': [
                '–ø–æ–º–æ–≥–∏—Ç–µ', '–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ', '–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å',
                '–ø—Ä–æ–±–ª–µ–º–∞', '—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏', '–∫–∞–∫ –±—ã—Ç—å'
            ],
            'closing': [
                '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–≥–æ—Ç–æ–≤',
                '—Å–æ–≥–ª–∞—Å–µ–Ω', '–ø–æ–¥—Ö–æ–¥–∏—Ç', '—Ü–µ–Ω–∞ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç', '—Ö–æ—á—É —É—Ä–æ–∫'
            ]
        }
        
        # –¢–∞–±—É —Å–ª–æ–≤–∞ –¥–ª—è —é–º–æ—Ä–∞
        self.HUMOR_TABOO_KEYWORDS = [
            '–±–æ–ª–µ–∑–Ω—å', '–±–æ–ª—å–Ω–æ–π', '–∏–Ω–≤–∞–ª–∏–¥', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å', '–¥–∏–∞–≥–Ω–æ–∑',
            '—Å–º–µ—Ä—Ç—å', '—É–º–µ—Ä', '–ø–æ–≥–∏–±', '–ø–æ—Ö–æ—Ä–æ–Ω—ã', '–ø–æ—Ç–µ—Ä—è',
            '—Ä–∞–∑–≤–æ–¥', '—Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å', '—É—à–µ–ª –æ—Ç –Ω–∞—Å', '–±—Ä–æ—Å–∏–ª',
            '–∏–∑–±–∏–µ–Ω–∏–µ', '–Ω–∞—Å–∏–ª–∏–µ', '–±—å–µ—Ç', '–∏–∑–¥–µ–≤–∞–µ—Ç—Å—è',
            '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—É–∏—Ü–∏–¥', '—Ö–æ—á–µ—Ç –ø–æ–∫–æ–Ω—á–∏—Ç—å', '—Ç—Ä–∞–≤–º–∞',
            '–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ', '–¥–æ–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '–ø—Ä–∏—Å—Ç–∞–≤–∞–Ω–∏—è'
        ]
        
        self.logger.info("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _generate_cache_key(self, text: str, context: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞"""
        combined = f"{text}|{context}"
        return hashlib.md5(combined.encode()).hexdigest()
    
    def _normalize_text_for_caching(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        normalized = ' '.join(text.lower().split())
        
        # –£–¥–∞–ª—è–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
        stop_words = ['–∞', '–∏', '–Ω–æ', '–¥–∞', '–∂–µ', '–Ω—É', '–≤–æ—Ç', '—ç—Ç–æ', '—Ç–æ']
        words = [w for w in normalized.split() if w not in stop_words]
        
        return ' '.join(words)
    
    def analyze_question_category(self, user_message: str, conversation_history: List[str]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Returns:
            str: 'factual', 'philosophical', 'problem_solving', 'sensitive'
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        normalized_message = self._normalize_text_for_caching(user_message)
        cache_key = self._generate_cache_key(normalized_message, "category")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞
        cached_result = self.cache.get_category_cache(cache_key)
        if cached_result:
            self.logger.info(f"üíæ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫–µ—à–∞: {cached_result}")
            self.cache.track_popular_pattern(f"category:{normalized_message[:50]}")
            return cached_result
        
        message_lower = user_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±—É –Ω–∞ —é–º–æ—Ä
        if any(taboo in message_lower for taboo in self.HUMOR_TABOO_KEYWORDS):
            self.logger.info("–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±—É –Ω–∞ —é–º–æ—Ä - –¥–µ–ª–∏–∫–∞—Ç–Ω–∞—è —Ç–µ–º–∞")
            result = 'sensitive'
            self.cache.set_category_cache(cache_key, result)
            return result
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–ø–æ–∫—Ä—ã–≤–∞–µ—Ç ~90% —Å–ª—É—á–∞–µ–≤)
        for category, keywords in self.CATEGORY_KEYWORDS.items():
            if any(keyword in message_lower for keyword in keywords):
                self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {category}")
                self.cache.set_category_cache(cache_key, category)
                return category
        
        # AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ª—É—á–∞–µ–≤ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        history_context = ' '.join(conversation_history[-4:]) if conversation_history else '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞'
        
        ai_prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.

–ò—Å—Ç–æ—Ä–∏—è: {history_context}
–í–æ–ø—Ä–æ—Å: "{user_message}"

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
factual - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —à–∫–æ–ª–µ/–∫—É—Ä—Å–∞—Ö/—Ü–µ–Ω–∞—Ö/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
philosophical - —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏/—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–µ—Ç—è—Ö/–ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö
problem_solving - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞

–û—Ç–≤–µ—Ç (–æ–¥–Ω–æ —Å–ª–æ–≤–æ):"""

        try:
            from app import ai_service
            result = ai_service._call_ai_model(ai_prompt).strip().lower()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            valid_categories = ['factual', 'philosophical', 'problem_solving']
            if result in valid_categories:
                self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ AI: {result}")
                self.cache.set_category_cache(cache_key, result)
                return result
            else:
                self.logger.warning(f"AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {result}")
                result = 'factual'  # Fallback
                self.cache.set_category_cache(cache_key, result)
                return result
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            result = 'factual'  # Fallback
            self.cache.set_category_cache(cache_key, result)
            return result
    
    def analyze_lead_state(self, user_message: str, current_state: str, conversation_history: List[str]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Returns:
            str: 'greeting', 'fact_finding', 'problem_solving', 'closing'
        """
        normalized_message = self._normalize_text_for_caching(user_message)
        context_key = f"{current_state}|{len(conversation_history)}"
        cache_key = self._generate_cache_key(normalized_message, context_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_result = self.cache.get_state_cache(cache_key)
        if cached_result:
            self.logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–µ—à–∞: {cached_result}")
            return cached_result
        
        message_lower = user_message.lower()
        
        # –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Ä–æ–∫–∞ –∏–º–µ—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        direct_lesson_keywords = [
            "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫", "—Ö–æ—á—É —É—Ä–æ–∫", 
            "–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è", "–≥–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å"
        ]
        if any(word in message_lower for word in direct_lesson_keywords):
            self.logger.info("–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Ä–æ–∫–∞ ‚Üí closing")
            result = 'closing'
            self.cache.set_state_cache(cache_key, result)
            return result
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for state, keywords in self.STATE_KEYWORDS.items():
            if any(keyword in message_lower for keyword in keywords):
                self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {state}")
                self.cache.set_state_cache(cache_key, state)
                return state
        
        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        if len(user_message.split()) < 5:
            self.cache.set_state_cache(cache_key, current_state)
            return current_state
        
        # AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        history_context = ' '.join(conversation_history[-6:]) if conversation_history else '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞'
        
        ai_prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–¥–∞ –≤ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}
–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {history_context}
–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: "{user_message}"

–°–æ—Å—Ç–æ—è–Ω–∏—è:
greeting - –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —à–∫–æ–ª–µ
fact_finding - –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö/—Ü–µ–Ω–∞—Ö/—É—Å–ª–æ–≤–∏—è—Ö  
problem_solving - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Ä–µ–±–µ–Ω–∫–∞, –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏
closing - –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫/–∫—É—Ä—Å

–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ):"""

        try:
            from app import ai_service
            result = ai_service._call_ai_model(ai_prompt).strip().lower()
            
            valid_states = ['greeting', 'fact_finding', 'problem_solving', 'closing']
            if result in valid_states:
                self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ AI: {result}")
                self.cache.set_state_cache(cache_key, result)
                return result
            else:
                self.logger.warning(f"AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {result}")
                self.cache.set_state_cache(cache_key, current_state)
                return current_state
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            self.cache.set_state_cache(cache_key, current_state)
            return current_state
    
    def analyze_philosophical_loop(self, conversation_history: List[str]) -> Tuple[bool, int]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ" –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Returns:
            Tuple[bool, int]: (–Ω—É–∂–µ–Ω_–º–æ—Å—Ç–∏–∫_–∫_—à–∫–æ–ª–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö_–ø–æ–¥—Ä—è–¥)
        """
        if not conversation_history:
            return False, 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_messages = conversation_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        cache_key = self._generate_cache_key('|'.join(recent_messages), "philosophy")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_result = self.cache.get_philosophy_cache(cache_key)
        if cached_result:
            self.logger.info(f"üíæ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–µ—à–∞: {cached_result}")
            return cached_result
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in conversation_history if msg.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")][-10:]
        
        philosophical_count = 0
        
        # –°—á–∏—Ç–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥—Ä—è–¥ —Å –∫–æ–Ω—Ü–∞
        for message in reversed(user_messages):
            message_text = message.replace("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "").strip()
            category = self.analyze_question_category(message_text, [])
            
            if category == 'philosophical':
                philosophical_count += 1
            else:
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
        
        needs_bridge = philosophical_count >= 3
        result = (needs_bridge, philosophical_count)
        
        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.cache.set_philosophy_cache(cache_key, result)
        
        if needs_bridge:
            self.logger.info(f"–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏: {philosophical_count} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥")
        
        return result
    
    def should_use_humor_taboo(self, user_message: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–±–µ–≥–∞—Ç—å —é–º–æ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ.
        
        Returns:
            bool: True –µ—Å–ª–∏ —é–º–æ—Ä —Ç–∞–±—É
        """
        message_lower = user_message.lower()
        return any(taboo in message_lower for taboo in self.HUMOR_TABOO_KEYWORDS)
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
        """
        cache_stats = self.cache.get_cache_stats()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        total_ai_calls_would_be = (
            cache_stats['category_hits'] + cache_stats['category_misses'] +
            cache_stats['state_hits'] + cache_stats['state_misses']
        )
        
        ai_calls_made = cache_stats['category_misses'] + cache_stats['state_misses']
        cost_savings_percent = round(
            (cache_stats['total_ai_calls_saved'] / max(total_ai_calls_would_be, 1)) * 100, 1
        )
        
        return {
            **cache_stats,
            'total_ai_calls_would_be': total_ai_calls_would_be,
            'actual_ai_calls_made': ai_calls_made,
            'cost_savings_percent': cost_savings_percent,
            'avg_cache_efficiency': round(
                (cache_stats['category_hit_rate'] + cache_stats['state_hit_rate']) / 2, 1
            )
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
intelligent_analyzer = IntelligentAnalyzer()