# intelligent_analyzer.py
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ + AI –∞–Ω–∞–ª–∏–∑ + —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞.
"""

import logging
import hashlib
import time
from typing import Tuple, List, Optional
from config import config


class IntelligentAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–æ–≤.
    –í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è" –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ö–µ—à —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–æ–≤ (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        self.state_analysis_cache = {}
        self.cache_ttl = 1800  # 30 –º–∏–Ω—É—Ç
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.CATEGORY_KEYWORDS = {
            'factual': [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '—Ä–∞—Å—Ü–µ–Ω–∫–∏', '—Ç–∞—Ä–∏—Ñ—ã',
                '–∫—É—Ä—Å', '–∫—É—Ä—Å—ã', '–∑–∞–Ω—è—Ç–∏—è', '—É—Ä–æ–∫–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–æ–≥—Ä–∞–º–º—ã',
                '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '—Ç—Ä–µ–Ω–µ—Ä', '—É—á–∏—Ç–µ–ª—å', '–∫—Ç–æ –≤–µ–¥–µ—Ç', '–∫—Ç–æ —É—á–∏—Ç',
                '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', '–≤–æ —Å–∫–æ–ª—å–∫–æ', '–≥—Ä–∞—Ñ–∏–∫',
                '–≤–æ–∑—Ä–∞—Å—Ç', '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏', '–º–æ–∂–Ω–æ –ª–∏ –≤',
                '–≥—Ä—É–ø–ø–∞', '—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π', '—Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ',
                '–æ–Ω–ª–∞–π–Ω', '—Ñ–æ—Ä–º–∞—Ç', '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
                '–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', '–ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—Å—å',
                '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–≥–∞—Ä–∞–Ω—Ç–∏–∏',
                '—Å–∫–∏–¥–∫–∏', '–∞–∫—Ü–∏–∏', '–ª—å–≥–æ—Ç—ã', '—Ä–∞—Å—Å—Ä–æ—á–∫–∞', '–æ–ø–ª–∞—Ç–∞'
            ],
            
            'philosophical': [
                # –ì–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏
                '–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—á—Ç–æ –¥–µ–ª–∞—Ç—å —Å', '–∫–∞–∫ –±—ã—Ç—å', '–∫–∞–∫ –∂–∏—Ç—å',
                '–ø–æ—á–µ–º—É –¥–µ—Ç–∏', '–∑–∞—á–µ–º –¥–µ—Ç—è–º', '–≤ –Ω–∞—à–µ –≤—Ä–µ–º—è', '—Ä–∞–Ω—å—à–µ –±—ã–ª–æ',
                '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ—Ç–∏', '–ø–æ–∫–æ–ª–µ–Ω–∏–µ', '–º–æ–ª–æ–¥–µ–∂—å —Å–µ–π—á–∞—Å',
                '–ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è', '–º–µ—Ç–æ–¥–∏–∫–∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è', '–ø–æ–¥—Ö–æ–¥—ã –∫ –¥–µ—Ç—è–º',
                '—Å–º—ã—Å–ª', '–≤–∞–∂–Ω–æ—Å—Ç—å', '–Ω—É–∂–Ω–æ –ª–∏', '—Å—Ç–æ–∏—Ç –ª–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å',
                '—á—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ', '–∫–∞–∫ –ø–æ–Ω—è—Ç—å —Ä–µ–±–µ–Ω–∫–∞',
                '—Ä–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–±—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–º', '–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –¥–µ—Ç–µ–π',
                '–≥—Ä–∞–Ω–∏—Ü—ã', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '—Å–≤–æ–±–æ–¥–∞ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å',
                '–≥–∞–¥–∂–µ—Ç—ã –∏ –¥–µ—Ç–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—ç–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
                '–¥—Ä—É–∑—å—è —Ä–µ–±–µ–Ω–∫–∞', '—Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–µ—Ä—Å—Ç–Ω–∏–∫–∞–º–∏'
            ],
            
            'problem_solving': [
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–µ—Ç–µ–π
                '–ø—Ä–æ–±–ª–µ–º–∞', '–ø—Ä–æ–±–ª–µ–º—ã', '—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏', '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
                '–Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è', '–Ω–µ —Å–ª—É—à–∞–µ—Ç', '–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç', '–¥–µ–ª–∞–µ—Ç –Ω–∞–∑–ª–æ',
                '–∫–∞–ø—Ä–∏–∑—ã', '–∏—Å—Ç–µ—Ä–∏–∫–∏', '–ø–ª–∞—á–µ—Ç', '–∫—Ä–∏—á–∏—Ç', '–∑–ª–∏—Ç—Å—è',
                '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π', '–¥–µ—Ä–µ—Ç—Å—è', '–∫—É—Å–∞–µ—Ç—Å—è', '—Ç–æ–ª–∫–∞–µ—Ç',
                '–∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π', '—Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π', '–±–æ–∏—Ç—Å—è', '—Ç—Ä–µ–≤–æ–∂–Ω—ã–π',
                '–∑–∞–º–∫–Ω—É—Ç—ã–π', '–º–æ–ª—á–∏—Ç', '–Ω–µ –æ–±—â–∞–µ—Ç—Å—è', '–∏–∑–±–µ–≥–∞–µ—Ç',
                '–≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π', '–Ω–µ —Å–∏–¥–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ', '–Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π',
                '–Ω–µ —É–º–µ–µ—Ç', '–Ω–µ –º–æ–∂–µ—Ç', '–æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è', '–Ω–µ —Ö–æ—á–µ—Ç',
                '–ø–ª–æ—Ö–æ —Å–ø–∏—Ç', '–∫–æ—à–º–∞—Ä—ã', '—Å—Ç—Ä–∞—Ö–∏', '—Ñ–æ–±–∏–∏',
                '—Ä–µ–≤–Ω–æ—Å—Ç—å', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è', '—Å–æ–ø–µ—Ä–Ω–∏—á–µ—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–µ—Ç—å–º–∏',
                '—à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', '–Ω–µ —Ö–æ—á–µ—Ç —É—á–∏—Ç—å—Å—è', '–ø–ª–æ—Ö–∏–µ –æ—Ü–µ–Ω–∫–∏',
                '–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —É—á–∏—Ç–µ–ª—è–º–∏', '–ø—Ä–æ–±–ª–µ–º—ã —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏'
            ]
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–∏–¥–∞
        self.STATE_KEYWORDS = {
            'greeting': [
                '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —à–∫–æ–ª–µ',
                '—á—Ç–æ —ç—Ç–æ –∑–∞ —à–∫–æ–ª–∞', '–≤–ø–µ—Ä–≤—ã–µ —Å–ª—ã—à—É', '–Ω–µ –∑–Ω–∞—é —á—Ç–æ —ç—Ç–æ',
                '–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å', '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à–∞ —à–∫–æ–ª–∞'
            ],
            
            'fact_finding': [
                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '—Ä–∞—Å—Ü–µ–Ω–∫–∏',
                '–∫—É—Ä—Å—ã', '–ø—Ä–æ–≥—Ä–∞–º–º—ã', '—á—Ç–æ –∏–∑—É—á–∞—é—Ç', '—á–µ–º—É —É—á–∞—Ç',
                '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞ –∑–∞–Ω—è—Ç–∏—è', '–≥—Ä–∞—Ñ–∏–∫',
                '–≤–æ–∑—Ä–∞—Å—Ç', '–ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –º–æ–µ–º—É', '–º–æ–∂–Ω–æ –ª–∏ –≤',
                '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–∫—Ç–æ –≤–µ–¥–µ—Ç', '–æ–ø—ã—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
                '—Ñ–æ—Ä–º–∞—Ç', '–æ–Ω–ª–∞–π–Ω', '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                '–≥—Ä—É–ø–ø—ã', '—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ',
                '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–≥–∞—Ä–∞–Ω—Ç–∏–∏',
                '–æ—Ç–∑—ã–≤—ã', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '—Ä–µ–ø—É—Ç–∞—Ü–∏—è'
            ],
            
            'problem_solving': [
                # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
                '–ø—Ä–æ–±–ª–µ–º–∞', '–ø—Ä–æ–±–ª–µ–º—ã', '—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏', '–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å',
                '–ø–æ–º–æ–≥–∏—Ç–µ', '–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ', '–∫–∞–∫ –±—ã—Ç—å', '—á—Ç–æ –¥–µ–ª–∞—Ç—å',
                '–Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è', '–∫–∞–ø—Ä–∏–∑—ã', '–∏—Å—Ç–µ—Ä–∏–∫–∏', '–∞–≥—Ä–µ—Å—Å–∏—è',
                '–∑–∞—Å—Ç–µ–Ω—á–∏–≤–æ—Å—Ç—å', '—Å—Ç—Ä–∞—Ö–∏', '—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–∑–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å',
                '–Ω–µ —É–º–µ–µ—Ç –æ–±—â–∞—Ç—å—Å—è', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã', '—Å—Å–æ—Ä—ã',
                '—à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', '–Ω–µ —Ö–æ—á–µ—Ç —É—á–∏—Ç—å—Å—è',
                '–≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ä–∞—Å—Å–µ—è–Ω–Ω–æ—Å—Ç—å',
                '–Ω–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞', '–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–∫–æ–º–ø–ª–µ–∫—Å—ã'
            ],
            
            'closing': [
                # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—é
                '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–≥–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º',
                '–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–≥–¥–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å',
                '–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–Ω–∞—á–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è',
                '—É–±–µ–¥–∏–ª–∏', '—Ä–µ—à–∏–ª–∏', '–ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–º', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
                '–∫–æ–≥–¥–∞ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å', '–µ—Å—Ç—å –º–µ—Å—Ç–∞', '—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è',
                '–æ–ø–ª–∞—Ç–∏—Ç—å', '—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç', '—Ü–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç'
            ]
        }
        
        # –¢–∞–±—É —Å–ª–æ–≤–∞ –¥–ª—è —é–º–æ—Ä–∞
        self.HUMOR_TABOO_KEYWORDS = [
            '–±–æ–ª–µ–∑–Ω—å', '–±–æ–ª—å–Ω–æ–π', '–∏–Ω–≤–∞–ª–∏–¥', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å', '–¥–∏–∞–≥–Ω–æ–∑',
            '—Å–º–µ—Ä—Ç—å', '—É–º–µ—Ä', '–ø–æ–≥–∏–±', '–ø–æ—Ö–æ—Ä–æ–Ω—ã', '–ø–æ—Ç–µ—Ä—è',
            '—Ä–∞–∑–≤–æ–¥', '—Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å', '—É—à–µ–ª –æ—Ç –Ω–∞—Å', '–±—Ä–æ—Å–∏–ª',
            '–∏–∑–±–∏–µ–Ω–∏–µ', '–Ω–∞—Å–∏–ª–∏–µ', '–±—å–µ—Ç', '–∏–∑–¥–µ–≤–∞–µ—Ç—Å—è',
            '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—É–∏—Ü–∏–¥', '—Ö–æ—á–µ—Ç –ø–æ–∫–æ–Ω—á–∏—Ç—å', '—Ç—Ä–∞–≤–º–∞',
            '–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ', '–¥–æ–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '–ø—Ä–∏—Å—Ç–∞–≤–∞–Ω–∏—è'
        ]
        
        self.logger.info("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _get_cache_key_for_state(self, data: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        return hashlib.md5(data.encode()).hexdigest()
    
    def _get_cached_state_result(self, cache_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –∫–µ—à–∞"""
        if cache_key in self.state_analysis_cache:
            entry = self.state_analysis_cache[cache_key]
            if time.time() - entry['timestamp'] < self.cache_ttl:
                return entry['result']
            else:
                del self.state_analysis_cache[cache_key]
        return None
    
    def _cache_state_result(self, cache_key: str, result: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–µ—à"""
        self.state_analysis_cache[cache_key] = {
            'result': result,
            'timestamp': time.time()
        }
    
    def analyze_question_category(self, user_message: str, conversation_history: List[str]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ + AI –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã).
        
        Returns:
            str: 'factual', 'philosophical', 'problem_solving', 'sensitive'
        """
        message_lower = user_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±—É –Ω–∞ —é–º–æ—Ä
        if any(taboo in message_lower for taboo in self.HUMOR_TABOO_KEYWORDS):
            self.logger.info("–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±—É –Ω–∞ —é–º–æ—Ä - –¥–µ–ª–∏–∫–∞—Ç–Ω–∞—è —Ç–µ–º–∞")
            return 'sensitive'
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–ø–æ–∫—Ä—ã–≤–∞–µ—Ç ~90% —Å–ª—É—á–∞–µ–≤)
        for category, keywords in self.CATEGORY_KEYWORDS.items():
            if any(keyword in message_lower for keyword in keywords):
                self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {category}")
                return category
        
        # AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ª—É—á–∞–µ–≤ (–±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)
        history_context = ' '.join(conversation_history[-4:]) if conversation_history else '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞'
        
        ai_prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.

–ò—Å—Ç–æ—Ä–∏—è: {history_context}
–í–æ–ø—Ä–æ—Å: "{user_message}"

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
factual - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —à–∫–æ–ª–µ/–∫—É—Ä—Å–∞—Ö/—Ü–µ–Ω–∞—Ö/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
philosophical - —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏/—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–µ—Ç—è—Ö/–ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö
problem_solving - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞

–û—Ç–≤–µ—Ç (–æ–¥–Ω–æ —Å–ª–æ–≤–æ):"""

        try:
            from app import ai_service
            result = ai_service._call_ai_model(ai_prompt).strip().lower()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            valid_categories = ['factual', 'philosophical', 'problem_solving']
            if result in valid_categories:
                self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ AI: {result}")
                return result
            else:
                self.logger.warning(f"AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {result}")
                return 'factual'  # Fallback
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return 'factual'  # Fallback
    
    def analyze_lead_state(self, user_message: str, current_state: str, conversation_history: List[str]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
        
        Returns:
            str: 'greeting', 'fact_finding', 'problem_solving', 'closing'
        """
        message_lower = user_message.lower()
        
        # –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Ä–æ–∫–∞ –∏–º–µ—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        direct_lesson_keywords = [
            "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫", "—Ö–æ—á—É —É—Ä–æ–∫", 
            "–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è", "–≥–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å"
        ]
        if any(word in message_lower for word in direct_lesson_keywords):
            self.logger.info("–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Ä–æ–∫–∞ ‚Üí closing")
            return 'closing'
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for state, keywords in self.STATE_KEYWORDS.items():
            if any(keyword in message_lower for keyword in keywords):
                self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {state}")
                return state
        
        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        if len(user_message.split()) < 5:
            return current_state
        
        # AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
        cache_key = self._get_cache_key_for_state(f"{user_message}{current_state}")
        cached_result = self._get_cached_state_result(cache_key)
        
        if cached_result:
            return cached_result
        
        history_context = ' '.join(conversation_history[-6:]) if conversation_history else '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞'
        
        ai_prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–¥–∞ –≤ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}
–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {history_context}
–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: "{user_message}"

–°–æ—Å—Ç–æ—è–Ω–∏—è:
greeting - –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —à–∫–æ–ª–µ
fact_finding - –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö/—Ü–µ–Ω–∞—Ö/—É—Å–ª–æ–≤–∏—è—Ö  
problem_solving - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Ä–µ–±–µ–Ω–∫–∞, –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏
closing - –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫/–∫—É—Ä—Å

–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ):"""

        try:
            from app import ai_service
            result = ai_service._call_ai_model(ai_prompt).strip().lower()
            
            valid_states = ['greeting', 'fact_finding', 'problem_solving', 'closing']
            if result in valid_states:
                self._cache_state_result(cache_key, result)
                self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ AI: {result}")
                return result
            else:
                self.logger.warning(f"AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {result}")
                return current_state
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return current_state
    
    def analyze_philosophical_loop(self, conversation_history: List[str]) -> Tuple[bool, int]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ" –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
        
        Returns:
            Tuple[bool, int]: (–Ω—É–∂–µ–Ω_–º–æ—Å—Ç–∏–∫_–∫_—à–∫–æ–ª–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö_–ø–æ–¥—Ä—è–¥)
        """
        if not conversation_history:
            return False, 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in conversation_history if msg.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")][-10:]
        
        philosophical_count = 0
        
        # –°—á–∏—Ç–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥—Ä—è–¥ —Å –∫–æ–Ω—Ü–∞
        for message in reversed(user_messages):
            message_text = message.replace("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "").strip()
            category = self.analyze_question_category(message_text, [])
            
            if category == 'philosophical':
                philosophical_count += 1
            else:
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
        
        needs_bridge = philosophical_count >= 3
        
        if needs_bridge:
            self.logger.info(f"–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏: {philosophical_count} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥")
        
        return needs_bridge, philosophical_count
    
    def should_use_humor_taboo(self, user_message: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–±–µ–≥–∞—Ç—å —é–º–æ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ.
        
        Returns:
            bool: True –µ—Å–ª–∏ —é–º–æ—Ä —Ç–∞–±—É
        """
        message_lower = user_message.lower()
        return any(taboo in message_lower for taboo in self.HUMOR_TABOO_KEYWORDS)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
intelligent_analyzer = IntelligentAnalyzer()
