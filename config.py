# config.py
"""
–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ Ukido AI Assistant.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
–µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import logging
from datetime import datetime
from dotenv import load_dotenv

class Config:
    """
    –ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    –ü—Ä–∏–Ω—Ü–∏–ø: –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å.
    """
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
        load_dotenv()
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # –í–ê–ñ–ù–û: –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –ø—Ä–æ–±–ª–µ–º—ã —Å Telegram –±–æ—Ç–æ–º!
        self.SERVER_START_TIME = datetime.now().timestamp()
        
        # === –û–°–ù–û–í–ù–´–ï API –ö–õ–Æ–ß–ò ===
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.TELEGRAM_BOT_TOKEN = self._get_required_env("TELEGRAM_BOT_TOKEN")
        self.GEMINI_API_KEY = self._get_required_env("GEMINI_API_KEY")
        self.OPENROUTER_API_KEY = self._get_required_env("OPENROUTER_API_KEY")
        self.PINECONE_API_KEY = self._get_required_env("PINECONE_API_KEY")
        self.PINECONE_HOST_FACTS = self._get_required_env("PINECONE_HOST_FACTS")
        self.HUBSPOT_API_KEY = self._get_required_env("HUBSPOT_API_KEY")
        
        # === –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
        self.REDIS_URL = os.getenv("REDIS_URL")  # –ú–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        self.BASE_URL = os.getenv('BASE_URL', 'https://ukidoaiassistant-production.up.railway.app')
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–†–í–ï–†–ê ===
        self.PORT = int(os.environ.get('PORT', 5000))
        self.DEBUG_MODE = os.environ.get('DEBUG', 'false').lower() == 'true'
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ú–Ø–¢–ò –ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
        self.CONVERSATION_MEMORY_SIZE = 15  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.CONVERSATION_EXPIRATION_SECONDS = 3600  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–∏–∞–ª–æ–≥–∞ (1 —á–∞—Å)
        self.RAG_CACHE_TTL = 3600  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ RAG (1 —á–∞—Å)
        self.MAX_CACHE_SIZE = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        self.MAX_FALLBACK_USERS = 1000  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ fallback –ø–∞–º—è—Ç–∏
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ò ===
        self.EMBEDDING_MODEL = 'models/text-embedding-004'  # Gemini –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._setup_logging()
    
    def _get_required_env(self, var_name: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        """
        value = os.getenv(var_name)
        if not value:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var_name}")
        return value
    
    def _setup_logging(self):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π.
        """
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.logger = logging.getLogger(__name__)
        self.logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        self.logger.info(f"üöÄ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if self.DEBUG_MODE else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        self.logger.info(f"üåê Base URL: {self.BASE_URL}")
    
    def validate_configuration(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–Ω—ã.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
            critical_keys = [
                self.TELEGRAM_BOT_TOKEN,
                self.GEMINI_API_KEY, 
                self.OPENROUTER_API_KEY,
                self.PINECONE_API_KEY,
                self.PINECONE_HOST_FACTS,
                self.HUBSPOT_API_KEY
            ]
            
            for key in critical_keys:
                if not key or len(key.strip()) < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è API –∫–ª—é—á–µ–π
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if self.PORT < 1 or self.PORT > 65535:
                return False
                
            if self.CONVERSATION_MEMORY_SIZE < 1:
                return False
            
            self.logger.info("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–Ω—ã")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def get_telegram_webhook_url(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è Telegram webhook.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.
        """
        return f"{self.BASE_URL}/"
    
    def get_lesson_url(self, user_id: str) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        return f"{self.BASE_URL}/lesson?user_id={user_id}"


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Singleton pattern" - –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–∞ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
config = Config()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if not config.validate_configuration():
    raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
