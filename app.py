# app.py (CRITICAL FIXES - Production Ready)
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ —Å user_id
2. –£–±—Ä–∞–Ω—ã —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ fast response
4. –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
"""

import logging
import time
import threading
import atexit
from concurrent.futures import ThreadPoolExecutor, as_completed
from flask import Flask, request
from typing import Dict, Any, Tuple, Optional
import requests
import weakref

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import config
from telegram_bot import telegram_bot
from conversation import conversation_manager
from rag_system import rag_system
from hubspot_client import hubspot_client
from intelligent_analyzer import intelligent_analyzer


class ProductionConnectionPool:
    """Production-ready HTTP Connection pooling —Å proper cleanup"""
    
    def __init__(self):
        self.session = requests.Session()
        self.logger = logging.getLogger(f"{__name__}.ConnectionPool")
        
        adapter = requests.adapters.HTTPAdapter(
            pool_connections=10,
            pool_maxsize=20,
            max_retries=3
        )
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)
        self.session.timeout = (5, 15)
        
        atexit.register(self.cleanup)
        self.logger.info("üîó Production connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def post(self, *args, **kwargs):
        return self.session.post(*args, **kwargs)
    
    def get(self, *args, **kwargs):
        return self.session.get(*args, **kwargs)
    
    def cleanup(self):
        try:
            self.session.close()
            self.logger.info("üîó Connection pool –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ connection pool: {e}")


class ProductionFastResponseCache:
    """
    üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: Fast response cache —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
    """
    
    def __init__(self):
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è '–ø—Ä–æ–±–Ω—ã–π'
        self.fast_responses = {
            '—Ü–µ–Ω–∞': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '–≤–æ–∑—Ä–∞—Å—Ç': "–£ –Ω–∞—Å –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤: 7-10 –ª–µ—Ç (–Æ–Ω—ã–π –æ—Ä–∞—Ç–æ—Ä), 9-12 –ª–µ—Ç (–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞—Å), 11-14 –ª–µ—Ç (–ö–∞–ø–∏—Ç–∞–Ω –ø—Ä–æ–µ–∫—Ç–æ–≤).",
            '–æ–Ω–ª–∞–π–Ω': "–î–∞, –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∂–∏–≤—ã–º –æ–±—â–µ–Ω–∏–µ–º.",
            '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': "–ó–∞–Ω—è—Ç–∏—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω—É—Ç. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—Å.",
            # –£–î–ê–õ–ï–ù–û: '–ø—Ä–æ–±–Ω—ã–π' - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ AI –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
        }
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ AI
        self.ai_required_patterns = [
            '–ø—Ä–æ–±–Ω', '–∑–∞–ø–∏—Å–∞', '—É—Ä–æ–∫', '–±–µ—Å–ø–ª–∞—Ç–Ω', '–ø–æ–ø—Ä–æ–±–æ–≤–∞', '—Ç–µ—Å—Ç'
        ]
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        self.used_metaphors = {}
        
        self.usage_stats = {}
        self.stats_lock = threading.Lock()
        self.max_stats_entries = 1000
        
        for key in self.fast_responses:
            self.usage_stats[key] = 0
            
        self.logger = logging.getLogger(f"{__name__}.FastCache")
    
    def get_fast_response(self, user_message: str, chat_id: str = None) -> Optional[str]:
        """
        üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∫ AI –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
        """
        message_lower = user_message.lower()
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
        for ai_pattern in self.ai_required_patterns:
            if ai_pattern in message_lower:
                self.logger.info(f"üéØ –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å—Å—ã–ª–∫–∏ —Å user_id: {ai_pattern}")
                return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ AI
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ fast response –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        for keyword, response in self.fast_responses.items():
            if keyword in message_lower and len(user_message.split()) <= 3:
                with self.stats_lock:
                    self.usage_stats[keyword] += 1
                    self._cleanup_stats_if_needed()
                return response
        
        return None
    
    def track_metaphor_usage(self, chat_id: str, response: str):
        """–î–û–ë–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä"""
        if chat_id not in self.used_metaphors:
            self.used_metaphors[chat_id] = set()
        
        metaphor_patterns = [
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–º–µ–Ω—é', '—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π –Ω–æ–∂', '–≥–æ—Ä—è—á–∏–µ –ø–∏—Ä–æ–∂–∫–∏',
            '—à–≤–µ–¥—Å–∫–∏–π —Å—Ç–æ–ª', '–∫—É–ª–∏–Ω–∞—Ä–Ω', '–ø–æ–≤–∞—Ä', '–±–ª—é–¥–æ'
        ]
        
        response_lower = response.lower()
        for pattern in metaphor_patterns:
            if pattern in response_lower:
                self.used_metaphors[chat_id].add(pattern)
    
    def get_metaphor_restriction(self, chat_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        used = self.used_metaphors.get(chat_id, set())
        if used:
            return f"\n‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã: {', '.join(used)}"
        return ""
    
    def _cleanup_stats_if_needed(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if len(self.usage_stats) > self.max_stats_entries:
            old_stats = {}
            for key in self.fast_responses.keys():
                old_stats[key] = self.usage_stats.get(key, 0)
            self.usage_stats = old_stats
            self.logger.info("üßπ Stats cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω")


class OptimizedPromptBuilder:
    """
    üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–º–ø—Ç—ã –±–µ–∑ "–û—Ç–≤–µ—Ç:", "–Ω—É", —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    
    @staticmethod
    def build_combined_analysis_prompt(user_message: str, current_state: str, 
                                     conversation_history: list, facts_context: str, 
                                     chat_id: str = "", metaphor_restrictions: str = "") -> str:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –≤—Å–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        """
        
        short_history = '\n'.join(conversation_history[-4:]) if conversation_history else "–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"
        short_facts = facts_context[:1000] + "..." if len(facts_context) > 1000 else facts_context
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
        message_lower = user_message.lower()
        detailed_keywords = ['—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–¥–µ—Ç–∞–ª—å–Ω–æ', '–≤—Å–µ –∫—É—Ä—Å—ã', '—Ü–µ–Ω—ã –∏ —É—Å–ª–æ–≤–∏—è']
        specific_keywords = ['—Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–≤–æ–∑—Ä–∞—Å—Ç']
        
        if any(keyword in message_lower for keyword in detailed_keywords):
            response_style = "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π"
        elif any(keyword in message_lower for keyword in specific_keywords):
            response_style = "–∫—Ä–∞—Ç–∫–∏–π"
        else:
            response_style = "—Å—Ä–µ–¥–Ω–∏–π"
        
        return f"""–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã Ukido.

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ù–ï –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç—ã —Å–ª–æ–≤–∞–º–∏ "–û—Ç–≤–µ—Ç:", "–ù—É", –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–º–∏ –≤–≤–æ–¥–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
2. –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–∫–µ–Ω: [ACTION:SEND_LESSON_LINK]
3. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∞–±–∑–∞—Ü—ã, —Å–ø–∏—Å–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—É
4. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: {response_style}
{metaphor_restrictions}

–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–°–ê–•:
‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–£–†–°–´:
‚Ä¢ "–Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä" (7-10 –ª–µ—Ç) - 6000 –≥—Ä–Ω/–º–µ—Å—è—Ü
‚Ä¢ "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å" (9-12 –ª–µ—Ç) - 7000 –≥—Ä–Ω/–º–µ—Å—è—Ü  
‚Ä¢ "–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤" (11-14 –ª–µ—Ç) - 8000 –≥—Ä–Ω/–º–µ—Å—è—Ü

‚ùå –ù–ï –°–£–©–ï–°–¢–í–£–Æ–¢:
‚Ä¢ "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
‚Ä¢ "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏"
‚Ä¢ "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö"
‚Ä¢ "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"

FORMAT:
‚Ä¢ –¢–û–õ–¨–ö–û –æ–Ω–ª–∞–π–Ω
‚Ä¢ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω—É—Ç
‚Ä¢ –í—Ä–µ–º—è: 17:00 –∏–ª–∏ 19:00
‚Ä¢ –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
{short_facts}

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –û—Å—Ç—Ä–æ—É–º–Ω—ã–π, –∫–∞–∫ –ñ–≤–∞–Ω–µ—Ü–∫–∏–π
- –ë–ï–ó –Ω–∞–≤—è–∑—á–∏–≤—ã—Ö –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤ ("–Ω—É", "–æ—Ç–≤–µ—Ç")  
- –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –ß–µ—Ç–∫–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
{short_history}

–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï: {current_state}

–í–û–ü–†–û–°: "{user_message}"

–ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó + –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢:

–ê–ù–ê–õ–ò–ó (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: factual/philosophical/problem_solving/sensitive | –°–æ—Å—Ç–æ—è–Ω–∏–µ: greeting/fact_finding/problem_solving/closing | –°—Ç–∏–ª—å: {response_style}

–û–°–ù–û–í–ù–û–ô –û–¢–í–ï–¢:
[–¢–≤–æ–π —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ë–ï–ó –ª–∏—à–Ω–∏—Ö –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤, —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º]"""


class ProductionAIService:
    """Production-ready –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è AI —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.connection_pool = ProductionConnectionPool()
        self.fast_response_cache = ProductionFastResponseCache()
        self.prompt_builder = OptimizedPromptBuilder()
        
        self.executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="UkidoAI")
        
        # Thread-safe —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'total_requests': 0,
            'fast_responses': 0,
            'parallel_processed': 0,
            'avg_response_time': 0,
            'total_time_saved': 0
        }
        self.stats_lock = threading.Lock()
        
        atexit.register(self.cleanup)
        self._init_ai_model()
        self._setup_module_connections()
        
        self.logger.info("üöÄ Production-ready AI Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def cleanup(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.executor.shutdown(wait=True, timeout=30)
            self.connection_pool.cleanup()
            self.logger.info("üßπ AI Service cleanup –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            self.logger.error(f"AI Service cleanup error: {e}")
    
    def _init_ai_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏"""
        try:
            import google.generativeai as genai
            genai.configure(api_key=config.GEMINI_API_KEY)
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            self.ai_model_available = True
            self.logger.info("‚úÖ Gemini AI –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥–µ–ª–∏: {e}")
            self.ai_model_available = False
    
    def _setup_module_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        try:
            telegram_bot.set_message_handler(self.handle_message)
            self.logger.info("‚úÖ Module connections —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ connections: {e}")
    
    def handle_message(self, chat_id: str, user_message: str) -> str:
        """
        üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        start_time = time.time()
        
        try:
            with self.stats_lock:
                self.performance_stats['total_requests'] += 1
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º fast response —Å –ø–µ—Ä–µ–¥–∞—á–µ–π chat_id
            fast_response = self.fast_response_cache.get_fast_response(user_message, chat_id)
            if fast_response:
                with self.stats_lock:
                    self.performance_stats['fast_responses'] += 1
                self.logger.info(f"‚ö° Fast response –¥–ª—è {chat_id}")
                return fast_response
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = conversation_manager.get_user_state(chat_id)
            
            # Parallel processing –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            def get_rag_context():
                return rag_system.get_relevant_context(user_message)
            
            def get_conversation_history():
                return conversation_manager.get_conversation_history(chat_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            with self.executor as executor:
                rag_future = executor.submit(get_rag_context)
                history_future = executor.submit(get_conversation_history)
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                facts_context = rag_future.result(timeout=5)
                conversation_history = history_future.result(timeout=3)
            
            parallel_time = time.time() - start_time
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–µ—Ç–∞—Ñ–æ—Ä—ã
            metaphor_restrictions = self.fast_response_cache.get_metaphor_restriction(chat_id)
            
            # Single LLM call –≤–º–µ—Å—Ç–æ —Ç—Ä–µ—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
            llm_start = time.time()
            combined_prompt = self.prompt_builder.build_combined_analysis_prompt(
                user_message, current_state, conversation_history, facts_context, 
                chat_id, metaphor_restrictions
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            combined_response = self._call_ai_model(combined_prompt)
            llm_time = time.time() - llm_start
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            main_response, analysis_data = self._parse_combined_response(combined_response)
            
            # üö® –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            final_response = self._process_action_tokens(main_response, chat_id, current_state)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã
            self.fast_response_cache.track_metaphor_usage(chat_id, final_response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            conversation_manager.update_conversation_history(chat_id, user_message, final_response)
            conversation_manager.update_user_state(chat_id, analysis_data.get('state', current_state))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_time = time.time() - start_time
            self._update_performance_stats(total_time, parallel_time, llm_time)
            
            self.logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {chat_id} –∑–∞ {total_time:.3f}s")
            return final_response
            
        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def _call_ai_model(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ AI –º–æ–¥–µ–ª–∏ —Å proper error handling"""
        try:
            if not self.ai_model_available:
                return "AI –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            response = self.model.generate_content(prompt)
            return response.text if response.text else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
            
        except Exception as e:
            self.logger.error(f"AI model error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def _parse_combined_response(self, combined_response: str) -> Tuple[str, Dict[str, str]]:
        """
        üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ "–û—Ç–≤–µ—Ç:"
        """
        try:
            lines = combined_response.split('\n')
            analysis_line = ""
            response_lines = []
            
            for line in lines:
                if line.strip().startswith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:'):
                    analysis_line = line.strip()
                elif line.strip().startswith('–û—Ç–≤–µ—Ç:'):
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–û—Ç–≤–µ—Ç:"
                    continue
                else:
                    response_lines.append(line)
            
            # –ü–∞—Ä—Å–∏–º –∞–Ω–∞–ª–∏–∑
            analysis_data = {}
            if analysis_line:
                try:
                    parts = analysis_line.split('|')
                    for part in parts:
                        if '–ö–∞—Ç–µ–≥–æ—Ä–∏—è:' in part:
                            analysis_data['category'] = part.split(':')[1].strip()
                        elif '–°–æ—Å—Ç–æ—è–Ω–∏–µ:' in part:
                            analysis_data['state'] = part.split(':')[1].strip()
                        elif '–°—Ç–∏–ª—å:' in part:
                            analysis_data['style'] = part.split(':')[1].strip()
                except:
                    pass
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
            main_response = '\n'.join([line for line in response_lines if line.strip()])
            
            return main_response, analysis_data
            
        except Exception as e:
            self.logger.error(f"Parse error: {e}")
            return combined_response, {}
    
    def _process_action_tokens(self, response: str, chat_id: str, current_state: str) -> str:
        """
        üö® –ö–†–ò–¢–ò–ß–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å user_id –∏ –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        if "[ACTION:SEND_LESSON_LINK]" in response:
            lesson_url = config.get_lesson_url(chat_id)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            formatted_link = f"\n\nüéì **–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!**\nüìù –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: {lesson_url}\n"
            
            response = response.replace("[ACTION:SEND_LESSON_LINK]", formatted_link)
            self.logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å user_id: {chat_id}")
        
        return response
    
    def _update_performance_stats(self, total_time: float, parallel_time: float, llm_time: float):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.stats_lock:
            estimated_sequential_time = 9.65
            time_saved = max(0, estimated_sequential_time - total_time)
            self.performance_stats['total_time_saved'] += time_saved
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            current_avg = self.performance_stats['avg_response_time']
            total_requests = self.performance_stats['total_requests']
            new_avg = (current_avg * (total_requests - 1) + total_time) / total_requests
            self.performance_stats['avg_response_time'] = new_avg
    
    def get_system_status(self) -> Dict[str, Any]:
        """Thread-safe –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        base_status = {
            "config_valid": config.validate_configuration(),
            "telegram_bot_ready": telegram_bot is not None,
            "conversation_manager_ready": conversation_manager is not None,
            "rag_system_stats": rag_system.get_stats(),
            "ai_model_available": self.ai_model_available
        }
        
        with self.stats_lock:
            performance_metrics = self.performance_stats.copy()
        
        if performance_metrics['total_requests'] > 0:
            performance_metrics['fast_response_rate'] = round(
                (performance_metrics['fast_responses'] / performance_metrics['total_requests']) * 100, 1
            )
            performance_metrics['avg_speedup'] = round(
                9.65 / max(performance_metrics['avg_response_time'], 0.1), 2
            )
        
        base_status['performance_metrics'] = performance_metrics
        return base_status


# –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
app = Flask(__name__)
ai_service = ProductionAIService()


# === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

@app.route('/', methods=['POST'])
def telegram_webhook():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    return telegram_bot.handle_webhook()

@app.route('/lesson')
def lesson_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Ä–æ–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    return telegram_bot.show_lesson_page()

@app.route('/submit-lesson-form', methods=['POST'])
def submit_lesson_form():
    """Production-ready –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å proper error handling"""
    try:
        form_data = request.get_json()
        if not form_data:
            return {"success": False, "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}, 400
        
        # Safe –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ HubSpot
        def safe_hubspot_submission():
            try:
                hubspot_client.create_contact(form_data)
                logging.getLogger(__name__).info(f"HubSpot contact created for: {form_data.get('firstName', 'Unknown')}")
            except Exception as e:
                logging.getLogger(__name__).error(f"HubSpot submission error: {e}")
        
        threading.Thread(target=safe_hubspot_submission, daemon=True).start()
        
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"}, 200
        
    except Exception as e:
        logging.getLogger(__name__).error(f"Form error: {e}")
        return {"success": False, "error": str(e)}, 500

@app.route('/hubspot-webhook', methods=['POST'])
def hubspot_webhook():
    """Production-ready HubSpot webhook —Å proper error handling"""
    try:
        webhook_data = request.get_json()
        message_type = request.args.get('message_type', 'first_follow_up')
        
        def safe_webhook_processing():
            try:
                hubspot_client.process_webhook(webhook_data, message_type)
                logging.getLogger(__name__).info(f"HubSpot webhook processed: {message_type}")
            except Exception as e:
                logging.getLogger(__name__).error(f"HubSpot webhook processing error: {e}")
        
        threading.Thread(target=safe_webhook_processing, daemon=True).start()
        
        return "OK", 200
        
    except Exception as e:
        logging.getLogger(__name__).error(f"HubSpot webhook error: {e}")
        return "Error", 500

@app.route('/health')
def health_check():
    """Health check —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return ai_service.get_system_status()

@app.route('/metrics')
def metrics():
    """Detailed performance metrics"""
    return {
        "system_status": ai_service.get_system_status(),
        "rag_stats": rag_system.get_stats(),
        "performance_summary": {
            "optimization_level": "HIGH",
            "parallel_processing": "ENABLED", 
            "connection_pooling": "ENABLED",
            "fast_responses": "ENABLED",
            "estimated_speedup": "4x+"
        }
    }

@app.route('/clear-memory', methods=['POST'])
def clear_memory():
    """Production-ready –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Å proper error handling"""
    try:
        def safe_memory_clear():
            try:
                conversation_manager._clear_all_memory()
                logging.getLogger(__name__).info("Memory cleared successfully")
            except Exception as e:
                logging.getLogger(__name__).error(f"Memory clear error: {e}")
        
        threading.Thread(target=safe_memory_clear, daemon=True).start()
        return {"success": True, "message": "–û—á–∏—Å—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞"}, 200
    except Exception as e:
        return {"success": False, "error": str(e)}, 500


# === –¢–û–ß–ö–ê –í–•–û–î–ê ===

if __name__ == '__main__':
    logger = logging.getLogger(__name__)
    
    logger.info("=" * 60)
    logger.info("üö® PRODUCTION-READY UKIDO AI ASSISTANT - CRITICAL FIXES APPLIED")
    logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å user_id –¥–ª—è HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    logger.info("‚úÖ –£–±—Ä–∞–Ω—ã —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–Ω—É, –æ—Ç–≤–µ—Ç)")
    logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤")
    logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ fast response –¥–ª—è –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
    logger.info("=" * 60)
    
    try:
        status = ai_service.get_system_status()
        logger.info(f"üìä Production system status: {status.get('config_valid', False)}")
    except Exception as e:
        logger.error(f"Status check error: {e}")
    
    app.run(
        debug=config.DEBUG_MODE,
        port=config.PORT,
        host='0.0.0.0',
        threaded=True,
        use_reloader=False
    )