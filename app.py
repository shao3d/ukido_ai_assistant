# app.py
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –£–ë–†–ê–ù–û –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ ZhvanetskyHumorLevelSystem –∏ ProductionFastResponseCache
2. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ —Å user_id
3. –£–±—Ä–∞–Ω—ã —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ fast response
5. –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
6. –î–û–ë–ê–í–õ–ï–ù–û: Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ RAG pipeline
"""

import logging
import time
import threading
import atexit
from concurrent.futures import ThreadPoolExecutor, as_completed
from flask import Flask, request
from typing import Dict, Any, Tuple, Optional
import requests
import weakref

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import config
from telegram_bot import telegram_bot
from conversation import conversation_manager
from rag_system import rag_system
from hubspot_client import hubspot_client
from intelligent_analyzer import intelligent_analyzer

# --- –ù–û–í–´–ô –ë–õ–û–ö: –ò–ú–ü–û–†–¢ –ò –ù–ê–°–¢–†–û–ô–ö–ê LLAMAINDEX ---
from llamaindex_rag import llama_index_rag # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
USE_LLAMAINDEX = True # üö© –ì–õ–ê–í–ù–´–ô –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

# --- –ë–õ–û–ö: –ò–ú–ü–û–†–¢ DEBUG –õ–û–ì–ì–ï–†–ê ---
try:
    from rag_debug_logger import rag_debug
    DEBUG_LOGGING_ENABLED = True
except ImportError:
    DEBUG_LOGGING_ENABLED = False
    print("Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - rag_debug_logger –Ω–µ –Ω–∞–π–¥–µ–Ω")
# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---


class ProductionConnectionPool:
    """Production-ready HTTP Connection pooling —Å proper cleanup"""
    
    def __init__(self):
        self.session = requests.Session()
        self.logger = logging.getLogger(f"{__name__}.ConnectionPool")
        
        adapter = requests.adapters.HTTPAdapter(
            pool_connections=10,
            pool_maxsize=20,
            max_retries=3
        )
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)
        self.session.timeout = (5, 15)
        
        atexit.register(self.cleanup)
        self.logger.info("üîó Production connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def post(self, *args, **kwargs):
        return self.session.post(*args, **kwargs)
    
    def get(self, *args, **kwargs):
        return self.session.get(*args, **kwargs)
    
    def cleanup(self):
        try:
            self.session.close()
            self.logger.info("üîó Connection pool –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ connection pool: {e}")


class ProductionFastResponseCache:
    """
    üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: Fast response cache —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
    """
    def __init__(self):
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è '–ø—Ä–æ–±–Ω—ã–π'
        self.fast_responses = {
            '—Ü–µ–Ω–∞': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '–¥–æ—Ä–æ–≥–æ': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '–¥—ë—à–µ–≤–æ': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '–ø—Ä–∏–≤–µ—Ç': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É Ukido! üëã –ú—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º soft skills —É –¥–µ—Ç–µ–π. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ukido - –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É —Ä–∞–∑–≤–∏—Ç–∏—è soft skills –¥–ª—è –¥–µ—Ç–µ–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            '–∫—É—Ä—Å—ã': "–£ –Ω–∞—Å –µ—Å—Ç—å –∫—É—Ä—Å—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, –ª–∏–¥–µ—Ä—Å—Ç–≤–∞, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–π —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.",
            '–≤–æ–∑—Ä–∞—Å—Ç': "–ù–∞—à–∏ –∫—É—Ä—Å—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 7 –¥–æ 17 –ª–µ—Ç. –ü—Ä–æ–≥—Ä–∞–º–º—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã.",
        }
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.metaphor_usage = {}
        self.metaphor_lock = threading.Lock()
        
        self.logger = logging.getLogger(f"{__name__}.FastCache")
        self.logger.info("‚ö° Fast response cache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_fast_response(self, message: str, chat_id: str = "") -> Optional[str]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        message_lower = message.lower().strip()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if message_lower in self.fast_responses:
            self.logger.info(f"‚ö° Fast response (exact): '{message_lower}'")
            return self.fast_responses[message_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        for key, response in self.fast_responses.items():
            if key in message_lower and len(message_lower) < 50:  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.logger.info(f"‚ö° Fast response (contains): '{key}' in '{message_lower}'")
                return response
        
        return None
    
    def track_metaphor_usage(self, chat_id: str, response_text: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä"""
        # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        metaphor_keywords = ['–∫–∞–∫', '—Å–ª–æ–≤–Ω–æ', '—Ç–æ—á–Ω–æ', '–±—É–¥—Ç–æ', '–ø–æ—Ö–æ–∂–µ']
        
        with self.metaphor_lock:
            if chat_id not in self.metaphor_usage:
                self.metaphor_usage[chat_id] = []
            
            for keyword in metaphor_keywords:
                if keyword in response_text.lower():
                    self.metaphor_usage[chat_id].append(keyword)
                    break
    
    def get_metaphor_restriction(self, chat_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –º–µ—Ç–∞—Ñ–æ—Ä—ã"""
        with self.metaphor_lock:
            used_metaphors = self.metaphor_usage.get(chat_id, [])
            if len(used_metaphors) > 3:
                return "–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–µ—Ç–∞—Ñ–æ—Ä, —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ª–æ–≥–µ."
            return ""


class ZhvanetskyHumorLevelSystem:
    """
    üé≠ –°–∏—Å—Ç–µ–º–∞ –≥—Ä–∞–¥—É–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —é–º–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ –ú–∏—Ö–∞–∏–ª–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
    """
    
    def __init__(self):
        self.humor_levels = {
            'no_humor': {
                'intensity': '–ë–ï–ó –Æ–ú–û–†–ê',
                'style': '–°—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ç–æ–Ω',
                'examples': ['–ü—Ä—è–º—ã–µ –æ—Ç–≤–µ—Ç—ã', '–§–∞–∫—Ç—ã –±–µ–∑ —É–∫—Ä–∞—à–µ–Ω–∏–π', '–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å']
            },
            'gentle': {
                'intensity': '–õ–ï–ì–ö–ò–ô –Æ–ú–û–†',
                'style': '–¢–µ–ø–ª—ã–µ –∂–∏—Ç–µ–π—Å–∫–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –±–µ–∑ –∏—Ä–æ–Ω–∏–∏',
                'examples': ['–ö–∞–∫ –≤ —Ö–æ—Ä–æ—à–µ–π —Å–µ–º—å–µ', '–ü–æ–Ω—è—Ç–Ω–æ –∫–∞–∫ –¥–≤–∞–∂–¥—ã –¥–≤–∞', '–ü–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏']
            },
            'moderate': {
                'intensity': '–ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô –ñ–í–ê–ù–ï–¶–ö–ò–ô',
                'style': '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π —é–º–æ—Ä —Å –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π',
                'examples': ['–ê –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ...', '–í–æ—Ç —Ç–∞–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–ò —Ç—É—Ç –ø–æ–Ω–∏–º–∞–µ—à—å']
            },
            'sophisticated': {
                'intensity': '–ì–õ–£–ë–û–ö–ò–ô –ñ–í–ê–ù–ï–¶–ö–ò–ô', 
                'style': '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ',
                'examples': ['–ñ–∏–∑–Ω—å –∫–∞–∫ —Ç–µ–∞—Ç—Ä', '–î–µ—Ç–∏ –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ –æ–±—â–µ—Å—Ç–≤–∞', '–í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ - –∏—Å–∫—É—Å—Å—Ç–≤–æ']
            }
        }
        
        self.logger = logging.getLogger(f"{__name__}.HumorSystem")
    
    def get_humor_level(self, category: str, rag_score: float) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —é–º–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ RAG
        """
        if category == 'sensitive':
            return 'no_humor'
        elif category == 'factual' and rag_score > 0.7:
            return 'gentle'
        elif category == 'factual' and rag_score > 0.4:
            return 'moderate'
        elif category == 'philosophical':
            return 'sophisticated'
        elif category == 'problem_solving':
            return 'moderate'
        else:
            return 'gentle'
    
    def build_humor_instructions(self, humor_level: str, metaphor_restrictions: str = "") -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Å—Ç–∏–ª—é"""
        level_info = self.humor_levels.get(humor_level, self.humor_levels['gentle'])
        
        if humor_level == 'gentle':
            return f"""
üé≠ –°–¢–ò–õ–¨: –õ–µ–≥–∫–∏–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—â–∏–π —Ç–æ–Ω
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏
‚Ä¢ –ë–ï–ó —Å–∞—Ä–∫–∞–∑–º–∞, –∏—Ä–æ–Ω–∏–∏ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ –¢–µ–ø–ª—ã–π, —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—â–∏–π —Ç–æ–Ω
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
{metaphor_restrictions}
"""
        elif humor_level == 'moderate':
            return f"""
üé≠ –°–¢–ò–õ–¨: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π –ñ–≤–∞–Ω–µ—Ü–∫–∏–π  
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ñ–∏—Ç–µ–π—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã —Å –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π
‚Ä¢ –ü–æ–¥–º–µ—á–∞–µ—Ç –∑–∞–±–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ–±—ã—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
‚Ä¢ –ú—É–¥—Ä—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –±–µ–∑ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
{metaphor_restrictions}
"""
        elif humor_level == 'sophisticated':
            return f"""
üé≠ –°–¢–ò–õ–¨: –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≥–ª—É–±–æ–∫–∏–π –ñ–≤–∞–Ω–µ—Ü–∫–∏–π
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ú–µ—Ç–∞—Ñ–æ—Ä—ã —Å –≥–ª—É–±–æ–∫–∏–º —Å–º—ã—Å–ª–æ–º –æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ
‚Ä¢ –¢–æ–Ω–∫–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏ –∏ –∂–∏–∑–Ω–∏
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —é–º–æ—Ä–∞
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
{metaphor_restrictions}
"""
        else:  # no_humor
            return f"""
üé≠ –°–¢–ò–õ–¨: –°–µ—Ä—å–µ–∑–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–Ω
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ë–ï–ó —é–º–æ—Ä–∞, –º–µ—Ç–∞—Ñ–æ—Ä –∏ —à—É—Ç–æ–∫
‚Ä¢ –ü—Ä—è–º—ã–µ, —á–µ—Ç–∫–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
"""


class OptimizedPromptBuilder:
    """
    üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–º–ø—Ç—ã –±–µ–∑ "–û—Ç–≤–µ—Ç:", "–Ω—É", —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    üé≠ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –≥—Ä–∞–¥—É—Å–æ–≤ —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
    """
    
    @staticmethod
    def build_combined_analysis_prompt_RAG_TEST(user_message: str, 
                                               facts_context: str,
                                               rag_score: float,
                                               conversation_history: list = None) -> str:
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if conversation_history and len(conversation_history) > 0:
            recent_history = conversation_history[-6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
            history_text = "\n".join(recent_history)
            greeting_instruction = "üìù –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã."
        else:
            history_text = "–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"
            greeting_instruction = "üìù –ù–ê–ß–ê–õ–û –î–ò–ê–õ–û–ì–ê: –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å –≤–µ–∂–ª–∏–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ('–î–æ–±—Ä—ã–π –¥–µ–Ω—å!')."
        
        return f"""–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã Ukido –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è soft skills —É –¥–µ—Ç–µ–π.

üìö –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô (RAG Score: {rag_score:.2f}):
{facts_context}

üí¨ –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
{history_text}

‚ùì –¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–°: {user_message}

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ï–°–¢–¨ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø—Ä–∏–≤–µ–¥–∏ –µ–≥–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ù–ï–¢ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –º–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
3. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
4. –£–ß–ò–¢–´–í–ê–ô –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π —É–∂–µ —Å–∫–∞–∑–∞–Ω–Ω–æ–µ
5. {greeting_instruction}
6. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É

–û—Ç–≤–µ—Ç:"""

    @staticmethod
    def build_combined_analysis_prompt(user_message: str, current_state: str, 
                                     conversation_history: list, facts_context: str, 
                                     chat_id: str = "", metaphor_restrictions: str = "",
                                     category: str = "factual", rag_score: float = 0.5) -> str:
        """
        üé≠ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –° —É–º–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —é–º–æ—Ä–∞
        humor_system = ZhvanetskyHumorLevelSystem()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + RAG score
        humor_level = humor_system.get_humor_level(category, rag_score)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
        humor_instructions = humor_system.build_humor_instructions(humor_level, metaphor_restrictions)
        

        short_history = '\n'.join(conversation_history[-4:]) if conversation_history else "–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"
        # –ù–û–í–´–ô –ë–õ–û–ö: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if not conversation_history or len(conversation_history) == 0:
            greeting_instruction = "üìù –ù–ê–ß–ê–õ–û –î–ò–ê–õ–û–ì–ê: –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å –≤–µ–∂–ª–∏–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ('–î–æ–±—Ä—ã–π –¥–µ–Ω—å!', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!')."
        else:
            greeting_instruction = "üìù –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ('–î–æ–±—Ä—ã–π –¥–µ–Ω—å', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ'). –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ—Ç–≤–µ—Ç—É –ø–æ —Å—É—Ç–∏."
        # –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê
        short_facts = facts_context[:800] + "..." if len(facts_context) > 800 else facts_context
        
        # üéØ –£–ú–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ù–ê –û–°–ù–û–í–ï –ö–ê–¢–ï–ì–û–†–ò–ò + RAG SCORE
        strategy_instructions = OptimizedPromptBuilder._get_strategy_instructions(
            category, rag_score, user_message, short_facts
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
        message_lower = user_message.lower()
        detailed_keywords = ['—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–¥–µ—Ç–∞–ª—å–Ω–æ', '–≤—Å–µ –∫—É—Ä—Å—ã', '—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å']
        lesson_request_keywords = ['–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–ø—Ä–æ–±–Ω—ã–π', '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '—Ö–æ—á—É —É—Ä–æ–∫', '—Ç–µ—Å—Ç–æ–≤–æ']
        simple_keywords = ['—Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–≤–æ–∑—Ä–∞—Å—Ç', '–≤—Ä–µ–º—è']
        
        if any(keyword in message_lower for keyword in detailed_keywords):
            response_type = "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
        elif any(keyword in message_lower for keyword in lesson_request_keywords):
            response_type = "—Å_—Å—Å—ã–ª–∫–æ–π"
        elif any(keyword in message_lower for keyword in simple_keywords):
            response_type = "–∫—Ä–∞—Ç–∫–∏–π"
        else:
            response_type = "—Å—Ä–µ–¥–Ω–∏–π"
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        return f"""–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã Ukido –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è soft-skills —É –¥–µ—Ç–µ–π.

{greeting_instruction}

{humor_instructions}

{strategy_instructions}

üí° –û–ü–†–ï–î–ï–õ–ï–ù–û –°–ò–°–¢–ï–ú–û–ô:
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
‚Ä¢ RAG Score: {rag_score:.2f}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞: {humor_level}  
‚Ä¢ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_type}

üìö –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–°–ê–•:
‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–£–†–°–´ (—Ç–æ–ª—å–∫–æ —ç—Ç–∏ 3!):
1. "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" (7-9 –ª–µ—Ç, 10-12 –ª–µ—Ç, 13-17 –ª–µ—Ç)  
2. "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞" (10-12 –ª–µ—Ç, 13-17 –ª–µ—Ç)
3. "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" (7-9 –ª–µ—Ç, 10-12 –ª–µ—Ç, 13-17 –ª–µ—Ç)

üí∞ –¶–ï–ù–´: 6000-8000 –≥—Ä–Ω/–º–µ—Å—è—Ü (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞)
üéÅ –ë–û–ù–£–°: –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ë–ï–°–ü–õ–ê–¢–ù–´–ô
‚è∞ –†–ê–°–ü–ò–°–ê–ù–ò–ï: –ì–∏–±–∫–æ–µ, –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥ —Ä–µ–±–µ–Ω–∫–∞
üë®‚Äçüè´ –§–û–†–ú–ê–¢: –û–Ω–ª–∞–π–Ω —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º

üìä –ö–û–ù–ö–†–ï–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{short_facts}

üí¨ –ö–û–ù–¢–ï–ö–°–¢ –ë–ï–°–ï–î–´:
{short_history}

‚ùì –í–û–ü–†–û–° –†–û–î–ò–¢–ï–õ–Ø: {user_message}

üí≠ –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–û—Ç–≤–µ—Ç—å {response_type}–Ω–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""

    @staticmethod
    def _get_strategy_instructions(category: str, rag_score: float, user_message: str, facts_context: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Ç–≤–µ—Ç–∞"""
        
        if category == 'factual' and rag_score > 0.7:
            return """
‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø: –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –∏—Å–ø–æ–ª—å–∑—É–π –µ–µ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
‚Ä¢ –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å —Ü–∏—Ñ—Ä–∞–º–∏, –≤–æ–∑—Ä–∞—Å—Ç–∞–º–∏, —Ü–µ–Ω–∞–º–∏
‚Ä¢ –î–æ–±–∞–≤—å –∑–∞–¥–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞ –¥–ª—è —Ç–µ–ø–ª–æ—Ç—ã
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é)"""
        elif category == 'factual' and rag_score > 0.3:
            return """
‚ö†Ô∏è –°–¢–†–ê–¢–ï–ì–ò–Ø: –û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π
‚Ä¢ –î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
        elif category == 'factual' and rag_score <= 0.3:
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –ß–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –ß–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
‚Ä¢ –ù–∞–ø—Ä–∞–≤—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, –∑–≤–æ–Ω–æ–∫)"""
        elif category == 'philosophical':
            return """
ü§î –°–¢–†–ê–¢–ï–ì–ò–Ø: –ú—É–¥—Ä—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏
‚Ä¢ –ü–æ–∫–∞–∂–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Ç–µ–º—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ –¥–µ—Ç—Å–∫–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏
‚Ä¢ –°–≤—è–∑—ã–≤–∞–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–∏—Ç–∏—è soft skills
‚Ä¢ –ú—è–≥–∫–æ –ø–µ—Ä–µ–≤–µ–¥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ —Ç–µ–º–µ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π –∏ —à–∫–æ–ª—ã
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å soft skills –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ"""
        elif category == 'sensitive':
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–∑–Ω–∞–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –∏ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ—Å—Ç—å —Ç–µ–º—ã
‚Ä¢ –¢–∞–∫—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–µ—Ç—Å–∫–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚Ä¢ –ë–ï–ó –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–≤–µ—Ç–æ–≤"""
        elif category == 'off_topic':
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ
‚Ä¢ –ú—è–≥–∫–æ –ø–µ—Ä–µ–≤–µ–¥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ —Ç–µ–º–µ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω–∏, –∫–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –Ω–∞–≤—ã–∫–∞–º–∏
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —É–∑–Ω–∞—Ç—å –æ –∫—É—Ä—Å–∞—Ö —à–∫–æ–ª—ã"""
        else:
            return """
‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø: –£–≤–µ—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤—É –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –û—Ç–≤–µ—á–∞–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ —é–º–æ—Ä–∞
‚Ä¢ –ë—É–¥—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º"""


class ProductionAIService:
    """Production-ready –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è AI —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.connection_pool = ProductionConnectionPool()
        self.fast_response_cache = ProductionFastResponseCache()
        self.prompt_builder = OptimizedPromptBuilder()
        
        self.executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="UkidoAI")
        
        # Thread-safe —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'total_requests': 0,
            'fast_responses': 0,
            'parallel_processed': 0,
            'avg_response_time': 0,
            'total_time_saved': 0
        }
        
        self.stats_lock = threading.Lock()
        
        # AI –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.ai_model_available = self._initialize_ai_model()
        
        self.logger.info("üöÄ ProductionAIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _initialize_ai_model(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏"""
        try:
            import google.generativeai as genai
            genai.configure(api_key=config.GEMINI_API_KEY)
            self.model = genai.GenerativeModel(
                model_name='gemini-1.5-pro-latest',
                generation_config=genai.types.GenerationConfig(
                    temperature=0.7,
                    top_p=0.9,
                    top_k=40,
                    max_output_tokens=1000,
                )
            )
            self.logger.info("‚úÖ AI –º–æ–¥–µ–ª—å (Gemini 1.5 Pro) –≥–æ—Ç–æ–≤–∞")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: {e}")
            return False
    
    def process_message(self, chat_id: str, user_message: str) -> str:
        """
        üîß –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        start_time = time.time()
        
        # üöÄ –ù–ê–ß–ò–ù–ê–ï–ú DEBUG –°–ï–°–°–ò–Æ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if DEBUG_LOGGING_ENABLED:
            rag_debug.start_session(chat_id, user_message)
        
        try:
            with self.stats_lock:
                self.performance_stats['total_requests'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º fast response cache
            fast_response = self.fast_response_cache.get_fast_response(user_message, chat_id)
            if fast_response:
                with self.stats_lock:
                    self.performance_stats['fast_responses'] += 1
                self.logger.info(f"‚ö° Fast response –¥–ª—è {chat_id}")
                
                # Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è fast response
                if DEBUG_LOGGING_ENABLED:
                    rag_debug.log_final_response(fast_response, 0.001)
                return fast_response
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = conversation_manager.get_dialogue_state(chat_id)
            
            # Parallel processing –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            def get_conversation_history():
                return conversation_manager.get_conversation_history(chat_id)
            
            def get_rag_context():
                history = conversation_manager.get_conversation_history(chat_id)
                enriched_query = intelligent_analyzer.enrich_query_with_context(user_message, history)

                # --- RAG –ü–û–ò–°–ö –° DEBUG –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ---
                if USE_LLAMAINDEX and llama_index_rag:
                    self.logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LlamaIndex RAG")
                    
                    # Debug: –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if DEBUG_LOGGING_ENABLED:
                        rag_debug.log_enricher_input(user_message, history)
                    
                    context, metrics = llama_index_rag.search_knowledge_base(enriched_query)
                else:
                    self.logger.info("Legacy RAG –≤ –¥–µ–π—Å—Ç–≤–∏–∏")
                    context, metrics = rag_system.search_knowledge_base(enriched_query)

                return context, metrics

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            try:
                history_future = self.executor.submit(get_conversation_history)
                conversation_history = history_future.result(timeout=3)
                
                rag_future = self.executor.submit(get_rag_context)
                facts_context, rag_metrics = rag_future.result(timeout=5)
            except Exception as e:
                self.logger.error(f"Parallel processing error: {e}")
                facts_context = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
                rag_metrics = {'best_score': 0.0, 'chunks_found': 0}
                conversation_history = []
            
            parallel_time = time.time() - start_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–µ—Ç–∞—Ñ–æ—Ä—ã
            metaphor_restrictions = self.fast_response_cache.get_metaphor_restriction(chat_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º RAG score
            question_category = intelligent_analyzer.analyze_question_category_optimized(user_message)
            rag_score = rag_metrics.get('max_score', 0.0)

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í –ü–†–û–ú–ü–¢–ê –° –ò–°–¢–û–†–ò–ï–ô
            llm_start = time.time()
            combined_prompt = self.prompt_builder.build_combined_analysis_prompt_RAG_TEST(
                user_message=user_message,
                facts_context=facts_context,
                rag_score=rag_metrics.get('average_score', 0.5),
                conversation_history=conversation_history  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –ò–°–¢–û–†–ò–Ø!
            )

            # Debug: –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            if DEBUG_LOGGING_ENABLED:
                rag_debug.log_final_prompt(combined_prompt, len(conversation_history))

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            self.logger.info(f"üìä [RAG TEST] Category: {question_category}, RAG: {rag_score:.2f}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            combined_response = self._call_ai_model(combined_prompt)
            llm_time = time.time() - llm_start

            # Debug: –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if DEBUG_LOGGING_ENABLED:
                rag_debug.log_final_response(combined_response, llm_time)

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            main_response, analysis_data = self._parse_combined_response(combined_response)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
            final_response = self._process_action_tokens(main_response, chat_id, current_state)

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã
            self.fast_response_cache.track_metaphor_usage(chat_id, final_response)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            conversation_manager.update_conversation_history(chat_id, user_message, final_response)
            conversation_manager.set_dialogue_state(chat_id, analysis_data.get('state', current_state))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_time = time.time() - start_time
            self._update_performance_stats(total_time, parallel_time, llm_time)

            self.logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {chat_id} –∑–∞ {total_time:.3f}s")
            return final_response
            
        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            
            # Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            if DEBUG_LOGGING_ENABLED:
                rag_debug.log_final_response(f"ERROR: {error_response}", 0.0)
            return error_response
    
    def _call_ai_model(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ AI –º–æ–¥–µ–ª–∏ —Å proper error handling"""
        try:
            if not self.ai_model_available:
                return "AI –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            response = self.model.generate_content(prompt)
            return response.text if response.text else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
            
        except Exception as e:
            self.logger.error(f"AI model error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def _parse_combined_response(self, combined_response: str) -> Tuple[str, Dict[str, str]]:
        """
        üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ "–û—Ç–≤–µ—Ç:"
        """
        try:
            lines = combined_response.split('\n')
            analysis_line = ""
            response_lines = []
            
            for line in lines:
                if line.strip().startswith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:'):
                    analysis_line = line.strip()
                elif line.strip().startswith('–û—Ç–≤–µ—Ç:'):
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–û—Ç–≤–µ—Ç:"
                    continue
                else:
                    response_lines.append(line)
            
            # –ü–∞—Ä—Å–∏–º –∞–Ω–∞–ª–∏–∑
            analysis_data = {}
            if analysis_line:
                try:
                    parts = analysis_line.split('|')
                    for part in parts:
                        if '–ö–∞—Ç–µ–≥–æ—Ä–∏—è:' in part:
                            analysis_data['category'] = part.split(':')[1].strip()
                        elif '–°–æ—Å—Ç–æ—è–Ω–∏–µ:' in part:
                            analysis_data['state'] = part.split(':')[1].strip()
                        elif '–°—Ç–∏–ª—å:' in part:
                            analysis_data['style'] = part.split(':')[1].strip()
                except:
                    pass
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
            main_response = '\n'.join([line for line in response_lines if line.strip()])
            
            return main_response, analysis_data
            
        except Exception as e:
            self.logger.error(f"Parse error: {e}")
            return combined_response, {}
    
    def _process_action_tokens(self, response: str, chat_id: str, current_state: str) -> str:
        """
        üö® –ö–†–ò–¢–ò–ß–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å user_id –∏ –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        if "[ACTION:SEND_LESSON_LINK]" in response:
            lesson_url = config.get_lesson_url(chat_id)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            formatted_link = f"\n\nüéì **–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!**\nüìù –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: {lesson_url}\n"
            
            response = response.replace("[ACTION:SEND_LESSON_LINK]", formatted_link)
            self.logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å user_id: {chat_id}")
        
        return response
    
    def _update_performance_stats(self, total_time: float, parallel_time: float, llm_time: float):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.stats_lock:
            estimated_sequential_time = 9.65
            time_saved = max(0, estimated_sequential_time - total_time)
            self.performance_stats['total_time_saved'] += time_saved
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            current_avg = self.performance_stats['avg_response_time']
            total_requests = self.performance_stats['total_requests']
            new_avg = (current_avg * (total_requests - 1) + total_time) / total_requests
            self.performance_stats['avg_response_time'] = new_avg
    
    def get_system_status(self) -> Dict[str, Any]:
        """Thread-safe –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        base_status = {
            "config_valid": config.validate_configuration(),
            "telegram_bot_ready": telegram_bot is not None,
            "conversation_manager_ready": conversation_manager is not None,
            "rag_system_stats": rag_system.get_stats(),
            "ai_model_available": self.ai_model_available
        }
        
        with self.stats_lock:
            performance_metrics = self.performance_stats.copy()
        
        if performance_metrics['total_requests'] > 0:
            performance_metrics['fast_response_rate'] = round(
                (performance_metrics['fast_responses'] / performance_metrics['total_requests']) * 100, 1
            )
            performance_metrics['avg_speedup'] = round(
                9.65 / max(performance_metrics['avg_response_time'], 0.1), 2
            )
        
        return {**base_status, "performance_metrics": performance_metrics}


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
ai_service = ProductionAIService()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.config['SECRET_KEY'] = config.FLASK_SECRET_KEY

@app.route('/', methods=['POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        update = request.get_json()
        if not update:
            return "No JSON data", 400
        
        message = update.get('message')
        if not message:
            return "OK", 200
            
        chat_id = str(message['chat']['id'])
        user_message = message.get('text', '').strip()
        
        if not user_message:
            return "OK", 200
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        ai_response = ai_service.process_message(chat_id, user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Telegram
        telegram_bot.send_message(chat_id, ai_response)
        
        return "OK", 200
        
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return "Error", 500

@app.route('/status', methods=['GET'])
def system_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status = ai_service.get_system_status()
        return status, 200
    except Exception as e:
        return {"error": str(e)}, 500

@app.route('/test-message', methods=['POST'])
def test_message():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        data = request.get_json()
        user_message = data.get('message', '')
        user_id = data.get('user_id', 'test_user')
        
        start_time = time.time()
        ai_response = ai_service.process_message(user_id, user_message)
        response_time = time.time() - start_time
        
        return {
            "bot_response": ai_response,
            "response_time": response_time,
            "status": "success"
        }, 200
        
    except Exception as e:
        return {"error": str(e)}, 500

@app.route('/clear-memory', methods=['POST'])
def clear_memory():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –û—á–∏—â–∞–µ–º –∫–µ—à–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é
        conversation_manager.clear_all_conversations()
        
        return {"status": "success", "message": "Memory cleared"}, 200
    except Exception as e:
        return {"error": str(e)}, 500

if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)