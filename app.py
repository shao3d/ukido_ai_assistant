# app.py (CRITICAL FIXES - Production Ready)
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –£–ë–†–ê–ù–û –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ ZhvanetskyHumorLevelSystem –∏ ProductionFastResponseCache
2. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ —Å user_id
3. –£–±—Ä–∞–Ω—ã —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ fast response
5. –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
"""

import logging
import time
import threading
import atexit
from concurrent.futures import ThreadPoolExecutor, as_completed
from flask import Flask, request
from typing import Dict, Any, Tuple, Optional
import requests
import weakref

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import config
from telegram_bot import telegram_bot
from conversation import conversation_manager
from rag_system import rag_system
from hubspot_client import hubspot_client
from intelligent_analyzer import intelligent_analyzer


class ProductionConnectionPool:
    """Production-ready HTTP Connection pooling —Å proper cleanup"""
    
    def __init__(self):
        self.session = requests.Session()
        self.logger = logging.getLogger(f"{__name__}.ConnectionPool")
        
        adapter = requests.adapters.HTTPAdapter(
            pool_connections=10,
            pool_maxsize=20,
            max_retries=3
        )
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)
        self.session.timeout = (5, 15)
        
        atexit.register(self.cleanup)
        self.logger.info("üîó Production connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def post(self, *args, **kwargs):
        return self.session.post(*args, **kwargs)
    
    def get(self, *args, **kwargs):
        return self.session.get(*args, **kwargs)
    
    def cleanup(self):
        try:
            self.session.close()
            self.logger.info("üîó Connection pool –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ connection pool: {e}")


class ProductionFastResponseCache:
    """
    üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: Fast response cache —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
    """
    def __init__(self):
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è '–ø—Ä–æ–±–Ω—ã–π'
        self.fast_responses = {
            '—Ü–µ–Ω–∞': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",  # –î–û–ë–ê–í–õ–ï–ù–û
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",  # –î–û–ë–ê–í–õ–ï–ù–û
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",  # –î–û–ë–ê–í–õ–ï–ù–û
            '–¥–æ—Ä–æ–≥–æ': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π! –≠—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.",  # –î–û–ë–ê–í–õ–ï–ù–û
            '–≤–æ–∑—Ä–∞—Å—Ç': "–£ –Ω–∞—Å –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤: 7-10 –ª–µ—Ç (–Æ–Ω—ã–π –æ—Ä–∞—Ç–æ—Ä), 9-12 –ª–µ—Ç (–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞—Å), 11-14 –ª–µ—Ç (–ö–∞–ø–∏—Ç–∞–Ω –ø—Ä–æ–µ–∫—Ç–æ–≤).",
            '–æ–Ω–ª–∞–π–Ω': "–î–∞, –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∂–∏–≤—ã–º –æ–±—â–µ–Ω–∏–µ–º.",
            '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': "–ó–∞–Ω—è—Ç–∏—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω—É—Ç. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—Å.",
            # –£–î–ê–õ–ï–ù–û: '–ø—Ä–æ–±–Ω—ã–π' - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ AI –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
        }
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ AI
        self.ai_required_patterns = [
            '–ø—Ä–æ–±–Ω', '–∑–∞–ø–∏—Å–∞', '—É—Ä–æ–∫', '–±–µ—Å–ø–ª–∞—Ç–Ω', '–ø–æ–ø—Ä–æ–±–æ–≤–∞', '—Ç–µ—Å—Ç'
        ]
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        self.used_metaphors = {}
        
        self.usage_stats = {}
        self.stats_lock = threading.Lock()
        self.max_stats_entries = 1000
        
        for key in self.fast_responses:
            self.usage_stats[key] = 0
            
        self.logger = logging.getLogger(f"{__name__}.FastCache")
    
    def get_fast_response(self, user_message: str, chat_id: str = None) -> Optional[str]:
        """
        üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∫ AI –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
        """
        message_lower = user_message.lower()
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
        for ai_pattern in self.ai_required_patterns:
            if ai_pattern in message_lower:
                self.logger.info(f"üéØ –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å—Å—ã–ª–∫–∏ —Å user_id: {ai_pattern}")
                return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ AI
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ fast response –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        for keyword, response in self.fast_responses.items():
            if keyword in message_lower and len(user_message.split()) <= 3:
                with self.stats_lock:
                    self.usage_stats[keyword] += 1
                    self._cleanup_stats_if_needed()
                return response
        
        return None
    
    def track_metaphor_usage(self, chat_id: str, response: str):
        """–î–û–ë–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä"""
        if chat_id not in self.used_metaphors:
            self.used_metaphors[chat_id] = set()
        
        metaphor_patterns = [
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–º–µ–Ω—é', '—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π –Ω–æ–∂', '–≥–æ—Ä—è—á–∏–µ –ø–∏—Ä–æ–∂–∫–∏',
            '—à–≤–µ–¥—Å–∫–∏–π —Å—Ç–æ–ª', '–∫—É–ª–∏–Ω–∞—Ä–Ω', '–ø–æ–≤–∞—Ä', '–±–ª—é–¥–æ'
        ]
        
        response_lower = response.lower()
        for pattern in metaphor_patterns:
            if pattern in response_lower:
                self.used_metaphors[chat_id].add(pattern)
    
    def get_metaphor_restriction(self, chat_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        used = self.used_metaphors.get(chat_id, set())
        if used:
            return f"\n‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã: {', '.join(used)}"
        return ""
    
    def _cleanup_stats_if_needed(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if len(self.usage_stats) > self.max_stats_entries:
            old_stats = {}
            for key in self.fast_responses.keys():
                old_stats[key] = self.usage_stats.get(key, 0)
            self.usage_stats = old_stats
            self.logger.info("üßπ Stats cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω")


class ZhvanetskyHumorLevelSystem:
    """
    üé≠ –°–ò–°–¢–ï–ú–ê –ì–†–ê–î–£–°–û–í –Æ–ú–û–†–ê –ñ–í–ê–ù–ï–¶–ö–û–ì–û
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        # üéØ –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô –Æ–ú–û–†–ê
        self.humor_levels = {
            'family_safe': {
                'intensity': '–º—è–≥–∫–∏–π, —Å–µ–º–µ–π–Ω—ã–π',
                'style': '–¥–æ–±—Ä–æ–¥—É—à–Ω—ã–π, —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—â–∏–π',
                'examples': ['–∫–∞–∫ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—Ñ–µ', '–ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ', '—É–¥–æ–±–Ω–æ –∫–∞–∫ –¥–æ–º–∞']
            },
            'moderate': {
                'intensity': '—É–º–µ—Ä–µ–Ω–Ω—ã–π, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',  
                'style': '–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π –ñ–≤–∞–Ω–µ—Ü–∫–∏–π',
                'examples': ['–∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π –Ω–æ–∂', '–∂–∏–∑–Ω—å –∫–∞–∫ —Ç–µ–∞—Ç—Ä', '–≤—Å–µ –∫–∞–∫ —É –ª—é–¥–µ–π']
            },
            'sophisticated': {
                'intensity': '–≥–ª—É–±–æ–∫–∏–π, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π',
                'style': '–º—É–¥—Ä—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è',
                'examples': ['–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–¥–µ—Ç–∏ –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ –¥—É—à–∏']
            },
            'no_humor': {
                'intensity': '—Å–µ—Ä—å–µ–∑–Ω—ã–π —Ç–æ–Ω',
                'style': '—ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
                'examples': ['–ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', '—ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ']
            }
        }
        
        # üéØ –ú–ê–ü–ü–ò–ù–ì: –±–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è + –¥–µ—Ç–∞–ª–∏ ‚Üí —É—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞
        self.humor_mapping_rules = {
            # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí —Å–µ–º–µ–π–Ω—ã–π —é–º–æ—Ä
            ('factual', 'basic'): 'family_safe',
            ('factual', 'price'): 'family_safe', 
            ('factual', 'schedule'): 'family_safe',
            ('factual', 'age'): 'family_safe',
            # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ñ–≤–∞–Ω–µ—Ü–∫–∏–π
            ('factual', 'detailed'): 'moderate',
            ('factual', 'comparison'): 'moderate',
            # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ç–µ–º—ã ‚Üí –≥–ª—É–±–æ–∫–∏–π —é–º–æ—Ä
            ('philosophical', 'any'): 'sophisticated',
            ('problem_solving', 'parenting'): 'sophisticated',
            # –î–µ–ª–∏–∫–∞—Ç–Ω—ã–µ —Ç–µ–º—ã ‚Üí –±–µ–∑ —é–º–æ—Ä–∞
            ('sensitive', 'any'): 'no_humor',
            ('problem_solving', 'crisis'): 'no_humor'
        }
        self.logger.info("üé≠ –°–∏—Å—Ç–µ–º–∞ –≥—Ä–∞–¥—É—Å–æ–≤ —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def analyze_question_details(self, user_message: str, basic_category: str) -> str:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –≤–Ω—É—Ç—Ä–∏ –±–∞–∑–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        message_lower = user_message.lower()
        
        if basic_category == 'factual':
            # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            if any(word in message_lower for word in ['—Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                return 'price'
            elif any(word in message_lower for word in ['–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ']):
                return 'schedule'  
            elif any(word in message_lower for word in ['–≤–æ–∑—Ä–∞—Å—Ç', '–ª–µ—Ç', '–¥–µ—Ç–µ–π']):
                return 'age'
            elif any(word in message_lower for word in ['–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–¥–µ—Ç–∞–ª—å–Ω–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ']):
                return 'detailed'
            elif any(word in message_lower for word in ['–ª—É—á—à–µ', '–≤—ã–±—Ä–∞—Ç—å', '—Ä–∞–∑–Ω–∏—Ü–∞']):
                return 'comparison'
            else:
                return 'basic'
        elif basic_category == 'problem_solving':
            # –ü—Ä–æ–±–ª–µ–º—ã –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è vs –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
            if any(word in message_lower for word in ['–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–æ–±—É—á–µ–Ω–∏–µ']):
                return 'parenting'
            elif any(word in message_lower for word in ['–∫—Ä–∏–∑–∏—Å', '—Ç—è–∂–µ–ª–æ', '–¥–µ–ø—Ä–µ—Å—Å–∏—è']):
                return 'crisis'
            else:
                return 'parenting'
        else:
            return 'any'
    
    def get_humor_level(self, category: str, rag_score: float) -> str:
        """
        üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + RAG score
        """
        if category == 'factual':
            humor_level = 'family_safe' if rag_score >= 0.3 else 'no_humor'
        elif category == 'problem_solving':
            humor_level = 'moderate' if rag_score >= 0.3 else 'no_humor'
        elif category == 'philosophical':
            humor_level = 'sophisticated'  # –í—Å–µ–≥–¥–∞ sophisticated (–ø–æ—Ä–æ–≥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
        elif category == 'sensitive':
            humor_level = 'no_humor'  # –í—Å–µ–≥–¥–∞ no_humor
        elif category == 'off_topic':
            humor_level = 'family_safe'  # –í—Å–µ–≥–¥–∞ family_safe
        else:
            humor_level = 'moderate'  # Fallback
        self.logger.info(f"üé≠ –Æ–º–æ—Ä: {category} + RAG {rag_score:.2f} ‚Üí {humor_level}")
        return humor_level
    
    def build_humor_instructions(self, humor_level: str, metaphor_restrictions: str = "") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        level_info = self.humor_levels[humor_level]
        
        if humor_level == 'family_safe':
            return f"""
üé≠ –°–¢–ò–õ–¨: –ú—è–≥–∫–∏–π —Å–µ–º–µ–π–Ω—ã–π –ñ–≤–∞–Ω–µ—Ü–∫–∏–π
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏
‚Ä¢ –ë–ï–ó —Å–∞—Ä–∫–∞–∑–º–∞, –∏—Ä–æ–Ω–∏–∏ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ –¢–µ–ø–ª—ã–π, —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—â–∏–π —Ç–æ–Ω
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
{metaphor_restrictions}
"""
        elif humor_level == 'moderate':
            return f"""
üé≠ –°–¢–ò–õ–¨: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π –ñ–≤–∞–Ω–µ—Ü–∫–∏–π  
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ñ–∏—Ç–µ–π—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã —Å –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π
‚Ä¢ –ü–æ–¥–º–µ—á–∞–µ—Ç –∑–∞–±–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ–±—ã—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
‚Ä¢ –ú—É–¥—Ä—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –±–µ–∑ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
{metaphor_restrictions}
"""
        elif humor_level == 'sophisticated':
            return f"""
üé≠ –°–¢–ò–õ–¨: –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≥–ª—É–±–æ–∫–∏–π –ñ–≤–∞–Ω–µ—Ü–∫–∏–π
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ú–µ—Ç–∞—Ñ–æ—Ä—ã —Å –≥–ª—É–±–æ–∫–∏–º —Å–º—ã—Å–ª–æ–º –æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ
‚Ä¢ –¢–æ–Ω–∫–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏ –∏ –∂–∏–∑–Ω–∏
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —é–º–æ—Ä–∞
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
{metaphor_restrictions}
"""
        else:  # no_humor
            return f"""
üé≠ –°–¢–ò–õ–¨: –°–µ—Ä—å–µ–∑–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–Ω
‚Ä¢ {level_info['intensity']} - {level_info['style']}
‚Ä¢ –ë–ï–ó —é–º–æ—Ä–∞, –º–µ—Ç–∞—Ñ–æ—Ä –∏ —à—É—Ç–æ–∫
‚Ä¢ –ü—Ä—è–º—ã–µ, —á–µ—Ç–∫–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(level_info['examples'])}
"""


class OptimizedPromptBuilder:
    """
    üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–º–ø—Ç—ã –±–µ–∑ "–û—Ç–≤–µ—Ç:", "–Ω—É", —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    üé≠ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –≥—Ä–∞–¥—É—Å–æ–≤ —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
    """
    
    @staticmethod
    def build_combined_analysis_prompt(user_message: str, current_state: str, 
                                     conversation_history: list, facts_context: str, 
                                     chat_id: str = "", metaphor_restrictions: str = "",
                                     category: str = "factual", rag_score: float = 0.5) -> str:
        """
        üé≠ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –° —É–º–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —é–º–æ—Ä–∞
        humor_system = ZhvanetskyHumorLevelSystem()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + RAG score
        humor_level = humor_system.get_humor_level(category, rag_score)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
        humor_instructions = humor_system.build_humor_instructions(humor_level, metaphor_restrictions)
        
        short_history = '\n'.join(conversation_history[-4:]) if conversation_history else "–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"
        short_facts = facts_context[:800] + "..." if len(facts_context) > 800 else facts_context
        
        # üéØ –£–ú–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ù–ê –û–°–ù–û–í–ï –ö–ê–¢–ï–ì–û–†–ò–ò + RAG SCORE
        strategy_instructions = OptimizedPromptBuilder._get_strategy_instructions(
            category, rag_score, user_message, short_facts
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
        message_lower = user_message.lower()
        detailed_keywords = ['—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–¥–µ—Ç–∞–ª—å–Ω–æ', '–≤—Å–µ –∫—É—Ä—Å—ã', '—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å']
        lesson_request_keywords = ['–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–ø—Ä–æ–±–Ω—ã–π', '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '—Ö–æ—á—É —É—Ä–æ–∫', '—Ç–µ—Å—Ç–æ–≤–æ']
        simple_keywords = ['—Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–≤–æ–∑—Ä–∞—Å—Ç', '–≤—Ä–µ–º—è']
        
        if any(keyword in message_lower for keyword in detailed_keywords):
            response_type = "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
        elif any(keyword in message_lower for keyword in lesson_request_keywords):
            response_type = "—Å_—Å—Å—ã–ª–∫–æ–π"
        elif any(keyword in message_lower for keyword in simple_keywords):
            response_type = "–∫—Ä–∞—Ç–∫–∏–π"
        else:
            response_type = "—Å—Ä–µ–¥–Ω–∏–π"
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        return f"""–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã Ukido –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è soft-skills —É –¥–µ—Ç–µ–π.

{humor_instructions}

{strategy_instructions}

üí° –û–ü–†–ï–î–ï–õ–ï–ù–û –°–ò–°–¢–ï–ú–û–ô:
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
‚Ä¢ RAG Score: {rag_score:.2f}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞: {humor_level}  
‚Ä¢ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_type}

üìö –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–°–ê–•:
‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–£–†–°–´ (—Ç–æ–ª—å–∫–æ —ç—Ç–∏ 3!):
‚Ä¢ "–Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä" (7-10 –ª–µ—Ç) - 6000 –≥—Ä–Ω/–º–µ—Å—è—Ü  
‚Ä¢ "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å" (9-12 –ª–µ—Ç) - 7000 –≥—Ä–Ω/–º–µ—Å—è—Ü
‚Ä¢ "–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤" (11-14 –ª–µ—Ç) - 8000 –≥—Ä–Ω/–º–µ—Å—è—Ü

‚ùå –ù–ï –°–£–©–ï–°–¢–í–£–Æ–¢: "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"

üîß –£–°–õ–û–í–ò–Ø:
‚Ä¢ –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω, 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω
‚Ä¢ –í—Ä–µ–º—è: 17:00 –∏–ª–∏ 19:00  
‚Ä¢ –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤

–ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê: {short_history}
–°–û–°–¢–û–Ø–ù–ò–ï: {current_state}

–ù–ê–ô–î–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø: {short_facts}

üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –î–õ–ò–ù–ï –û–¢–í–ï–¢–ê:
{response_type}: {"–∫—Ä–∞—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)" if response_type == "–∫—Ä–∞—Ç–∫–∏–π" else 
                "—Å—Ä–µ–¥–Ω–∏–π (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)" if response_type == "—Å—Ä–µ–¥–Ω–∏–π" else
                "–ø–æ–¥—Ä–æ–±–Ω—ã–π —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π" if response_type == "–ø–æ–¥—Ä–æ–±–Ω—ã–π" else 
                "–∫—Ä–∞—Ç–∫–∏–π + —Å—Å—ã–ª–∫–∞ [ACTION:SEND_LESSON_LINK]"}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{user_message}"

–¢–í–û–ô –û–¢–í–ï–¢ (—Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Å—Ç–∏–ª—é):"""

    @staticmethod
    def _get_strategy_instructions(category: str, rag_score: float, user_message: str, facts_context: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if category == 'factual' and rag_score < 0.3:
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –ß–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ü—Ä—è–º–æ —Å–∫–∞–∂–∏, —á—Ç–æ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ—Ç
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
‚Ä¢ –ë–ï–ó –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –∏–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π"""
        elif category == 'problem_solving' and rag_score < 0.3:
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –ü–æ–∫–∞–∂–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —ç–º–ø–∞—Ç–∏—é –∫ –ø—Ä–æ–±–ª–µ–º–µ
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω–∏, —á—Ç–æ —É —à–∫–æ–ª—ã –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏
‚Ä¢ –ë–ï–ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        elif category == 'philosophical' and rag_score < 0.2:
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∫ —à–∫–æ–ª–µ
‚Ä¢ –ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–±—â–∏–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –ø–æ —Ç–µ–º–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ç–µ–π—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
‚Ä¢ –ú—è–≥–∫–æ –ø–µ—Ä–µ–≤–µ–¥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ —Ç–µ–º–µ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π –∏ —à–∫–æ–ª—ã
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å soft skills –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ"""
        elif category == 'sensitive':
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–∑–Ω–∞–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –∏ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ—Å—Ç—å —Ç–µ–º—ã
‚Ä¢ –¢–∞–∫—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–µ—Ç—Å–∫–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚Ä¢ –ë–ï–ó –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–≤–µ—Ç–æ–≤"""
        elif category == 'off_topic':
            return """
üö® –°–¢–†–ê–¢–ï–ì–ò–Ø: –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ
‚Ä¢ –ú—è–≥–∫–æ –ø–µ—Ä–µ–≤–µ–¥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ —Ç–µ–º–µ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω–∏, –∫–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –Ω–∞–≤—ã–∫–∞–º–∏
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —É–∑–Ω–∞—Ç—å –æ –∫—É—Ä—Å–∞—Ö —à–∫–æ–ª—ã"""
        else:
            return """
‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø: –£–≤–µ—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤—É –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –û—Ç–≤–µ—á–∞–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ —é–º–æ—Ä–∞
‚Ä¢ –ë—É–¥—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º"""


class ProductionAIService:
    """Production-ready –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è AI —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.connection_pool = ProductionConnectionPool()
        self.fast_response_cache = ProductionFastResponseCache()
        self.prompt_builder = OptimizedPromptBuilder()
        
        self.executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="UkidoAI")
        
        # Thread-safe —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'total_requests': 0,
            'fast_responses': 0,
            'parallel_processed': 0,
            'avg_response_time': 0,
            'total_time_saved': 0
        }
        # üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ—à–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.decision_metrics = {
            'factual_confident': 0,    # factual + good RAG
            'factual_uncertain': 0,    # factual + poor RAG  
            'problem_confident': 0,
            'problem_redirect': 0,
            'philosophical_informed': 0,
            'philosophical_reflect': 0,
            'sensitive_total': 0,
            'off_topic_total': 0
        }
        self.stats_lock = threading.Lock()
        
        atexit.register(self.cleanup)
        self._init_ai_model()
        self._setup_module_connections()
        
        self.logger.info("üöÄ Production-ready AI Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def cleanup(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.executor.shutdown(wait=True, timeout=30)
            self.connection_pool.cleanup()
            self.logger.info("üßπ AI Service cleanup –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            self.logger.error(f"AI Service cleanup error: {e}")
    
    def _init_ai_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏"""
        try:
            import google.generativeai as genai
            genai.configure(api_key=config.GEMINI_API_KEY)
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            self.ai_model_available = True
            self.logger.info("‚úÖ Gemini AI –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥–µ–ª–∏: {e}")
            self.ai_model_available = False
    
    def _setup_module_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        try:
            telegram_bot.set_message_handler(self.handle_message)
            self.logger.info("‚úÖ Module connections —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ connections: {e}")
    
    def handle_message(self, chat_id: str, user_message: str) -> str:
        """
        üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        start_time = time.time()
        
        try:
            with self.stats_lock:
                self.performance_stats['total_requests'] += 1
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º fast response —Å –ø–µ—Ä–µ–¥–∞—á–µ–π chat_id
            fast_response = self.fast_response_cache.get_fast_response(user_message, chat_id)
            if fast_response:
                with self.stats_lock:
                    self.performance_stats['fast_responses'] += 1
                self.logger.info(f"‚ö° Fast response –¥–ª—è {chat_id}")
                return fast_response
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = conversation_manager.get_dialogue_state(chat_id)
            # Parallel processing –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            def get_conversation_history():
                return conversation_manager.get_conversation_history(chat_id)
            def get_rag_context():
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                history = conversation_manager.get_conversation_history(chat_id)
                # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞
                enriched_query = intelligent_analyzer.enrich_query_with_context(user_message, history)
                context, metrics = rag_system.search_knowledge_base(enriched_query)
                return context, metrics
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            try:
                history_future = self.executor.submit(get_conversation_history)
                conversation_history = history_future.result(timeout=3)
                # RAG —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏)
                rag_future = self.executor.submit(get_rag_context)
                facts_context, rag_metrics = rag_future.result(timeout=5)
            except Exception as e:
                # Fallback –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                self.logger.error(f"Parallel processing error: {e}")
                facts_context = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
                rag_metrics = {'best_score': 0.0, 'chunks_found': 0, 'fallback_reason': 'parallel_error'}
                conversation_history = []
            
            parallel_time = time.time() - start_time
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–µ—Ç–∞—Ñ–æ—Ä—ã
            metaphor_restrictions = self.fast_response_cache.get_metaphor_restriction(chat_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º RAG score
            question_category = intelligent_analyzer.analyze_question_category_optimized(user_message)
            rag_score = rag_metrics.get('best_score', 0.0) if 'rag_metrics' in locals() else 0.0

            # Single LLM call —Å —É–º–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            llm_start = time.time()
            combined_prompt = self.prompt_builder.build_combined_analysis_prompt(
                user_message, current_state, conversation_history, facts_context, 
                chat_id, metaphor_restrictions, question_category, rag_score
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            self.logger.info(f"üìä Decision: {question_category}, RAG: {rag_score:.2f}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            combined_response = self._call_ai_model(combined_prompt)
            llm_time = time.time() - llm_start

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            main_response, analysis_data = self._parse_combined_response(combined_response)

            # üö® –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            final_response = self._process_action_tokens(main_response, chat_id, current_state)

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã
            self.fast_response_cache.track_metaphor_usage(chat_id, final_response)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            conversation_manager.update_conversation_history(chat_id, user_message, final_response)
            conversation_manager.set_dialogue_state(chat_id, analysis_data.get('state', current_state))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_time = time.time() - start_time
            self._update_performance_stats(total_time, parallel_time, llm_time)

            self.logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {chat_id} –∑–∞ {total_time:.3f}s")
            return final_response
            
        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def _call_ai_model(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ AI –º–æ–¥–µ–ª–∏ —Å proper error handling"""
        try:
            if not self.ai_model_available:
                return "AI –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            response = self.model.generate_content(prompt)
            return response.text if response.text else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
            
        except Exception as e:
            self.logger.error(f"AI model error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def _parse_combined_response(self, combined_response: str) -> Tuple[str, Dict[str, str]]:
        """
        üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ "–û—Ç–≤–µ—Ç:"
        """
        try:
            lines = combined_response.split('\n')
            analysis_line = ""
            response_lines = []
            
            for line in lines:
                if line.strip().startswith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:'):
                    analysis_line = line.strip()
                elif line.strip().startswith('–û—Ç–≤–µ—Ç:'):
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–û—Ç–≤–µ—Ç:"
                    continue
                else:
                    response_lines.append(line)
            
            # –ü–∞—Ä—Å–∏–º –∞–Ω–∞–ª–∏–∑
            analysis_data = {}
            if analysis_line:
                try:
                    parts = analysis_line.split('|')
                    for part in parts:
                        if '–ö–∞—Ç–µ–≥–æ—Ä–∏—è:' in part:
                            analysis_data['category'] = part.split(':')[1].strip()
                        elif '–°–æ—Å—Ç–æ—è–Ω–∏–µ:' in part:
                            analysis_data['state'] = part.split(':')[1].strip()
                        elif '–°—Ç–∏–ª—å:' in part:
                            analysis_data['style'] = part.split(':')[1].strip()
                except:
                    pass
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
            main_response = '\n'.join([line for line in response_lines if line.strip()])
            
            return main_response, analysis_data
            
        except Exception as e:
            self.logger.error(f"Parse error: {e}")
            return combined_response, {}
    
    def _process_action_tokens(self, response: str, chat_id: str, current_state: str) -> str:
        """
        üö® –ö–†–ò–¢–ò–ß–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å user_id –∏ –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        if "[ACTION:SEND_LESSON_LINK]" in response:
            lesson_url = config.get_lesson_url(chat_id)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            formatted_link = f"\n\nüéì **–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!**\nüìù –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: {lesson_url}\n"
            
            response = response.replace("[ACTION:SEND_LESSON_LINK]", formatted_link)
            self.logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å user_id: {chat_id}")
        
        return response
    
    def _update_performance_stats(self, total_time: float, parallel_time: float, llm_time: float):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.stats_lock:
            estimated_sequential_time = 9.65
            time_saved = max(0, estimated_sequential_time - total_time)
            self.performance_stats['total_time_saved'] += time_saved
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            current_avg = self.performance_stats['avg_response_time']
            total_requests = self.performance_stats['total_requests']
            new_avg = (current_avg * (total_requests - 1) + total_time) / total_requests
            self.performance_stats['avg_response_time'] = new_avg
    
    def get_system_status(self) -> Dict[str, Any]:
        """Thread-safe –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        base_status = {
            "config_valid": config.validate_configuration(),
            "telegram_bot_ready": telegram_bot is not None,
            "conversation_manager_ready": conversation_manager is not None,
            "rag_system_stats": rag_system.get_stats(),
            "ai_model_available": self.ai_model_available
        }
        
        with self.stats_lock:
            performance_metrics = self.performance_stats.copy()
        
        if performance_metrics['total_requests'] > 0:
            performance_metrics['fast_response_rate'] = round(
                (performance_metrics['fast_responses'] / performance_metrics['total_requests']) * 100, 1
            )
            performance_metrics['avg_speedup'] = round(
                9.65 / max(performance_metrics['avg_response_time'], 0.1), 2
            )
        
        base_status['performance_metrics'] = performance_metrics
        return base_status


# –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
app = Flask(__name__)
ai_service = ProductionAIService()


# === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

@app.route('/', methods=['POST'])
def telegram_webhook():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    return telegram_bot.handle_webhook()

@app.route('/lesson')
def lesson_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Ä–æ–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    return telegram_bot.show_lesson_page()

@app.route('/submit-lesson-form', methods=['POST'])
def submit_lesson_form():
    """Production-ready –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å proper error handling"""
    try:
        form_data = request.get_json()
        if not form_data:
            return {"success": False, "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}, 400
        
        # Safe –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ HubSpot
        def safe_hubspot_submission():
            try:
                hubspot_client.create_contact(form_data)
                logging.getLogger(__name__).info(f"HubSpot contact created for: {form_data.get('firstName', 'Unknown')}")
            except Exception as e:
                logging.getLogger(__name__).error(f"HubSpot submission error: {e}")
        
        threading.Thread(target=safe_hubspot_submission, daemon=True).start()
        
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"}, 200
        
    except Exception as e:
        logging.getLogger(__name__).error(f"Form error: {e}")
        return {"success": False, "error": str(e)}, 500

@app.route('/hubspot-webhook', methods=['POST'])
def hubspot_webhook():
    """Production-ready HubSpot webhook —Å proper error handling"""
    try:
        webhook_data = request.get_json()
        message_type = request.args.get('message_type', 'first_follow_up')
        
        def safe_webhook_processing():
            try:
                hubspot_client.process_webhook(webhook_data, message_type)
                logging.getLogger(__name__).info(f"HubSpot webhook processed: {message_type}")
            except Exception as e:
                logging.getLogger(__name__).error(f"HubSpot webhook processing error: {e}")
        
        threading.Thread(target=safe_webhook_processing, daemon=True).start()
        
        return "OK", 200
        
    except Exception as e:
        logging.getLogger(__name__).error(f"HubSpot webhook error: {e}")
        return "Error", 500

@app.route('/health')
def health_check():
    """Health check —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return ai_service.get_system_status()

@app.route('/metrics')
def metrics():
    """Detailed performance metrics"""
    return {
        "system_status": ai_service.get_system_status(),
        "rag_stats": rag_system.get_stats(),
        "performance_summary": {
            "optimization_level": "HIGH",
            "parallel_processing": "ENABLED", 
            "connection_pooling": "ENABLED",
            "fast_responses": "ENABLED",
            "estimated_speedup": "4x+"
        }
    }

@app.route('/clear-memory', methods=['POST'])
def clear_memory():
    """Production-ready –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Å proper error handling"""
    try:
        def safe_memory_clear():
            try:
                conversation_manager._clear_all_memory()
                logging.getLogger(__name__).info("Memory cleared successfully")
            except Exception as e:
                logging.getLogger(__name__).error(f"Memory clear error: {e}")
        
        threading.Thread(target=safe_memory_clear, daemon=True).start()
        return {"success": True, "message": "–û—á–∏—Å—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞"}, 200
    except Exception as e:
        return {"success": False, "error": str(e)}, 500


# === –¢–ï–°–¢–û–í–´–ô ENDPOINT (–ª–µ–≥–∫–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ===

@app.route('/test-message', methods=['POST'])
def test_message_endpoint():
    """
    üß™ –¢–ï–°–¢–û–í–´–ô ENDPOINT –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ AI —Å–µ—Ä–≤–∏—Å —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π webhook.
    –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram - —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    
    –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç –±–ª–æ–∫.
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data = request.get_json()
        if not data or 'message' not in data:
            return {"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–µ 'message'"}, 400
        
        message_text = data['message']
        test_user_id = data.get('user_id', f'test_user_{int(time.time())%10000}')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if len(message_text) > 1000:
            return {"error": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤)"}, 400
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        logging.getLogger(__name__).info(f"üß™ TEST MESSAGE –æ—Ç {test_user_id}: {message_text[:50]}...")
        
        # –ë–ï–ó–û–ü–ê–°–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ AI —Å–µ—Ä–≤–∏—Å —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π webhook
        start_time = time.time()
        bot_response = ai_service.generate_ai_response(message_text, test_user_id)
        response_time = time.time() - start_time
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "user_message": message_text,
            "bot_response": bot_response,
            "user_id": test_user_id,
            "response_time": round(response_time, 3),
            "timestamp": time.time(),
            "note": "TEST ENDPOINT - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
        }, 200
        
    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logging.getLogger(__name__).error(f"‚ùå Test endpoint error: {e}")
        return {
            "success": False,
            "error": str(e),
            "user_message": data.get('message', '') if 'data' in locals() else '',
            "note": "TEST ENDPOINT ERROR"
        }, 500

# === –ö–û–ù–ï–¶ –¢–ï–°–¢–û–í–û–ì–û –ë–õ–û–ö–ê ===

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===

if __name__ == '__main__':
    logger = logging.getLogger(__name__)
    
    logger.info("=" * 60)
    logger.info("üö® PRODUCTION-READY UKIDO AI ASSISTANT - CRITICAL FIXES APPLIED")
    logger.info("‚úÖ –£–ë–†–ê–ù–û –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ ZhvanetskyHumorLevelSystem")
    logger.info("‚úÖ –£–ë–†–ê–ù–û –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ProductionFastResponseCache")
    logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å user_id –¥–ª—è HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    logger.info("‚úÖ –£–±—Ä–∞–Ω—ã —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–Ω—É, –æ—Ç–≤–µ—Ç)")
    logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤")
    logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ fast response –¥–ª—è –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
    logger.info("=" * 60)
    
    try:
        status = ai_service.get_system_status()
        logger.info(f"üìä Production system status: {status.get('config_valid', False)}")
    except Exception as e:
        logger.error(f"Status check error: {e}")
    
    app.run(
        debug=config.DEBUG_MODE,
        port=config.PORT,
        host='0.0.0.0',
        threaded=True,
        use_reloader=False
    )