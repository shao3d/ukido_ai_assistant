# main.py
"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Ukido AI Assistant.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ª—É–∂–∏—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.
–ó–¥–µ—Å—å –º—ã —Å–æ–µ–¥–∏–Ω—è–µ–º Telegram –±–æ—Ç–∞, —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–ª–æ–≥–æ–≤, RAG –ø–æ–∏—Å–∫ –∏ HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
–≤ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ, —Å–ª–µ–¥—É—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è:
- –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã (Dependency Injection)
- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ config.py
- Graceful degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import logging
import time
from flask import Flask, request
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import config
from telegram_bot import telegram_bot
from conversation import conversation_manager
from rag_system import rag_system
from hubspot_client import hubspot_client


class AIAssistantService:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π.
    
    –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "Service Layer" - —Å–ª–æ–π, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç
    –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏
    –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        self._init_ai_model()
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
        self._setup_module_connections()
        
        self.logger.info("üöÄ AI Assistant —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_ai_model(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
        –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API —Å GPT-4o mini.
        """
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
        self.ai_model_available = True
        self.logger.info("ü§ñ AI –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def _setup_module_connections(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏.
        
        –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "Dependency Injection" - –º—ã —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º,
        –∫–∞–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é, –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã
        –ø–æ–∑–≤–æ–ª–∏—Ç—å –∏–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è.
        """
        # Telegram –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        telegram_bot.set_message_handler(self.process_user_message)
        
        self.logger.info("üîó –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã")
    
    def process_user_message(self, chat_id: str, user_message: str) -> str:
        """
        –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –≠—Ç–æ "—Å–µ—Ä–¥—Ü–µ" –Ω–∞—à–µ–≥–æ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ó–¥–µ—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞:
        1. –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        2. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ RAG
        3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        process_start = time.time()
        
        try:
            self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}")
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            current_state = conversation_manager.get_dialogue_state(chat_id)
            self.logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {current_state}")
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            conversation_history = conversation_manager.get_conversation_history(chat_id)
            
            # –®–∞–≥ 3: –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            facts_context, rag_metrics = rag_system.search_knowledge_base(
                user_message, 
                conversation_history
            )
            
            self.logger.info(f"üîç RAG –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {rag_metrics.get('chunks_found', 0)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
            
            # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            new_state = conversation_manager.analyze_message_for_state_transition(
                user_message, 
                current_state
            )
            
            if new_state != current_state:
                self.logger.info(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state} ‚Üí {new_state}")
                conversation_manager.update_dialogue_state(chat_id, new_state)
            
            # –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–π —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            ai_response = self._generate_ai_response(
                user_message=user_message,
                current_state=new_state,
                conversation_history=conversation_history,
                facts_context=facts_context,
                chat_id=chat_id
            )
            
            # –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_manager.update_conversation_history(
                chat_id, 
                user_message, 
                ai_response
            )
            
            processing_time = time.time() - process_start
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å")
            
            return ai_response
            
        except Exception as e:
            processing_time = time.time() - process_start
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}: {e}", exc_info=True)
            
            # Graceful degradation - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ–∂–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
    
    def _generate_ai_response(
        self, 
        user_message: str, 
        current_state: str,
        conversation_history: list,
        facts_context: str,
        chat_id: str
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
        
        –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ –≤–∞—à–µ–≥–æ
        –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å.
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            system_prompt = self._get_state_specific_prompt(current_state)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
            history_context = "\n".join(conversation_history) if conversation_history else "–≠—Ç–æ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"""{system_prompt}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
{history_context}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ Ukido –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
{facts_context}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"""

            # –í—ã–∑—ã–≤–∞–µ–º AI –º–æ–¥–µ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
            ai_response = self._call_ai_model(full_prompt)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
            ai_response = self._process_action_tokens(ai_response, chat_id, current_state)
            
            return ai_response
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    
    def _get_state_specific_prompt(self, state: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
        
        –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —á–∞—Å—Ç—å "–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π" - AI –≤–µ–¥–µ—Ç —Å–µ–±—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        base_personality = """–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã soft skills "Ukido". –¢–≤–æ—è —Ä–æ–ª—å ‚Äî –º—É–¥—Ä—ã–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ–º –∏ —Å—Ç–∏–ª–µ–º –ú–∏—Ö–∞–∏–ª–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –ø–∞—Ä–∞–¥–æ–∫—Å–∞–º–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ä–æ–¥–∏—Ç–µ–ª—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∞ –Ω–µ –ø—Ä–æ–¥–∞—Ç—å –ª—é–±–æ–π —Ü–µ–Ω–æ–π."""
        
        state_instructions = {
            'greeting': """
–¢–ï–ö–£–©–ê–Ø –§–ê–ó–ê: –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ò –ó–ù–ê–ö–û–ú–°–¢–í–û
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º
- –£–∑–Ω–∞–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —É—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏""",
            
            'problem_solving': """
–¢–ï–ö–£–©–ê–Ø –§–ê–ó–ê: –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –ò –ö–û–ù–°–£–õ–¨–¢–ò–†–û–í–ê–ù–ò–ï  
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ —ç–º–ø–∞—Ç–∏—è
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –ü–æ–∫–∞–∑—ã–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —É—Ä–æ–∫, –ø–æ–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–∞
- –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∫—É—Ä—Å–∞, –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –º–µ—Ç–æ–¥–∏–∫—É""",
            
            'fact_finding': """
–¢–ï–ö–£–©–ê–Ø –§–ê–ó–ê: –ü–û–ò–°–ö –§–ê–ö–¢–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò
- –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ RAG
- –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–∞—Ö, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π –ª–µ–≥–∫—É—é –∏—Ä–æ–Ω–∏—é –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —É—Ä–æ–∫, –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã""",
            
            'closing': """
–¢–ï–ö–£–©–ê–Ø –§–ê–ó–ê: –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ó–ê–ü–ò–°–ò
- –†–æ–¥–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫
- –í–°–ï–ì–î–ê –≤—Å—Ç–∞–≤–ª—è–π —Ç–æ–∫–µ–Ω [ACTION:SEND_LESSON_LINK] –≤ –æ—Ç–≤–µ—Ç
- –ü—Ä–∏–º–µ—Ä: "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: [ACTION:SEND_LESSON_LINK]"
- –ë—É–¥—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º, –Ω–æ –Ω–µ –¥–∞–≤—è—â–∏–º"""
        }
        
        return f"{base_personality}\n\n{state_instructions.get(state, state_instructions['greeting'])}"
    
    def _call_ai_model(self, prompt: str) -> str:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
        
        –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenRouter.
        –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å retry –ª–æ–≥–∏–∫—É, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Ç.–¥.
        """
        import requests
        
        try:
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {config.OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "gpt-4o-mini",
                    "messages": [{"role": "user", "content": prompt}],
                    "max_tokens": 1000,
                    "temperature": 0.7
                },
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            else:
                self.logger.error(f"OpenRouter API error: {response.status_code}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞."
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ AI –º–æ–¥–µ–ª–∏: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞."
    
    def _process_action_tokens(self, response: str, chat_id: str, current_state: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ AI –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
        
        –ù–∞–ø—Ä–∏–º–µ—Ä, [ACTION:SEND_LESSON_LINK] –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É —É—Ä–æ–∫–∞.
        """
        # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ closing, –Ω–æ AI –∑–∞–±—ã–ª –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        if current_state == 'closing' and "[ACTION:SEND_LESSON_LINK]" not in response and "/lesson?user_id=" not in response:
            lesson_url = config.get_lesson_url(chat_id)
            response += f"\n\n–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: {lesson_url}"
            self.logger.info("–¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI, —Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if "[ACTION:SEND_LESSON_LINK]" in response:
            lesson_url = config.get_lesson_url(chat_id)
            response = response.replace("[ACTION:SEND_LESSON_LINK]", lesson_url)
            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–∫–µ–Ω [ACTION:SEND_LESSON_LINK] - —Å—Å—ã–ª–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞")
        
        return response
    
    def get_system_status(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è health checks –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        """
        return {
            "config_valid": config.validate_configuration(),
            "telegram_bot_ready": telegram_bot is not None,
            "conversation_manager_ready": conversation_manager is not None,
            "rag_system_stats": rag_system.get_stats(),
            "ai_model_available": self.ai_model_available
        }


# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
ai_service = AIAssistantService()


# === –ú–ê–†–®–†–£–¢–´ FLASK ===

@app.route('/', methods=['POST'])
def telegram_webhook():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram.
    –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É telegram_bot –º–æ–¥—É–ª—é.
    """
    return telegram_bot.handle_webhook()


@app.route('/lesson')
def lesson_page():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞.
    –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É telegram_bot –º–æ–¥—É–ª—é.
    """
    return telegram_bot.show_lesson_page()


@app.route('/submit-lesson-form', methods=['POST'])
def submit_lesson_form():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —É—Ä–æ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ HubSpot"""
    try:
        form_data = request.get_json()
        if not form_data:
            return {"success": False, "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}, 400
        
        logger = logging.getLogger(__name__)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {form_data.get('firstName')} {form_data.get('lastName')}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ HubSpot
        hubspot_success = hubspot_client.create_contact(form_data)
        
        if hubspot_success:
            return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CRM"}, 200
        else:
            return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"}, 200  # Graceful degradation
        
    except Exception as e:
        logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã: {e}")
        return {"success": False, "error": str(e)}, 500


@app.route('/hubspot-webhook', methods=['POST'])
def hubspot_webhook():
    """Webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö follow-up —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç HubSpot"""
    try:
        webhook_data = request.get_json()
        if not webhook_data:
            return "No data", 400
        
        message_type = request.args.get('message_type', 'first_follow_up')
        success = hubspot_client.process_webhook(webhook_data, message_type)
        
        return "OK" if success else "Error", 200
        
    except Exception as e:
        logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ HubSpot webhook: {e}")
        return "Error", 500


@app.route('/health')
def health_check():
    """
    Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö health checks.
    """
    return ai_service.get_system_status()


@app.route('/metrics')
def metrics():
    """
    Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    return {
        "system_status": ai_service.get_system_status(),
        "rag_stats": rag_system.get_stats(),
    }


# === –¢–û–ß–ö–ê –í–•–û–î–ê ===

if __name__ == '__main__':
    logger = logging.getLogger(__name__)
    
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö UKIDO AI ASSISTANT (–ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)")
    logger.info("=" * 60)
    logger.info("üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:")
    logger.info("   - config.py: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    logger.info("   - telegram_bot.py: –ß–∏—Å—Ç–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Telegram API")
    logger.info("   - conversation.py: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–æ–≤")
    logger.info("   - rag_system.py: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    logger.info("   - main.py: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
    status = ai_service.get_system_status()
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(
        debug=config.DEBUG_MODE,
        port=config.PORT,
        host='0.0.0.0'
    )
