import os
import requests
import google.generativeai as genai
from flask import Flask, request, render_template
from dotenv import load_dotenv
from pinecone import Pinecone
import redis
import time
import json
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ---
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_HOST_FACTS = os.getenv("PINECONE_HOST_FACTS")
HUBSPOT_API_KEY = os.getenv("HUBSPOT_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY") # –ù–û–í–´–ô –ö–õ–Æ–ß
REDIS_URL = os.getenv("REDIS_URL")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = {
    'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN, 'GEMINI_API_KEY': GEMINI_API_KEY, 
    'PINECONE_API_KEY': PINECONE_API_KEY, 'PINECONE_HOST_FACTS': PINECONE_HOST_FACTS, 
    'HUBSPOT_API_KEY': HUBSPOT_API_KEY, 'OPENROUTER_API_KEY': OPENROUTER_API_KEY
}
missing_vars = [name for name, value in required_vars.items() if not value]
if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ---
# Gemini –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
genai.configure(api_key=GEMINI_API_KEY)
embedding_model = 'models/text-embedding-004'

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø REDIS –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö ---
redis_client = None
redis_available = False

def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global redis_client, redis_available
    try:
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis client...")
        redis_client = redis.from_url(REDIS_URL, decode_responses=True)
        redis_client.ping()
        redis_available = True
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        redis_available = False
        print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤")

init_redis()
fallback_memory = {}

# --- –õ–ï–ù–ò–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø PINECONE –° FALLBACK ---
pinecone_index = None
pinecone_available = False

def get_pinecone_index():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
    global pinecone_index, pinecone_available
    if pinecone_index is not None:
        return pinecone_index
    try:
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone client...")
        pc = Pinecone(api_key=PINECONE_API_KEY)
        try:
            facts_description = pc.describe_index("ukido")
            pinecone_index = pc.Index(host=facts_description.host)
            print("‚úÖ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏")
        except Exception as dynamic_error:
            print(f"‚ö†Ô∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {dynamic_error}")
            pinecone_index = pc.Index(host=PINECONE_HOST_FACTS)
            print("‚úÖ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π host")
        pinecone_available = True
        return pinecone_index
    except Exception as e:
        pinecone_available = False
        print(f"‚ùå Pinecone –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ú–Ø–¢–ò –î–ò–ê–õ–û–ì–û–í ---
CONVERSATION_MEMORY_SIZE = 15
CONVERSATION_EXPIRATION_SECONDS = 3600

# --- –£–ü–†–û–©–ï–ù–ù–´–ï –ü–†–û–ú–ü–¢–´ ---
BASE_PROMPT = """–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã soft skills –¥–ª—è –¥–µ—Ç–µ–π "Ukido". 
–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ.
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –Ω–æ–≤–æ–π —Ç–µ–º—ã, –∑–∞–±—É–¥—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ.
–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."""

# --- –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–¨–Æ –î–ò–ê–õ–û–ì–û–í ---

def get_conversation_history(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
    if redis_available:
        try:
            history_key = f"history:{chat_id}"
            return redis_client.lrange(history_key, 0, -1)[::-1]
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis: {e}, –∏—Å–ø–æ–ª—å–∑—É—é fallback –ø–∞–º—è—Ç—å")
            return fallback_memory.get(chat_id, [])
    else:
        return fallback_memory.get(chat_id, [])

def update_conversation_history(chat_id, user_message, ai_response):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.now().isoformat()
    
    if redis_available:
        try:
            history_key = f"history:{chat_id}"
            metadata_key = f"metadata:{chat_id}"
            pipe = redis_client.pipeline()
            pipe.lpush(history_key, f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
            pipe.lpush(history_key, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
            pipe.ltrim(history_key, 0, (CONVERSATION_MEMORY_SIZE * 2) - 1)
            pipe.expire(history_key, CONVERSATION_EXPIRATION_SECONDS)
            metadata = {
                "last_activity": timestamp,
                "question_count": len(get_conversation_history(chat_id)) // 2 + 1
            }
            pipe.hset(metadata_key, mapping=metadata)
            pipe.expire(metadata_key, CONVERSATION_EXPIRATION_SECONDS)
            pipe.execute()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis: {e}, –∏—Å–ø–æ–ª—å–∑—É—é fallback –ø–∞–º—è—Ç—å")
            update_fallback_memory(chat_id, user_message, ai_response)
    else:
        update_fallback_memory(chat_id, user_message, ai_response)

def update_fallback_memory(chat_id, user_message, ai_response):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é fallback-–ø–∞–º—è—Ç—å"""
    if chat_id not in fallback_memory:
        fallback_memory[chat_id] = []
    fallback_memory[chat_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
    fallback_memory[chat_id].append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
    max_lines = CONVERSATION_MEMORY_SIZE * 2
    if len(fallback_memory[chat_id]) > max_lines:
        fallback_memory[chat_id] = fallback_memory[chat_id][-max_lines:]

# --- –§–£–ù–ö–¶–ò–ò RAG –°–ò–°–¢–ï–ú–´ ---

def get_relevance_description(score):
    if score >= 0.9: return "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    if score >= 0.7: return "–•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    if score >= 0.5: return "–°—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    return "–°–ª–∞–±–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"

def get_speed_description(seconds):
    if seconds < 2: return "–ë—ã—Å—Ç—Ä–æ"
    if seconds <= 5: return "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
    return "–ú–µ–¥–ª–µ–Ω–Ω–æ"

def get_facts_from_rag(user_message):
    search_start = time.time()
    try:
        index = get_pinecone_index()
        if not index:
            return "", {"error": "Pinecone –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "fallback_used": True}
        
        embedding_start = time.time()
        query_embedding = genai.embed_content(model=embedding_model, content=user_message, task_type="RETRIEVAL_QUERY")['embedding']
        embedding_time = time.time() - embedding_start
        
        query_start = time.time()
        results = index.query(vector=query_embedding, top_k=3, include_metadata=True)
        query_time = time.time() - query_start
        
        context_chunks, found_chunks_debug, best_score = [], [], 0
        for match in results['matches']:
            if match['score'] > 0.5:
                context_chunks.append(match['metadata']['text'])
                best_score = max(best_score, match['score'])
                found_chunks_debug.append({
                    "score": round(match['score'], 3),
                    "source": match['metadata'].get('source', 'unknown'),
                    "text_preview": match['metadata']['text'][:150] + "..."
                })
        
        context = "\n".join(context_chunks)
        total_time = time.time() - search_start
        
        metrics = {
            "search_time": round(total_time, 2), "embedding_time": round(embedding_time, 2),
            "query_time": round(query_time, 2), "chunks_found": len(context_chunks),
            "found_chunks_debug": found_chunks_debug, "best_score": round(best_score, 3),
            "relevance_desc": get_relevance_description(best_score),
            "speed_desc": get_speed_description(total_time), "success": True
        }
        return context, metrics
        
    except Exception as e:
        total_time = time.time() - search_start
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
        fallback_context = "Ukido - –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ soft skills –¥–ª—è –¥–µ—Ç–µ–π. –ö—É—Ä—Å—ã: '–Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä' (7-10 –ª–µ—Ç, 6000 –≥—Ä–Ω/–º–µ—Å), '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å' (9-12 –ª–µ—Ç, 7500 –≥—Ä–Ω/–º–µ—Å), '–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤' (11-14 –ª–µ—Ç, 8000 –≥—Ä–Ω/–º–µ—Å)."
        metrics = {"search_time": round(total_time, 2), "error": str(e), "fallback_used": True, "chunks_found": 1, "success": False}
        return fallback_context, metrics

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–´–ó–û–í–ê MISTRAL –ß–ï–†–ï–ó OPENROUTER ---
def call_mistral(prompt):
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "mistralai/mistral-7b-instruct",
                "messages": [{"role": "user", "content": prompt}]
            }
        )
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Mistral: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞."

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–û–í (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø) ---
def generate_response(chat_id, user_message, is_test_mode=False):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG –∏ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤, —Å–æ–∑–¥–∞–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ messages."""
    start_time = time.time()
    facts_context, rag_metrics = get_facts_from_rag(user_message)
    history_list = get_conversation_history(chat_id)

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Mistral ---
    history_context = "\n".join(history_list) if history_list else "–≠—Ç–æ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."
    full_prompt = f"{BASE_PROMPT}\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history_context}\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ Ukido:\n{facts_context}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"

    try:
        llm_start = time.time()
        ai_response = call_mistral(full_prompt)
        llm_time = time.time() - llm_start

        if not is_test_mode and len(history_list) >= 10 and "–ø—Ä–æ–±–Ω—ã–π" not in ai_response.lower():
            base_url = os.environ.get('BASE_URL', 'http://localhost:5000')
            lesson_url = f"{base_url}/lesson?user_id={chat_id}"
            ai_response += f"\n\nüéØ –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞—à—É –º–µ—Ç–æ–¥–∏–∫—É –≤ –¥–µ–π—Å—Ç–≤–∏–∏? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: {lesson_url}"

        if not is_test_mode:
            update_conversation_history(chat_id, user_message, ai_response)

        total_time = time.time() - start_time

        response_metrics = {
            "total_time": round(total_time, 2), "llm_time": round(llm_time, 2),
            "rag_metrics": rag_metrics, "history_length": len(history_list),
            "redis_available": redis_available, "pinecone_available": pinecone_available
        }
        return ai_response, response_metrics

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_response: {e}")
        error_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        return error_response, {"error": str(e), "total_time": time.time() - start_time}

# --- –†–ê–°–®–ò–†–ï–ù–ù–´–ï –¢–ï–°–¢–û–í–´–ï –í–û–ü–†–û–°–´ –î–õ–Ø –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–û–ì–û –î–ò–ê–õ–û–ì–ê (25 –í–û–ü–†–û–°–û–í) ---
TEST_QUESTIONS = [
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ.",
    "–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã —É –≤–∞—Å –µ—Å—Ç—å –∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞?",
    "–í —á–µ–º –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö —à–∫–æ–ª —Ä–∞–∑–≤–∏—Ç–∏—è?",
    "–ö–∞–∫–∞—è –º–∏—Å—Å–∏—è —É –≤–∞—à–µ–π —à–∫–æ–ª—ã?",
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2: –ì–ª—É–±–æ–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—É—Ä—Å–∞—Ö –∏ –º–µ—Ç–æ–¥–∏–∫–µ
    "–†–∞—Å—Å–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫—É—Ä—Å–∞ '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å'.",
    "–ö—Ç–æ —Ç–∞–∫–æ–π –î–º–∏—Ç—Ä–∏–π –ü–µ—Ç—Ä–æ–≤ –∏ –ø–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –µ–º—É –¥–æ–≤–µ—Ä—è—Ç—å?",
    "–ù–∞ —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤–∞—à–∞ –º–µ—Ç–æ–¥–∏–∫–∞ '–ü—Ä–∞–∫—Ç–∏–∫–∞ + –ò–≥—Ä–∞ + –†–µ—Ñ–ª–µ–∫—Å–∏—è'?",
    "–ö–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–µ–ª–∞–ª–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ –∫—É—Ä—Å–∞ '–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤'?",
    "–ú–æ–π —Ä–µ–±–µ–Ω–æ–∫ –æ—á–µ–Ω—å –∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –µ–º—É —É –≤–∞—Å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è?",
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 3: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ? –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –∏ —Å–∫–∏–¥–æ–∫.",
    "–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞–Ω—è—Ç–∏–π? –ú–æ–∂–Ω–æ –ª–∏ –µ–≥–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–µ–±—è?",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –º—ã –ø—Ä–æ–ø—É—Å—Ç–∏–º –∑–∞–Ω—è—Ç–∏–µ?",
    "–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –¥–ª—è —É—Ä–æ–∫–æ–≤?",
    "–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –Ω–∞–º –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç?",
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∫—É—Ä—Å –¥–ª—è —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö, '–Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä'. –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–º.",
    "–ê —Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ –Ω–∞ —ç—Ç–æ–º –∫—É—Ä—Å–µ?",
    "–ö—Ç–æ –µ–≥–æ –≤–µ–¥–µ—Ç?",
    "–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞?",
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 5: –°–ª–æ–∂–Ω—ã–µ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    "–Ø —Å—Ä–∞–≤–Ω–∏–≤–∞—é –≤–∞—Å —Å–æ —à–∫–æ–ª–æ–π '–°—É–ø–µ—Ä–ú–æ–∑–≥'. –ß–µ–º –≤—ã –ª—É—á—à–µ?",
    "–•–æ—Ä–æ—à–æ, –∑–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ö–∞–∫ –Ω–∞–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
    "–ê —á—Ç–æ, –µ—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞—Ö–æ—á–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞?",
    "–ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã –¥–∞–µ—Ç–µ?",
    "–û–∫–µ–π, —è –≥–æ—Ç–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫. –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?",
    "–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥, –ø–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ Ukido –¥–ª—è —Å–≤–æ–µ–≥–æ 8-–ª–µ—Ç–Ω–µ–≥–æ —Å—ã–Ω–∞?",
    "–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏?"
]
latest_test_results = {"timestamp": None, "tests": [], "summary": {}}

# --- HUBSPOT –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ---
def send_to_hubspot(user_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HubSpot CRM"""
    hubspot_url = "https://api.hubapi.com/crm/v3/objects/contacts"
    headers = {"Authorization": f"Bearer {HUBSPOT_API_KEY}", "Content-Type": "application/json"}
    contact_data = {"properties": {
        "firstname": user_data["firstName"], "lastname": user_data["lastName"],
        "email": user_data["email"], "telegram_user_id": str(user_data.get("userId", ""))
    }}
    try:
        response = requests.post(hubspot_url, headers=headers, json=contact_data)
        if response.status_code == 201:
            print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ HubSpot!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HubSpot API: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ HubSpot: {str(e)}")
        return False

# --- –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï FLASK ---
app = Flask(__name__)

def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    for attempt in range(3):
        try:
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True
            print(f"‚ö†Ô∏è Telegram API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {e}")
        if attempt < 2: time.sleep(1)
    return False

# --- –ú–ê–†–®–†–£–¢–´ FLASK ---
@app.route('/lesson')
def show_lesson_page():
    user_id = request.args.get('user_id')
    return render_template('lesson.html', user_id=user_id)

@app.route('/', methods=['POST'])
def webhook():
    update = request.get_json()
    if "message" in update and "text" in update["message"]:
        chat_id = update["message"]["chat"]["id"]
        received_text = update["message"]["text"]
        ai_response, metrics = generate_response(chat_id, received_text)
        send_telegram_message(chat_id, ai_response)
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {chat_id}: {metrics.get('total_time', 'N/A')}—Å")
    return "ok", 200

@app.route('/test-rag')
def test_rag_system():
    global latest_test_results
    print("\n" + "="*60 + "\nüß™ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –° MISTRAL\n" + "="*60)
    test_chat_id = "test_user_session"
    if redis_available:
        try:
            redis_client.delete(f"history:{test_chat_id}", f"metadata:{test_chat_id}")
        except: pass
    if test_chat_id in fallback_memory: del fallback_memory[test_chat_id]
    
    total_test_start = time.time()
    latest_test_results = {"timestamp": datetime.now().isoformat(), "tests": [], "summary": {}}
    
    for i, question in enumerate(TEST_QUESTIONS, 1):
        print(f"\nüß™ === –¢–ï–°–¢ ‚Ññ{i}/25 –° MISTRAL ===")
        print(f"‚ùì –í–û–ü–†–û–°: {question}")
        response, metrics = generate_response(test_chat_id, question, is_test_mode=True)
        rag_metrics = metrics.get('rag_metrics', {})
        test_result = {
            "question_number": i, "question": question, "response": response,
            "metrics": metrics, "rag_success": rag_metrics.get('success', False),
            "search_time": rag_metrics.get('search_time', 0),
            "chunks_found": rag_metrics.get('chunks_found', 0),
            "best_score": rag_metrics.get('best_score', 0),
            "relevance_desc": rag_metrics.get('relevance_desc', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        }
        latest_test_results["tests"].append(test_result)
        
        if rag_metrics.get('success', False):
            print(f"üîç –ü–û–ò–°–ö: {rag_metrics['search_time']}—Å, –ù–∞–π–¥–µ–Ω–æ: {rag_metrics['chunks_found']}, Score: {rag_metrics['best_score']} ({rag_metrics['relevance_desc']})")
        else:
            print(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° PINECONE: {rag_metrics.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print(f"ü§ñ –û–¢–í–ï–¢ MISTRAL: {response}")
        print(f"‚úÖ –ú–ï–¢–†–ò–ö–ò: –û–±—â–µ–µ –≤—Ä–µ–º—è: {metrics['total_time']}—Å, –í—Ä–µ–º—è LLM: {metrics['llm_time']}—Å, –ò—Å—Ç–æ—Ä–∏—è: {metrics['history_length']} —Å—Ç—Ä–æ–∫")
        print("="*50)
        time.sleep(1) # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã OpenRouter
    
    total_test_time = time.time() - total_test_start
    latest_test_results["summary"] = {
        "total_time": round(total_test_time, 2), "avg_time_per_question": round(total_test_time/25, 2),
        "redis_status": "available" if redis_available else "unavailable",
        "pinecone_status": "available" if pinecone_available else "unavailable",
        "questions_tested": 25
    }
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_test_time:.1f}—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ /test-results –∏ /test-results-json")
    return latest_test_results, 200

@app.route('/test-results')
def show_test_results():
    if not latest_test_results["tests"]:
        return "<h1>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å. –ó–∞–ø—É—Å—Ç–∏—Ç–µ <a href='/test-rag'>/test-rag</a></h1>"
    
    summary = latest_test_results['summary']
    redis_class = "good" if summary['redis_status'] == 'available' else 'error'
    pinecone_class = "good" if summary['pinecone_status'] == 'available' else 'error'
    
    tests_html = ""
    for test in latest_test_results["tests"]:
        rag_class = "good" if test["rag_success"] else "error"
        tests_html += f"""
        <div class="test">
            <div class="question">‚ùì –í–æ–ø—Ä–æ—Å ‚Ññ{test['question_number']}: {test['question']}</div>
            <div class="metrics"><strong>üîç RAG:</strong> <span class="{rag_class}">{'–£—Å–ø–µ—à–Ω–æ' if test["rag_success"] else '–û—à–∏–±–∫–∞'}</span> | –í—Ä–µ–º—è: {test['search_time']}—Å | –ß–∞–Ω–∫–æ–≤: {test['chunks_found']} | Score: {test['best_score']} ({test['relevance_desc']})</div>
            <div class="response"><strong>ü§ñ –û—Ç–≤–µ—Ç MISTRAL:</strong><br>{test['response'].replace('\n', '<br>')}</div>
            <div class="metrics"><strong>‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è:</strong> {test['metrics']['total_time']}—Å | <strong>üß† –í—Ä–µ–º—è LLM:</strong> {test['metrics']['llm_time']}—Å | <strong>üíæ –ò—Å—Ç–æ—Ä–∏—è:</strong> {test['metrics']['history_length']} —Å—Ç—Ä–æ–∫</div>
        </div>"""
    
    return render_template('results.html', summary=summary, tests_html=tests_html, redis_class=redis_class, pinecone_class=pinecone_class)

@app.route('/test-results-json')
def get_test_results_json():
    if not latest_test_results["tests"]:
        return {"error": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å", "hint": "–ó–∞–ø—É—Å—Ç–∏—Ç–µ /test-rag —Å–Ω–∞—á–∞–ª–∞"}, 404
    return latest_test_results, 200

# –ö–æ–¥ –¥–ª—è HubSpot webhook –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
# –Ø –µ–≥–æ —Å–∫—Ä—ã–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ
@app.route('/submit-lesson-form', methods=['POST'])
def submit_lesson_form():
    form_data = request.get_json()
    print(f"=== –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {form_data.get('firstName')} {form_data.get('lastName')} ===")
    hubspot_success = send_to_hubspot(form_data)
    return {"success": hubspot_success}, 200

@app.route('/hubspot-webhook', methods=['POST'])
def hubspot_webhook():
    try:
        webhook_data = request.get_json()
        properties = webhook_data.get('properties', {})
        first_name = properties.get('firstname', {}).get('value', '–¥—Ä—É–≥')
        telegram_id = properties.get('telegram_user_id', {}).get('value')
        message_type = request.args.get('message_type', 'first_follow_up')
        
        if telegram_id:
            message_generators = {
                'first_follow_up': f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –ö–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç —É—Ä–æ–∫–∞? –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
                'second_follow_up': f"üåü {first_name}, –Ω–µ —Ö–æ—á—É –±—ã—Ç—å –Ω–∞–≤—è–∑—á–∏–≤—ã–º, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –ì–æ—Ç–æ–≤—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ? –ó–∞–ø–∏—à–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"
            }
            message_to_send = message_generators.get(message_type)
            if message_to_send:
                send_telegram_message(telegram_id, message_to_send)
                print(f"‚úÖ Follow-up '{message_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_id}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω telegram_user_id –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        return "OK", 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HubSpot webhook: {e}")
        return "Error", 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug_mode = os.environ.get('DEBUG', 'false').lower() == 'true'
    print("="*60 + f"\nüöÄ –ó–ê–ü–£–°–ö UKIDO AI ASSISTANT –° MISTRAL\n" + "="*60)
    app.run(debug=debug_mode, port=port, host='0.0.0.0')