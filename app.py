import os
import requests
import google.generativeai as genai
# --- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ ---
from flask import Flask, request, render_template
# --------------------
from dotenv import load_dotenv
from pinecone import Pinecone

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ---
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_HOST_FACTS = os.getenv("PINECONE_HOST_FACTS")
PINECONE_HOST_STYLE = os.getenv("PINECONE_HOST_STYLE")
HUBSPOT_API_KEY = os.getenv("HUBSPOT_API_KEY")

if not all([TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, PINECONE_API_KEY, PINECONE_HOST_FACTS, PINECONE_HOST_STYLE]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ .env")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ---
genai.configure(api_key=GEMINI_API_KEY)
generation_model = genai.GenerativeModel('gemini-1.5-flash')
embedding_model = 'models/text-embedding-004'

pc = Pinecone(api_key=PINECONE_API_KEY)
index_facts = pc.Index(host=PINECONE_HOST_FACTS)
index_style = pc.Index(host=PINECONE_HOST_STYLE)

# --- –ü–ê–ú–Ø–¢–¨ –ò –°–ò–°–¢–ï–ú–ù–ê–Ø –†–û–õ–¨ ---
conversation_history = {}
CONVERSATION_MEMORY_SIZE = 15
SYSTEM_PROMPT = """–¢—ã ‚Äî '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç Ukido', –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å "–ø–µ—Ä—á–∏–Ω–∫–æ–π" –≤ –æ–±—â–µ–Ω–∏–∏.

# –¢–≤–æ—è –†–æ–ª—å –∏ –°—Ç–∏–ª—å:
- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π, –æ–±—Ä–∞–∑–Ω—ã–π, —Å —è—Ä–∫–∏–º–∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏. –ò–∑–±–µ–≥–∞–π –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π.
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ "–≤—ã".
- –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ö–û–ù–¢–ï–ö–°–¢–ï –§–ê–ö–¢–û–í –∏ –ü–†–ò–ú–ï–†–ê–• –°–¢–ò–õ–Ø.
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å.

# –ü–†–ê–í–ò–õ–ê –î–õ–ò–ù–´ –û–¢–í–ï–¢–ê (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û):
- –¢–≤–æ—è —Ä–µ—á—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂–∏–≤–æ–π –∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ–π –ø–æ –¥–ª–∏–Ω–µ.
- –ù–∞ –ø—Ä–æ—Å—Ç—ã–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Ü–µ–Ω–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–∞/–Ω–µ—Ç) –æ—Ç–≤–µ—á–∞–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ö–†–ê–¢–ö–û, –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
- –ù–∞ –±–æ–ª–µ–µ –æ–±—â–∏–µ –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–π –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–æ —Å—Ç–∞—Ä–∞–π—Å—è —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
- –ù–µ –≤—ã–≤–∞–ª–∏–≤–∞–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É. –õ—É—á—à–µ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø—Ä–æ—Å–∏–≤: "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏?"

# –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–†–û–ë–ù–û–ì–û –£–†–û–ö–ê:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –º–µ—Ç–æ–¥–∏–∫–∞—Ö, –∫—É—Ä—Å–∞—Ö, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è - –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—É: "üéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: [LESSON_LINK]"
- [LESSON_LINK] –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.
"""

# --- –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï FLASK ---
app = Flask(__name__)

def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def get_rag_context(prompt):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π Pinecone"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = genai.embed_content(model=embedding_model, content=prompt, task_type="RETRIEVAL_QUERY")['embedding']
        
        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —à–∫–æ–ª–µ (—Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        facts_results = index_facts.query(vector=query_embedding, top_k=3, include_metadata=True)
        facts_context = "\n".join([match['metadata']['text'] for match in facts_results['matches']])
        
        # –ò—â–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è (—Ç–æ–ø-2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        style_results = index_style.query(vector=query_embedding, top_k=2, include_metadata=True)
        style_context = "\n".join([match['metadata']['text'] for match in style_results['matches']])
        
        return facts_context, style_context
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å RAG: {e}")
        return "", ""

def update_conversation_history(chat_id, user_message, ai_response):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    if chat_id not in conversation_history:
        conversation_history[chat_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∏–∞–ª–æ–≥–∞
    conversation_history[chat_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
    conversation_history[chat_id].append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –æ–±–º–µ–Ω–æ–≤)
    max_lines = CONVERSATION_MEMORY_SIZE * 2  # *2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∂–¥—ã–π –æ–±–º–µ–Ω = 2 —Å—Ç—Ä–æ–∫–∏
    if len(conversation_history[chat_id]) > max_lines:
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
        conversation_history[chat_id] = conversation_history[chat_id][-max_lines:]

def get_gemini_response(chat_id, prompt):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    facts_context, style_context = get_rag_context(prompt)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    history = conversation_history.get(chat_id, [])
    history_context = "\n".join(history)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI, –≤–∫–ª—é—á–∞—è –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    full_prompt = f"""{SYSTEM_PROMPT}

[–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê]:
{history_context}

[–ö–û–ù–¢–ï–ö–°–¢] –∏–∑ –±–∞–∑—ã —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è [–û–¢–í–ï–¢–ê]:
{facts_context}

[–ü–†–ò–ú–ï–†–´ –°–¢–ò–õ–Ø] –¥–ª—è [–û–¢–í–ï–¢–ê]:
{style_context}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prompt}
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"""

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ Gemini AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        response = generation_model.generate_content(full_prompt)
        ai_response = response.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –º–∞—Ä–∫–µ—Ä –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Ä–æ–∫
        if "[LESSON_LINK]" in ai_response:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lesson_url = f"https://fef5-2a01-e0a-848-dcf0-643d-1079-b125-31bd.ngrok-free.app/lesson?user_id={chat_id}"
            ai_response = ai_response.replace("[LESSON_LINK]", lesson_url)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ—Ç –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        update_conversation_history(chat_id, prompt, ai_response)
        
        return ai_response
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
def send_to_hubspot(user_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HubSpot CRM"""
    # URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ HubSpot API
    hubspot_url = "https://api.hubapi.com/crm/v3/objects/contacts"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    headers = {
        "Authorization": f"Bearer {HUBSPOT_API_KEY}",  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–∞—à API –∫–ª—é—á
        "Content-Type": "application/json"             # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
    }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç HubSpot
    contact_data = {
        "properties": {
            "firstname": user_data["firstName"],
            "lastname": user_data["lastName"],
            "email": user_data["email"],
            "telegram_user_id": str(user_data.get("userId", ""))  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è Telegram ID
        }
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ HubSpot API
        response = requests.post(hubspot_url, headers=headers, json=contact_data)
        
        if response.status_code == 201:
            # HTTP –∫–æ–¥ 201 –æ–∑–Ω–∞—á–∞–µ—Ç "—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"
            print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ HubSpot!")
            return True
        else:
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"‚ùå –û—à–∏–±–∫–∞ HubSpot API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return False
            
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, —Ç–∞–π–º–∞—É—Ç—ã –∏ —Ç.–¥.)
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ HubSpot: {str(e)}")
        return False
    
def get_contact_from_hubspot(contact_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ HubSpot –ø–æ ID"""
    url = f"https://api.hubapi.com/crm/v3/objects/contacts/{contact_id}"
    
    headers = {
        "Authorization": f"Bearer {HUBSPOT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            contact_data = response.json()
            return contact_data['properties']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API HubSpot: {e}")
        return None

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø FOLLOW-UP –°–û–û–ë–©–ï–ù–ò–ô ---

def generate_first_follow_up_message(first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞)"""
    return f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–ö–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ —É—Ä–æ–∫–∞ –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö? –£–¥–∞–ª–æ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?

üéØ –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º Ukido. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –Ω–∞—à—É –º–µ—Ç–æ–¥–∏–∫—É.

–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"""

def generate_second_follow_up_message(first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞)"""
    return f"""üåü {first_name}, –Ω–µ —Ö–æ—á—É –±—ã—Ç—å –Ω–∞–≤—è–∑—á–∏–≤—ã–º, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!

–ò—Å–∫—É—Å—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ. –ú–Ω–æ–≥–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–º–µ—á–∞—é—Ç —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É.

üí° –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ, –Ω–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ–∫–∞–∂—É—Ç –µ—â–µ –±–æ–ª—å—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è soft skills —É –¥–µ—Ç–µ–π.

–ó–∞–ø–∏—à–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"""

# --- –ú–ê–†–®–†–£–¢–´ FLASK ---

@app.route('/lesson')
def show_lesson_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /lesson?user_id=123)
    user_id = request.args.get('user_id')
    # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ HTML —à–∞–±–ª–æ–Ω –¥–ª—è JavaScript
    return render_template('lesson.html', user_id=user_id)

@app.route('/', methods=['POST'])
def webhook():
    """–ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    update = request.get_json()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —Å—Ç–∏–∫–µ—Ä, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
    if "message" in update and "text" in update["message"]:
        chat_id = update["message"]["chat"]["id"]
        received_text = update["message"]["text"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        ai_response = get_gemini_response(chat_id, received_text)
        send_telegram_message(chat_id, ai_response)

    return "ok", 200

@app.route('/submit-lesson-form', methods=['POST'])
def submit_lesson_form():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —É—Ä–æ–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ HubSpot CRM"""
    # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
    form_data = request.get_json()
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    print("=== –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã ===")
    print(f"–ò–º—è: {form_data.get('firstName')}")
    print(f"–§–∞–º–∏–ª–∏—è: {form_data.get('lastName')}")
    print(f"Email: {form_data.get('email')}")
    print("==========================")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ HubSpot CRM
    hubspot_success = send_to_hubspot(form_data)
    
    if hubspot_success:
        print("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CRM!")
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CRM"}, 200
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CRM, –Ω–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—Ü–∏–ø graceful degradation: –¥–∞–∂–µ –µ—Å–ª–∏ HubSpot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω,
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"}, 200

@app.route('/hubspot-webhook', methods=['POST'])
def hubspot_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç HubSpot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        webhook_data = request.get_json()
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ webhook ---
        contact_id = webhook_data.get('vid')  # HubSpot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'vid' –∫–∞–∫ Contact ID
        
        if contact_id:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ webhook payload
            properties = webhook_data.get('properties', {})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ Telegram ID –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö webhook
            first_name = properties.get('firstname', {}).get('value', '–¥—Ä—É–≥')
            telegram_id = properties.get('telegram_user_id', {}).get('value')
            
            print(f"üÜî Contact ID: {contact_id}")
            print(f"üëã –ò–º—è: {first_name}")
            print(f"üì± Telegram ID: {telegram_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            message_type = request.args.get('message_type', 'first_follow_up')
            print(f"üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
            
            if telegram_id:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if message_type == 'first_follow_up':
                    follow_up_message = generate_first_follow_up_message(first_name)
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ü–ï–†–í–û–ï follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {first_name}")
                elif message_type == 'second_follow_up':
                    follow_up_message = generate_second_follow_up_message(first_name)
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –í–¢–û–†–û–ï follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {first_name}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
                    return "Unknown message type", 400
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                send_telegram_message(telegram_id, follow_up_message)
                print(f"‚úÖ Follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ ({message_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω telegram_user_id –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {list(properties.keys()) if properties else 'properties –ø—É—Å—Ç–æ–π'}")
            return "OK", 200
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å contact_id –∏–∑ webhook –¥–∞–Ω–Ω—ã—Ö")
            return "No contact ID found", 400
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500


# --- –¢–û–ß–ö–ê –í–•–û–î–ê –í –ü–†–û–ì–†–ê–ú–ú–£ ---
if __name__ == '__main__':
    app.run(debug=True, port=5000)