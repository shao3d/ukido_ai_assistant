# app.py
"""
‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø v3: RAG-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ú–∞—à–∏–Ω–æ–π –°–æ—Å—Ç–æ—è–Ω–∏–π.
- –ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ LlamaIndex.
- –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω [ACTION:SEND_LESSON_LINK].
"""

import logging
import time
import threading
import atexit
import os
from concurrent.futures import ThreadPoolExecutor
from flask import Flask, request
from typing import Dict, Any, Optional, List
import requests

from config import config
from telegram_bot import telegram_bot
from conversation import conversation_manager
from hubspot_client import hubspot_client
from llamaindex_rag import llama_index_rag

try:
    from rag_debug_logger import rag_debug
    DEBUG_LOGGING_ENABLED = True
except ImportError:
    DEBUG_LOGGING_ENABLED = False
    print("Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - rag_debug_logger –Ω–µ –Ω–∞–π–¥–µ–Ω")


class ProductionConnectionPool:
    def __init__(self):
        self.session = requests.Session()
        self.logger = logging.getLogger(f"{__name__}.ConnectionPool")
        adapter = requests.adapters.HTTPAdapter(pool_connections=10, pool_maxsize=20, max_retries=3)
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)
        atexit.register(self.cleanup)
        self.logger.info("üîó Production connection pool –≥–æ—Ç–æ–≤")
    def post(self, *args, **kwargs): return self.session.post(*args, **kwargs)
    def get(self, *args, **kwargs): return self.session.get(*args, **kwargs)
    def cleanup(self): self.session.close(); self.logger.info("üîó Connection pool –∑–∞–∫—Ä—ã—Ç")


class ProductionFastResponseCache:
    def __init__(self):
        self.fast_responses = {
            '—Ü–µ–Ω–∞': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç': "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '–ø—Ä–æ–±–Ω—ã–π': "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ —É –Ω–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π.",
            '—É—Ä–æ–∫': "–£ –Ω–∞—Å –µ—Å—Ç—å –∫—É—Ä—Å—ã soft-skills –¥–ª—è –¥–µ—Ç–µ–π 7-17 –ª–µ—Ç. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!",
            '–≤–æ–∑—Ä–∞—Å—Ç': "–ö—É—Ä—Å—ã –¥–ª—è –¥–µ—Ç–µ–π 7-17 –ª–µ—Ç, –≥—Ä—É–ø–ø—ã: 7-9, 10-12, 13-17 –ª–µ—Ç.",
            '–≤—Ä–µ–º—è': "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±–∫–æ–µ, –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–¥ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
            '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è': "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫.",
        }
        self.logger = logging.getLogger(f"{__name__}.FastCache")
        self.logger.info("üí® Fast response cache –≥–æ—Ç–æ–≤")
    def get_fast_response(self, message: str, chat_id: str) -> Optional[str]:
        message_lower = message.lower().strip()
        for keyword, response in self.fast_responses.items():
            if keyword in message_lower:
                if keyword in ['–ø—Ä–æ–±–Ω—ã–π', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è']:
                    lesson_link = config.get_lesson_url(user_id=chat_id)
                    return f"{response}\n\nüîó {lesson_link}"
                return response
        return None


class ProductionAIService:
    """
    ‚úÖ Production-ready AI —Å–µ—Ä–≤–∏—Å v3 —Å –ú–∞—à–∏–Ω–æ–π –°–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.connection_pool = ProductionConnectionPool()
        self.fast_response_cache = ProductionFastResponseCache()
        self.executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="UkidoAI")
        self.performance_stats = {'total_requests': 0, 'fast_responses': 0, 'avg_response_time': 0}
        self.stats_lock = threading.Lock()
        
        if not llama_index_rag:
            raise RuntimeError("LlamaIndex RAG failed to initialize")
        
        self.logger.info("üöÄ ProductionAIService (v3, —Å –ú–∞—à–∏–Ω–æ–π –°–æ—Å—Ç–æ—è–Ω–∏–π) –≥–æ—Ç–æ–≤")

    def process_user_message(self, user_message: str, chat_id: str) -> str:
        start_time = time.time()
        
        if DEBUG_LOGGING_ENABLED:
            rag_debug.start_session(chat_id, user_message)
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º fast response
            fast_response = self.fast_response_cache.get_fast_response(user_message, chat_id)
            if fast_response:
                # ... (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
                self.logger.info(f"‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {chat_id}")
                return fast_response

            # 2. ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ò –ò–°–¢–û–†–ò–Æ
            current_state = conversation_manager.get_dialogue_state(chat_id)
            conversation_history = conversation_manager.get_conversation_history(chat_id)
            
            # 3. –í—ã–∑—ã–≤–∞–µ–º LlamaIndex –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ì–û–¢–û–í–û–ì–û –æ—Ç–≤–µ—Ç–∞, –ü–ï–†–ï–î–ê–í–ê–Ø –°–û–°–¢–û–Ø–ù–ò–ï
            if not llama_index_rag:
                 raise RuntimeError("LlamaIndex RAG –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")

            final_response, rag_metrics = llama_index_rag.search_and_answer(
                query=user_message,
                conversation_history=conversation_history,
                current_state=current_state
            )
            
            # 4. –ó–ê–©–ò–¢–ê –ò–°–¢–û–†–ò–ò: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            is_error_response = "–æ—à–∏–±–∫–∞" in final_response.lower()

            if not is_error_response:
                # 5. ‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –¢–û–ö–ï–ù –î–ï–ô–°–¢–í–ò–Ø
                processed_response = self._process_action_tokens(final_response, chat_id)
                
                # 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¢–û–õ–¨–ö–û —É—Å–ø–µ—à–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                conversation_manager.update_conversation_history(chat_id, user_message, processed_response)

                # 7. ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
                new_state = conversation_manager.analyze_message_for_state_transition(user_message, current_state)
                if new_state != current_state:
                    conversation_manager.set_dialogue_state(chat_id, new_state)
                    self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {chat_id} –∏–∑–º–µ–Ω–µ–Ω–æ: {current_state} -> {new_state}")
                
                final_response = processed_response
            else:
                 self.logger.warning(f"‚ùóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é: '{final_response}'")

            # ... (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) ...
            
            self.logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è {chat_id} –∑–∞ {(time.time() - start_time):.3f}s")
            return final_response
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞."

    def _process_action_tokens(self, response: str, chat_id: str) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ [ACTION:SEND_LESSON_LINK]"""
        if "[ACTION:SEND_LESSON_LINK]" in response:
            lesson_link = config.get_lesson_url(user_id=chat_id)
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω—è—é—â–∏–π —Ç–µ–∫—Å—Ç
            response = response.replace(
                "[ACTION:SEND_LESSON_LINK]", 
                f"\n\n–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫:\nüîó {lesson_link}"
            ).strip()
        
        return response

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –∏ –∫–æ–¥ Flask –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...


# === –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
production_ai_service = ProductionAIService()
app = Flask(__name__)

@app.route('/', methods=['POST', 'GET'])
def handle_telegram_webhook():
    if request.method == 'GET':
        return "Ukido AI Assistant (RAG v3, State Machine) is running! üöÄ", 200
    try:
        update = request.get_json()
        if 'message' in update and 'text' in update['message']:
            message = update['message']
            chat_id = str(message['chat']['id'])
            user_message = message['text']
            threading.Thread(target=process_and_send, args=(user_message, chat_id)).start()
        return "OK", 200
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return "Error", 500

def process_and_send(user_message, chat_id):
    bot_response = production_ai_service.process_user_message(user_message, chat_id)
    telegram_bot.send_message(chat_id, bot_response)

@app.route('/test-message', methods=['POST'])
def test_message_endpoint():
    try:
        data = request.get_json()
        user_message = data.get('message', '')
        user_id = data.get('user_id', 'test_user')
        start_time = time.time()
        bot_response = production_ai_service.process_user_message(user_message, user_id)
        response_time = time.time() - start_time
        return {'bot_response': bot_response, 'response_time': response_time, 'status': 'success'}, 200
    except Exception as e:
        return {'error': str(e)}, 500

@app.route('/clear-memory', methods=['POST'])
def clear_memory():
    try:
        from conversation import conversation_manager
        conversation_manager.clear_all_conversations()
        return {"status": "success", "message": "Memory cleared"}, 200
    except Exception as e:
        return {"error": str(e)}, 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)