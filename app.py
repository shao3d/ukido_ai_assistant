import os
import requests
import google.generativeai as genai
from flask import Flask, request, render_template
from dotenv import load_dotenv
from pinecone import Pinecone
import redis # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç Redis

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ---
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_HOST_FACTS = os.getenv("PINECONE_HOST_FACTS")
HUBSPOT_API_KEY = os.getenv("HUBSPOT_API_KEY")
REDIS_URL = os.getenv("REDIS_URL") # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Redis

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è Redis
if not all([TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, PINECONE_API_KEY, PINECONE_HOST_FACTS, HUBSPOT_API_KEY, REDIS_URL]):
    required_vars = {
        'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN,
        'GEMINI_API_KEY': GEMINI_API_KEY, 
        'PINECONE_API_KEY': PINECONE_API_KEY,
        'PINECONE_HOST_FACTS': PINECONE_HOST_FACTS,
        'HUBSPOT_API_KEY': HUBSPOT_API_KEY,
        'REDIS_URL': REDIS_URL # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ –≤ –ø—Ä–æ–≤–µ—Ä–∫—É
    }
    missing_vars = [name for name, value in required_vars.items() if not value]
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ---
genai.configure(api_key=GEMINI_API_KEY)
generation_model = genai.GenerativeModel('gemini-1.5-flash')
embedding_model = 'models/text-embedding-004'

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–ß–ê–õ–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Redis >>>
try:
    print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis client...")
    # decode_responses=True —á—Ç–æ–±—ã Redis –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ –±–∞–π—Ç—ã
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    redis_client.ping()
    print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
    raise e
# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–ù–ï–¶ >>>

def get_pinecone_index():
    """
    –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Pinecone Facts
    """
    if not hasattr(get_pinecone_index, 'initialized'):
        try:
            print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone client...")
            pc = Pinecone(api_key=PINECONE_API_KEY)
            facts_description = pc.describe_index("ukido")
            print(f"üîç Facts –∏–Ω–¥–µ–∫—Å host: {facts_description.host}")
            get_pinecone_index.pc = pc
            get_pinecone_index.index_facts = pc.Index(host=facts_description.host)
            get_pinecone_index.initialized = True
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Pinecone Facts –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinecone: {e}")
            raise e
    return get_pinecone_index.index_facts

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–ß–ê–õ–û: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤ Redis >>>
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è conversation_history –£–î–ê–õ–ï–ù–ê
CONVERSATION_MEMORY_SIZE = 9  # –ë–æ—Ç –ø–æ–º–Ω–∏—Ç 9 –æ–±–º–µ–Ω–æ–≤
CONVERSATION_EXPIRATION_SECONDS = 3600 # –•—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ 1 —á–∞—Å

def get_conversation_history_from_redis(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ Redis."""
    history_key = f"history:{chat_id}"
    # lrange –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞. –û–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º.
    history_list = redis_client.lrange(history_key, 0, -1)
    history_list.reverse()
    return history_list

def update_conversation_history_in_redis(chat_id, user_message, ai_response):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ Redis –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    history_key = f"history:{chat_id}"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ)
    pipe = redis_client.pipeline()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (lpush)
    pipe.lpush(history_key, f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
    pipe.lpush(history_key, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª –∑–∞–¥–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    max_lines = CONVERSATION_MEMORY_SIZE * 2
    pipe.ltrim(history_key, 0, max_lines - 1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–ª—è –∫–ª—é—á–∞, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–ª–∏—Å—å
    pipe.expire(history_key, CONVERSATION_EXPIRATION_SECONDS)
    
    pipe.execute()
# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–ù–ï–¶ >>>


# --- –û–ë–û–ì–ê–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–ü–¢–û–í –°–û –°–¢–ò–õ–ï–ú –ñ–í–ê–ù–ï–¶–ö–û–ì–û ---
# ... (–≤–µ—Å—å –≤–∞—à –±–ª–æ–∫ STYLE_MODULES –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
# ... (analyze_request_type, should_add_lesson_link, create_enriched_prompt, get_facts_context) ...
BASE_PROMPT = """–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π —à–∫–æ–ª—ã soft skills –¥–ª—è –¥–µ—Ç–µ–π "Ukido". –û—Ç–≤–µ—á–∞–π –Ω–∞ "–≤—ã" —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. –û–±—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –¥–µ—Ç–µ–π —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞."""
STYLE_MODULES = {
    "informational": """–ú–ê–ö–°–ò–ú–£–ú 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–∞–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ç–∫–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ.
–î–æ–±–∞–≤—å –û–î–ù–£ –ª–µ–≥–∫—É—é –æ–¥–µ—Å—Å–∫—É—é –¥–µ—Ç–∞–ª—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
- "–ù—É —á—Ç–æ –∂, —Ç–∞–∫ —É –Ω–∞—Å" 
- "–ê —á—Ç–æ —Ç—É—Ç —Ç–∞–∫–æ–≥–æ"
- "–í–æ—Ç –∏ –≤—Å–µ –¥–µ–ª–∞"
- "–ù–æ—Ä–º–∞–ª—å–Ω–æ –∂–µ"
- "–ò –≤—Å–µ —Ç—É—Ç"
- "–ß—Ç–æ –ø–æ–¥–µ–ª–∞–µ—à—å"
- "–¢–∞–∫ —É–∂ –∑–∞–≤–µ–¥–µ–Ω–æ"
- "–ö–∞–∫ –µ—Å—Ç—å, —Ç–∞–∫ –µ—Å—Ç—å"
–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û —Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤–æ–≤–∞—Ç—å! –¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã + –ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞.""",

    "trial_lesson": """–î–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π + –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å—Å—ã–ª–∫–∞ [LESSON_LINK]. 
–û–¥–µ—Å—Å–∫–∞—è –ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –æ–±–æ—Ä–æ—Ç–∞–º–∏:
- "–ö–æ–Ω–µ—á–Ω–æ –º–æ–∂–Ω–æ! –ê —á—Ç–æ —Ç—É—Ç —Ç–∞–∫–æ–≥–æ. [LESSON_LINK]"
- "–î–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º: [LESSON_LINK]. –ü–æ–ø—Ä–æ–±—É–µ—Ç–µ - –ø–æ–π–º–µ—Ç–µ"
- "–ù—É –∞ –∫–∞–∫ –∂–µ! [LESSON_LINK] - –≤–æ—Ç —Å—Å—ã–ª–æ—á–∫–∞"
- "–°–∞–º–æ —Å–æ–±–æ–π: [LESSON_LINK]. –î–µ—Ç—è–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è"
- "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ: [LESSON_LINK]. –ê –∑–∞—á–µ–º –±–µ–∑ –ø—Ä–æ–±—ã –ø–æ–∫—É–ø–∞—Ç—å"
- "–†–∞–∑—É–º–µ–µ—Ç—Å—è: [LESSON_LINK]. –°–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏–º, –ø–æ—Ç–æ–º —Ä–µ—à–∞–µ–º"
- "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ: [LESSON_LINK]. –ß—Ç–æ —Ç–µ—Ä—è—Ç—å-—Ç–æ"
–¢–æ–Ω: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.""",

    "consultational": """3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ú–ê–ö–°–ò–ú–£–ú. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ:
1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –û–î–ù–û –∂–∏—Ç–µ–π—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
3. –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—É—Ä—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï —Ä–µ—á–µ–≤—ã–µ –æ–±–æ—Ä–æ—Ç—ã (–≤–∞—Ä—å–∏—Ä—É–π):
- "–ê —á—Ç–æ —Ç—É—Ç –ø–æ–¥–µ–ª–∞–µ—à—å"
- "–°–ª—É—à–∞–π—Ç–µ"
- "–ü–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"
- "–ß–µ–º –±–æ–ª—å—à–µ [–¥–µ–π—Å—Ç–≤–∏–µ], —Ç–µ–º –º–µ–Ω—å—à–µ [—Ä–µ–∑—É–ª—å—Ç–∞—Ç]"
- "–ù—É —á—Ç–æ –∂, –¥–µ—Ç–∏ –æ–Ω–∏ –∏ –µ—Å—Ç—å –¥–µ—Ç–∏"
- "–í–æ—Ç –≤–∞–º –∏ –≤—Å—è –ø—Ä–æ–±–ª–µ–º–∞"
- "–ò —á—Ç–æ –≤ –∏—Ç–æ–≥–µ"
- "–¢–∞–∫–∞—è —É–∂ –∂–∏–∑–Ω—å"

–ö–û–ù–ö–†–ï–¢–ù–´–ï –¥–µ—Ç–∞–ª–∏ (–∫–∞–∫ —É –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ):
- –ù–ï "–ø—Ä–æ–±–ª–µ–º—ã" ‚Üí "–Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è, –æ–≥—Ä—ã–∑–∞–µ—Ç—Å—è, –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ —Ç–æ—Ä—á–∏—Ç –¥–æ –Ω–æ—á–∏"
- –ù–ï "–º–Ω–æ–≥–æ —Ä–∞–∑–≤–∏–≤–∞–µ–º" ‚Üí "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø–∏—Å–∞–ª–∏, —Ç–µ–Ω–Ω–∏—Å, —à–∞—Ö–º–∞—Ç—ã, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ, –µ—â–µ –∏ –∫–∏—Ç–∞–π—Å–∫–∏–π"
- –ó–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è: "—Ç—ã–∫-—Ç—ã–∫ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ", "—Ö–ª–æ–ø –¥–≤–µ—Ä—å—é", "—Ç–æ–ø-—Ç–æ–ø –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É", "–±—É—Ö –Ω–∞ –¥–∏–≤–∞–Ω"
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏: "–¥–æ–º–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç - —Å—Ä–∞–∑—É –∫ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É, –ø–æ—Ç–æ–º –≤ –∫–æ–º–Ω–∞—Ç—É, –¥–≤–µ—Ä—å –∑–∞–∫—Ä—ã–ª"

–í–ê–ñ–ù–û: –Ω–∞—á–∏–Ω–∞–π —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞, –∞ –ù–ï —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π!""",

    "philosophical": """4-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ú–ê–ö–°–ò–ú–£–ú. –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ:
1. –ù–∞—á–Ω–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∂–∏—Ç–µ–π—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
2. –û–¥–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ-–ø–∞—Ä–∞–¥–æ–∫—Å —á–µ—Ä–µ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π  
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –∑–∞—á–∏–Ω—ã (–≤–∞—Ä—å–∏—Ä—É–π):
- "–°–ª—É—à–∞–π—Ç–µ..."
- "–ü–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è..."
- "–í–æ—Ç —Å–º–æ—Ç—Ä–∏—Ç–µ..." 
- "–ê —á—Ç–æ –≤ –∏—Ç–æ–≥–µ..."
- "–°–∫–∞–∂–∏—Ç–µ –Ω–∞ –º–∏–ª–æ—Å—Ç—å..."
- "–í–æ—Ç –≤–∞–º –∫–∞—Ä—Ç–∏–Ω–∫–∞..."

–¢–ï–•–ù–ò–ö–ò –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ:
- –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ "–ò": "–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø–∏—Å–∞–ª–∏, –∏ —Ç–µ–Ω–Ω–∏—Å, –∏ —à–∞—Ö–º–∞—Ç—ã, –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫—É –µ—â–µ"
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: "–∞ —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", "–∞ –≤ –∏—Ç–æ–≥–µ —á—Ç–æ", "–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫–æ–π"
- –ó–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è: "—Ç—ã–∫-—Ç—ã–∫", "—Ö–ª–æ–ø", "–±—É—Ö –Ω–∞ –¥–∏–≤–∞–Ω", "—Ç–æ–ø-—Ç–æ–ø"
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: "–ø–ª–∞–Ω—à–µ—Ç –∫—É–ø–∏–ª–∏ –∑–∞ 15 —Ç—ã—Å—è—á, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–∞–Ω—è–ª–∏ –∑–∞ 500 –≤ —á–∞—Å"

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –∫–æ–Ω—Ü–æ–≤–∫–∏ (–≤–∞—Ä—å–∏—Ä—É–π):
- "–í–æ—Ç –∏ –≤—Å—è –Ω–∞—É–∫–∞"
- "–ê —á—Ç–æ —Ç—É—Ç —Å–∫–∞–∂–µ—à—å" 
- "–ù—É —á—Ç–æ –∂"
- "–¢–∞–∫–∏–µ –¥–µ–ª–∞"
- "–ò –≤—Å–µ —Ç—É—Ç"
- "–í–æ—Ç –≤–∞–º –∏ –≤–µ—Å—å —Å–µ–∫—Ä–µ—Ç"

–ü—Ä–∏–º–µ—Ä: "–°–ª—É—à–∞–π—Ç–µ, –ø–æ–∫—É–ø–∞–µ–º –ø–ª–∞–Ω—à–µ—Ç –∑–∞ 15 —Ç—ã—Å—è—á, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞ 800 –≤ –º–µ—Å—è—Ü, –Ω–∞ —Ç–µ–Ω–Ω–∏—Å –µ—â–µ –∑–∞ 1200 - –∏ —Ç–æ —Ö–æ—Ç–∏–º –ª—É—á—à–µ–µ, –∏ —ç—Ç–æ —Å–∞–º–æ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ. –ê —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - —Å–∏–¥–∏—Ç —Ä–µ–±–µ–Ω–æ–∫, —Ç—ã–∫-—Ç—ã–∫ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –≥–æ–≤–æ—Ä–∏—Ç '–°–∫—É—á–Ω–æ –º–Ω–µ, –≤—Å–µ –Ω–∞–¥–æ–µ–ª–æ'. –ü–æ–Ω–∏–º–∞–µ—Ç–µ, –º—ã –¥—É–º–∞–µ–º - —Å—á–∞—Å—Ç—å–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –∞ –µ–º—É –ø—Ä–æ—Å—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç. –í–æ—Ç –∏ –≤—Å—è –Ω–∞—É–∫–∞ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è.""",

    "sensitive": """–î–ï–õ–ò–ö–ê–¢–ù–´–ô –†–ï–ñ–ò–ú –¥–ª—è –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–º (—Ä–∞–∑–≤–æ–¥, —Å–º–µ—Ä—Ç—å, –±–æ–ª–µ–∑–Ω–∏).
–ú–ê–ö–°–ò–ú–£–ú 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë–ï–ó –∏—Ä–æ–Ω–∏–∏ –∏ —é–º–æ—Ä–∞.
–¢–æ–Ω: —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –º—É–¥—Ä—ã–π.
–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –º—è–≥–∫–∏–µ –æ–±–æ—Ä–æ—Ç—ã:
- "–í —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö..."
- "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ..."
- "–ü–æ–Ω–∏–º–∞—é, –∫–∞–∫ —ç—Ç–æ —Ç—è–∂–µ–ª–æ..."
- "–î–µ—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ç–∞–∫–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º..."
–ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π: "–ê —á—Ç–æ —Ç—É—Ç –ø–æ–¥–µ–ª–∞–µ—à—å", "–ù—É —á—Ç–æ –∂", –∑–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è.
–ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–º–æ—â—å –æ—Ç —à–∫–æ–ª—ã, –Ω–æ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ."""
}
def analyze_request_type(user_message):
    message_lower = user_message.lower()
    sensitive_keywords = ['—Ä–∞–∑–≤–æ–¥', '—Ä–∞–∑–≤–µ–ª–∏—Å—å', '—Å–º–µ—Ä—Ç—å', '—É–º–µ—Ä', '—É–º–µ—Ä–ª–∞', '–±–æ–ª–µ–∑–Ω—å', '–±–æ–ª–µ–µ—Ç', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–∞–≤–º–∞', '–≥–æ—Ä–µ', '–ø–æ—Ç–µ—Ä—è']
    if any(word in message_lower for word in sensitive_keywords):
        return "sensitive"
    trial_keywords = ['–ø—Ä–æ–±–Ω—ã–π', '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ø–æ–ø—Ä–æ–±—É–µ–º', '–º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '—Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–¥–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '—Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å']
    if any(word in message_lower for word in trial_keywords):
        return "trial_lesson"
    info_keywords = ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–∑–∞–ø–∏—Å—å', '–∫–æ–≥–¥–∞', '—Å–∫–æ–ª—å–∫–æ', '–≤—Ä–µ–º—è', '–∞–¥—Ä–µ—Å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–≤–æ–∑—Ä–∞—Å—Ç', '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π', '—Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã']
    if any(word in message_lower for word in info_keywords):
        return "informational"
    philosophical_keywords = ['–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—Å–º—ã—Å–ª', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ—Ç–∏', '–ø–æ–∫–æ–ª–µ–Ω–∏–µ', '–≤ –Ω–∞—à–µ –≤—Ä–µ–º—è', '—Ä–∞–Ω—å—à–µ –±—ã–ª–æ', '–ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ—Å–ø–∏—Ç—ã–≤–∞—Ç—å', '–Ω–µ–≤–æ—Å–ø–∏—Ç–∞–Ω–Ω—ã–µ']
    if any(word in message_lower for word in philosophical_keywords):
        return "philosophical"
    return "consultational"
def should_add_lesson_link(user_message, request_type, conversation_length):
    if request_type == "trial_lesson":
        return True
    if request_type == "informational":
        return False
    if request_type == "sensitive":
        return False
    return conversation_length >= 18
def create_enriched_prompt(request_type, facts_context, history_context):
    system_prompt = f"""{BASE_PROMPT}

{STYLE_MODULES[request_type]}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –û–ø–∏—Ä–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Ñ–∞–∫—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ —à–∫–æ–ª–µ Ukido
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ñ–∞–∫—Ç–∞ - —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Å—è
- –ú–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω —Å–º–∞–π–ª–∏–∫ –∑–∞ –æ—Ç–≤–µ—Ç
- –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
- –û–±—Ä–∞—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ "–≤—ã"""
    
    return f"""{system_prompt}

[–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê]:
{history_context}

[–ö–û–ù–¢–ï–ö–°–¢ –∏–∑ –±–∞–∑—ã —Ñ–∞–∫—Ç–æ–≤]:
{facts_context}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: """
def get_facts_context(prompt):
    try:
        index_facts = get_pinecone_index()
        query_embedding = genai.embed_content(
            model=embedding_model, 
            content=prompt, 
            task_type="RETRIEVAL_QUERY"
        )['embedding']
        facts_results = index_facts.query(vector=query_embedding, top_k=3, include_metadata=True)
        facts_context = "\n".join([match['metadata']['text'] for match in facts_results['matches']])
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return facts_context, True
    except Exception as e:
        print(f"‚ö†Ô∏è RAG —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        fallback_facts = """Ukido - –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ soft skills –¥–ª—è –¥–µ—Ç–µ–π. 
–ö—É—Ä—Å—ã: "–Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä" (7-10 –ª–µ—Ç), "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å" (9-12 –ª–µ—Ç), "–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤" (11-14 –ª–µ—Ç).
–°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü. –ó–∞–Ω—è—Ç–∏—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω—É—Ç.
–î–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏."""
        return fallback_facts, False

def get_optimized_gemini_response(chat_id, prompt):
    """
    –§–ò–ù–ê–õ–¨–ù–ê–Ø –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.
    """
    request_type = analyze_request_type(prompt)
    facts_context, rag_available = get_facts_context(prompt)
    
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Redis, –∞ –Ω–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π >>>
    history = get_conversation_history_from_redis(chat_id)
    history_context = "\n".join(history)
    conversation_length = len(history)
    
    enriched_prompt = create_enriched_prompt(request_type, facts_context, history_context)
    full_prompt = enriched_prompt + prompt + "\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
    
    try:
        response = generation_model.generate_content(full_prompt)
        ai_response = response.text.strip()
        
        if should_add_lesson_link(prompt, request_type, conversation_length):
            if "[LESSON_LINK]" not in ai_response and request_type != "trial_lesson":
                ai_response += "\n\nüéØ –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞—à—É –º–µ—Ç–æ–¥–∏–∫—É –≤ –¥–µ–π—Å—Ç–≤–∏–∏? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: [LESSON_LINK]"
        
        if "[LESSON_LINK]" in ai_response:
            base_url = os.environ.get('BASE_URL')
            if base_url:
                lesson_url = f"{base_url}/lesson?user_id={chat_id}"
            else:
                lesson_url = f"http://localhost:5000/lesson?user_id={chat_id}"
                print("‚ö†Ô∏è BASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localhost fallback")
            ai_response = ai_response.replace("[LESSON_LINK]", lesson_url)
        
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ Redis >>>
        update_conversation_history_in_redis(chat_id, prompt, ai_response)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: —Ç–∏–ø={request_type}, –ø–∞–º—è—Ç—å={conversation_length//2} –æ–±–º–µ–Ω–æ–≤, RAG={'–¥–∞' if rag_available else '–Ω–µ—Ç'}")
        
        return ai_response
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini AI: {e}")
        return """–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é."""

# ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è HubSpot –∏ Flask –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def send_to_hubspot(user_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HubSpot CRM"""
    hubspot_url = "https://api.hubapi.com/crm/v3/objects/contacts"
    
    headers = {
        "Authorization": f"Bearer {HUBSPOT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    contact_data = {
        "properties": {
            "firstname": user_data["firstName"],
            "lastname": user_data["lastName"],
            "email": user_data["email"],
            "telegram_user_id": str(user_data.get("userId", ""))
        }
    }
    
    try:
        response = requests.post(hubspot_url, headers=headers, json=contact_data)
        
        if response.status_code == 201:
            print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ HubSpot!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HubSpot API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ HubSpot: {str(e)}")
        return False
def generate_first_follow_up_message(first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–ö–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ —É—Ä–æ–∫–∞ –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö? –£–¥–∞–ª–æ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?

üéØ –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º Ukido. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –Ω–∞—à—É –º–µ—Ç–æ–¥–∏–∫—É.

–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"""
def generate_second_follow_up_message(first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return f"""üåü {first_name}, –Ω–µ —Ö–æ—á—É –±—ã—Ç—å –Ω–∞–≤—è–∑—á–∏–≤—ã–º, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!

–ò—Å–∫—É—Å—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ. –ú–Ω–æ–≥–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–º–µ—á–∞—é—Ç —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É.

üí° –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ, –Ω–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ–∫–∞–∂—É—Ç –µ—â–µ –±–æ–ª—å—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è soft skills —É –¥–µ—Ç–µ–π.

–ó–∞–ø–∏—à–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"""
app = Flask(__name__)
def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True
            else:
                print(f"‚ö†Ô∏è Telegram API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
                
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
        
        if attempt < max_retries - 1:
            import time
            time.sleep(1)
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False
@app.route('/lesson')
def show_lesson_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = request.args.get('user_id')
    return render_template('lesson.html', user_id=user_id)
@app.route('/', methods=['POST'])
def webhook():
    """–ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    update = request.get_json()
    
    if "message" in update and "text" in update["message"]:
        chat_id = update["message"]["chat"]["id"]
        received_text = update["message"]["text"]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –§–ò–ù–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        ai_response = get_optimized_gemini_response(chat_id, received_text)
        send_telegram_message(chat_id, ai_response)

    return "ok", 200
@app.route('/submit-lesson-form', methods=['POST'])
def submit_lesson_form():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —É—Ä–æ–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ HubSpot CRM"""
    form_data = request.get_json()
    
    print("=== –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã ===")
    print(f"–ò–º—è: {form_data.get('firstName')}")
    print(f"–§–∞–º–∏–ª–∏—è: {form_data.get('lastName')}")
    print(f"Email: {form_data.get('email')}")
    print("==========================")
    
    hubspot_success = send_to_hubspot(form_data)
    
    if hubspot_success:
        print("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CRM!")
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CRM"}, 200
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CRM, –Ω–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"}, 200
@app.route('/hubspot-webhook', methods=['POST'])
def hubspot_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç HubSpot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        webhook_data = request.get_json()
        contact_id = webhook_data.get('vid')
        
        if contact_id:
            properties = webhook_data.get('properties', {})
            first_name = properties.get('firstname', {}).get('value', '–¥—Ä—É–≥')
            telegram_id = properties.get('telegram_user_id', {}).get('value')
            
            print(f"üÜî Contact ID: {contact_id}")
            print(f"üëã –ò–º—è: {first_name}")
            print(f"üì± Telegram ID: {telegram_id}")
            
            message_type = request.args.get('message_type', 'first_follow_up')
            print(f"üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
            
            if telegram_id:
                if message_type == 'first_follow_up':
                    follow_up_message = generate_first_follow_up_message(first_name)
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ü–ï–†–í–û–ï follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {first_name}")
                elif message_type == 'second_follow_up':
                    follow_up_message = generate_second_follow_up_message(first_name)
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –í–¢–û–†–û–ï follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {first_name}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
                    return "Unknown message type", 400
                
                send_telegram_message(telegram_id, follow_up_message)
                print(f"‚úÖ Follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ ({message_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω telegram_user_id –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            
            return "OK", 200
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å contact_id –∏–∑ webhook –¥–∞–Ω–Ω—ã—Ö")
            return "No contact ID found", 400
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug_mode = os.environ.get('DEBUG', 'false').lower() == 'true'
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û–ì–û Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üîß Debug —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if debug_mode else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    print("üí∞ –¢–æ–∫–µ–Ω-—ç–∫–æ–Ω–æ–º–∏–∫–∞: –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø (–∫–∞—á–µ—Å—Ç–≤–æ + —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)")
    print("üß† –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤: 9 –æ–±–º–µ–Ω–æ–≤ (–≤–Ω–µ—à–Ω—è—è, –≤ Redis)") # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Ç–æ—á–Ω–∏–ª–∏ –ø—Ä–æ –ø–∞–º—è—Ç—å
    print("üé≠ –°—Ç–∏–ª—å –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ: –û–ë–û–ì–ê–©–ï–ù–ù–´–ô")
    print("üìä Facts RAG: –ê–ö–¢–ò–í–ï–ù")
    
    app.run(debug=debug_mode, port=port, host='0.0.0.0')