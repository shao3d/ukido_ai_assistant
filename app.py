import os
import requests
import google.generativeai as genai
from flask import Flask, request, render_template
from dotenv import load_dotenv
from pinecone import Pinecone
import redis
import time
import json
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ---
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_HOST_FACTS = os.getenv("PINECONE_HOST_FACTS")
HUBSPOT_API_KEY = os.getenv("HUBSPOT_API_KEY")
REDIS_URL = os.getenv("REDIS_URL")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (REDIS_URL –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)
if not all([TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, PINECONE_API_KEY, PINECONE_HOST_FACTS, HUBSPOT_API_KEY]):
    required_vars = {
        'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN, 'GEMINI_API_KEY': GEMINI_API_KEY, 
        'PINECONE_API_KEY': PINECONE_API_KEY, 'PINECONE_HOST_FACTS': PINECONE_HOST_FACTS, 
        'HUBSPOT_API_KEY': HUBSPOT_API_KEY
    }
    missing_vars = [name for name, value in required_vars.items() if not value]
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ---
genai.configure(api_key=GEMINI_API_KEY)
generation_model = genai.GenerativeModel('gemini-1.5-flash')
embedding_model = 'models/text-embedding-004'

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø REDIS –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö ---
redis_client = None
redis_available = False

def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global redis_client, redis_available
    try:
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis client...")
        redis_client = redis.from_url(REDIS_URL, decode_responses=True)
        redis_client.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        redis_available = True
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        redis_available = False
        print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Redis –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_redis()

# Fallback –ø–∞–º—è—Ç—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
fallback_memory = {}

# --- –õ–ï–ù–ò–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø PINECONE –° FALLBACK ---
pinecone_index = None
pinecone_available = False

def get_pinecone_index():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
    global pinecone_index, pinecone_available
    
    if pinecone_index is not None:
        return pinecone_index
    
    try:
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone client...")
        pc = Pinecone(api_key=PINECONE_API_KEY)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è fallback: —Å–Ω–∞—á–∞–ª–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π, –ø–æ—Ç–æ–º –ø—Ä—è–º–æ–π
        try:
            # –ü–æ–¥—Ö–æ–¥ –ê - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π
            facts_description = pc.describe_index("ukido")
            pinecone_index = pc.Index(host=facts_description.host)
            print("‚úÖ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏")
        except Exception as dynamic_error:
            print(f"‚ö†Ô∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {dynamic_error}")
            # –ü–æ–¥—Ö–æ–¥ –ë - –ü—Ä—è–º–æ–π —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            pinecone_index = pc.Index(host=PINECONE_HOST_FACTS)
            print("‚úÖ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π host")
        
        pinecone_available = True
        return pinecone_index
        
    except Exception as e:
        pinecone_available = False
        print(f"‚ùå Pinecone –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ú–Ø–¢–ò –î–ò–ê–õ–û–ì–û–í ---
CONVERSATION_MEMORY_SIZE = 15  # 15 –æ–±–º–µ–Ω–æ–≤ = 30 —Å—Ç—Ä–æ–∫
CONVERSATION_EXPIRATION_SECONDS = 3600  # 1 —á–∞—Å

# --- –£–ü–†–û–©–ï–ù–ù–´–ï –ü–†–û–ú–ü–¢–´ –ë–ï–ó –°–¢–ò–õ–ï–í–´–• –ú–û–î–£–õ–ï–ô ---
BASE_PROMPT = """–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã soft skills –¥–ª—è –¥–µ—Ç–µ–π "Ukido". 
–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ.
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –Ω–æ–≤–æ–π —Ç–µ–º—ã, –∑–∞–±—É–¥—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ.
–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."""

# --- –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–¨–Æ –î–ò–ê–õ–û–ì–û–í ---

def get_conversation_history(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
    if redis_available:
        try:
            history_key = f"history:{chat_id}"
            history_list = redis_client.lrange(history_key, 0, -1)
            # Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            history_list.reverse()
            return history_list
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis: {e}, –∏—Å–ø–æ–ª—å–∑—É—é fallback –ø–∞–º—è—Ç—å")
            return fallback_memory.get(chat_id, [])
    else:
        return fallback_memory.get(chat_id, [])

def update_conversation_history(chat_id, user_message, ai_response):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.now().isoformat()
    
    if redis_available:
        try:
            history_key = f"history:{chat_id}"
            metadata_key = f"metadata:{chat_id}"
            
            # –ë–∞—Ç—á–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Redis –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            pipe = redis_client.pipeline()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            pipe.lpush(history_key, f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
            pipe.lpush(history_key, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (15 –æ–±–º–µ–Ω–æ–≤ = 30 —Å—Ç—Ä–æ–∫)
            pipe.ltrim(history_key, 0, (CONVERSATION_MEMORY_SIZE * 2) - 1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞
            pipe.expire(history_key, CONVERSATION_EXPIRATION_SECONDS)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "last_activity": timestamp,
                "question_count": len(get_conversation_history(chat_id)) // 2 + 1,
                "session_start": timestamp
            }
            pipe.hset(metadata_key, mapping=metadata)
            pipe.expire(metadata_key, CONVERSATION_EXPIRATION_SECONDS)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            pipe.execute()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis: {e}, –∏—Å–ø–æ–ª—å–∑—É—é fallback –ø–∞–º—è—Ç—å")
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
            if chat_id not in fallback_memory:
                fallback_memory[chat_id] = []
            
            fallback_memory[chat_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
            fallback_memory[chat_id].append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä fallback –ø–∞–º—è—Ç–∏
            max_lines = CONVERSATION_MEMORY_SIZE * 2
            if len(fallback_memory[chat_id]) > max_lines:
                fallback_memory[chat_id] = fallback_memory[chat_id][-max_lines:]
    else:
        # –†–∞–±–æ—Ç–∞–µ–º —Å fallback –ø–∞–º—è—Ç—å—é
        if chat_id not in fallback_memory:
            fallback_memory[chat_id] = []
        
        fallback_memory[chat_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
        fallback_memory[chat_id].append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
        
        max_lines = CONVERSATION_MEMORY_SIZE * 2
        if len(fallback_memory[chat_id]) > max_lines:
            fallback_memory[chat_id] = fallback_memory[chat_id][-max_lines:]

# --- –§–£–ù–ö–¶–ò–ò RAG –°–ò–°–¢–ï–ú–´ ---

def get_relevance_description(score):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç score —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    if score >= 0.9:
        return "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    elif score >= 0.7:
        return "–•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    elif score >= 0.5:
        return "–°—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    else:
        return "–°–ª–∞–±–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"

def get_speed_description(seconds):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    if seconds < 2:
        return "–ë—ã—Å—Ç—Ä–æ"
    elif seconds <= 5:
        return "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
    else:
        return "–ú–µ–¥–ª–µ–Ω–Ω–æ"

def get_facts_from_rag(user_message):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Pinecone —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    search_start = time.time()
    
    try:
        index = get_pinecone_index()
        if not index:
            return "", {"error": "Pinecone –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "fallback_used": True}
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        embedding_start = time.time()
        query_embedding = genai.embed_content(
            model=embedding_model, 
            content=user_message, 
            task_type="RETRIEVAL_QUERY"
        )['embedding']
        embedding_time = time.time() - embedding_start
        
        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        query_start = time.time()
        results = index.query(
            vector=query_embedding, 
            top_k=3, 
            include_metadata=True
        )
        query_time = time.time() - query_start
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –º–µ—Ç—Ä–∏–∫–∏
        context_chunks = []
        best_score = 0
        
        for match in results['matches']:
            if match['score'] > 0.5:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                context_chunks.append(match['metadata']['text'])
                best_score = max(best_score, match['score'])
        
        context = "\n".join(context_chunks)
        total_time = time.time() - search_start
        
        metrics = {
            "search_time": round(total_time, 2),
            "embedding_time": round(embedding_time, 2),
            "query_time": round(query_time, 2),
            "chunks_found": len(context_chunks),
            "best_score": round(best_score, 3),
            "relevance_desc": get_relevance_description(best_score),
            "speed_desc": get_speed_description(total_time),
            "success": True
        }
        
        return context, metrics
        
    except Exception as e:
        total_time = time.time() - search_start
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ fallback
        fallback_context = """Ukido - –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ soft skills –¥–ª—è –¥–µ—Ç–µ–π. 
–ö—É—Ä—Å—ã: "–Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä" (7-10 –ª–µ—Ç, 6000 –≥—Ä–Ω/–º–µ—Å), "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å" (9-12 –ª–µ—Ç, 7500 –≥—Ä–Ω/–º–µ—Å), "–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤" (11-14 –ª–µ—Ç, 8000 –≥—Ä–Ω/–º–µ—Å).
–ó–∞–Ω—è—Ç–∏—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω—É—Ç. –î–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏."""
        
        metrics = {
            "search_time": round(total_time, 2),
            "error": str(e),
            "fallback_used": True,
            "chunks_found": 1,
            "success": False
        }
        
        return fallback_context, metrics

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–û–í ---

def generate_response(chat_id, user_message, is_test_mode=False):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG –∏ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    start_time = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
    facts_context, rag_metrics = get_facts_from_rag(user_message)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    history = get_conversation_history(chat_id)
    history_context = "\n".join(history) if history else "–≠—Ç–æ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    full_prompt = f"""{BASE_PROMPT}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
{history_context}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ Ukido:
{facts_context}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"""
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
        gemini_start = time.time()
        response = generation_model.generate_content(full_prompt)
        ai_response = response.text.strip()
        gemini_time = time.time() - gemini_start
        
        # –ï—Å–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not is_test_mode and len(history) >= 10:  # –ü–æ—Å–ª–µ 5 –æ–±–º–µ–Ω–æ–≤
            if "–ø—Ä–æ–±–Ω—ã–π" not in ai_response.lower():
                base_url = os.environ.get('BASE_URL', 'http://localhost:5000')
                lesson_url = f"{base_url}/lesson?user_id={chat_id}"
                ai_response += f"\n\nüéØ –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞—à—É –º–µ—Ç–æ–¥–∏–∫—É –≤ –¥–µ–π—Å—Ç–≤–∏–∏? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: {lesson_url}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
        if not is_test_mode:
            update_conversation_history(chat_id, user_message, ai_response)
        
        total_time = time.time() - start_time
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –º–µ—Ç—Ä–∏–∫–∏
        response_metrics = {
            "total_time": round(total_time, 2),
            "gemini_time": round(gemini_time, 2),
            "rag_metrics": rag_metrics,
            "history_length": len(history),
            "redis_available": redis_available,
            "pinecone_available": pinecone_available
        }
        
        return ai_response, response_metrics
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        error_response = """–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."""
        
        if not redis_available:
            error_response += "\n\n‚ÑπÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é —Å–∏—Å—Ç–µ–º—ã. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è, –Ω–æ —è –º–æ–≥—É –Ω–µ –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
        
        return error_response, {"error": str(e), "total_time": time.time() - start_time}

# --- –¢–ï–°–¢–û–í–´–ï –í–û–ü–†–û–°–´ –î–õ–Ø –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–û–ì–û –î–ò–ê–õ–û–ì–ê ---

TEST_QUESTIONS = [
    "–†–∞—Å—Å–∫–∞–∂–∏ –æ —à–∫–æ–ª–µ Ukido",
    "–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?",
    "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—É—Ä—Å–µ –Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä",
    "–ö—Ç–æ –≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫—É—Ä—Å?",
    "–ê —Å–∫–æ–ª—å–∫–æ –æ–Ω —Å—Ç–æ–∏—Ç?",
    "–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏?",
    "–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π?",
    "–ê —á—Ç–æ —Å –∫—É—Ä—Å–æ–º –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å?",
    "–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞—à–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏?",
    "–ù–∞ —á–µ–º –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤–∞—à–∞ –º–µ—Ç–æ–¥–∏–∫–∞?",
    "–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π?",
    "–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫?",
    "–í–µ—Ä–Ω–µ–º—Å—è –∫ –Æ–Ω–æ–º—É –û—Ä–∞—Ç–æ—Ä—É - —Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ?",
    "–ö–∞–∫–∞—è –º–∏—Å—Å–∏—è –≤–∞—à–µ–π —à–∫–æ–ª—ã?",
    "–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥ - —á—Ç–æ –≤—ã –±—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ 8 –ª–µ—Ç?"
]

# --- HUBSPOT –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ---
def send_to_hubspot(user_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HubSpot CRM"""
    hubspot_url = "https://api.hubapi.com/crm/v3/objects/contacts"
    
    headers = {
        "Authorization": f"Bearer {HUBSPOT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    contact_data = {
        "properties": {
            "firstname": user_data["firstName"],
            "lastname": user_data["lastName"],
            "email": user_data["email"],
            "telegram_user_id": str(user_data.get("userId", ""))
        }
    }
    
    try:
        response = requests.post(hubspot_url, headers=headers, json=contact_data)
        
        if response.status_code == 201:
            print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ HubSpot!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HubSpot API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ HubSpot: {str(e)}")
        return False

def generate_first_follow_up_message(first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–ö–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ —É—Ä–æ–∫–∞ –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö? –£–¥–∞–ª–æ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?

üéØ –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º Ukido. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –Ω–∞—à—É –º–µ—Ç–æ–¥–∏–∫—É.

–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"""

def generate_second_follow_up_message(first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return f"""üåü {first_name}, –Ω–µ —Ö–æ—á—É –±—ã—Ç—å –Ω–∞–≤—è–∑—á–∏–≤—ã–º, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!

–ò—Å–∫—É—Å—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ. –ú–Ω–æ–≥–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–º–µ—á–∞—é—Ç —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É.

üí° –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ, –Ω–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ–∫–∞–∂—É—Ç –µ—â–µ –±–æ–ª—å—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è soft skills —É –¥–µ—Ç–µ–π.

–ó–∞–ø–∏—à–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"""

# --- –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï FLASK ---
app = Flask(__name__)

def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True
            else:
                print(f"‚ö†Ô∏è Telegram API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
                
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
        
        if attempt < max_retries - 1:
            time.sleep(1)
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False

# --- –ú–ê–†–®–†–£–¢–´ FLASK ---

@app.route('/lesson')
def show_lesson_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = request.args.get('user_id')
    return render_template('lesson.html', user_id=user_id)

@app.route('/', methods=['POST'])
def webhook():
    """–ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    update = request.get_json()
    
    if "message" in update and "text" in update["message"]:
        chat_id = update["message"]["chat"]["id"]
        received_text = update["message"]["text"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        ai_response, metrics = generate_response(chat_id, received_text)
        send_telegram_message(chat_id, ai_response)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {chat_id}: {metrics['total_time']}—Å, Redis: {metrics['redis_available']}, Pinecone: {metrics['pinecone_available']}")

    return "ok", 200

@app.route('/test-rag')
def test_rag_system():
    """–ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –°–ò–°–¢–ï–ú–´"""
    print("\n" + "="*60)
    print("üß™ –ù–ê–ß–ê–õ–û –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø RAG –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    test_chat_id = "test_user_session"
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    if redis_available:
        try:
            redis_client.delete(f"history:{test_chat_id}")
            redis_client.delete(f"metadata:{test_chat_id}")
        except:
            pass
    
    if test_chat_id in fallback_memory:
        del fallback_memory[test_chat_id]
    
    total_test_start = time.time()
    
    for i, question in enumerate(TEST_QUESTIONS, 1):
        print(f"\nüß™ === RAG –¢–ï–°–¢ ‚Ññ{i}/15 ===")
        print(f"‚ùì –í–û–ü–†–û–°: {question}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response, metrics = generate_response(test_chat_id, question, is_test_mode=False)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        rag_metrics = metrics.get('rag_metrics', {})
        
        if rag_metrics.get('success', False):
            print(f"\nüîç –ü–û–ò–°–ö –í PINECONE:")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {rag_metrics['search_time']} —Å–µ–∫ ({rag_metrics['speed_desc']})")
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {rag_metrics['chunks_found']}")
            print(f"   üéØ –õ—É—á—à–∏–π score: {rag_metrics['best_score']} ({rag_metrics['relevance_desc']})")
        else:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° PINECONE:")
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {rag_metrics.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            print(f"   üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: {rag_metrics.get('fallback_used', False)}")
        
        print(f"\nü§ñ –û–¢–í–ï–¢ GEMINI:")
        print(f"{response}")
        
        print(f"\n‚úÖ –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics['total_time']} —Å–µ–∫")
        print(f"   üß† –í—Ä–µ–º—è Gemini: {metrics['gemini_time']} —Å–µ–∫")
        print(f"   üíæ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {metrics['history_length']} —Å—Ç—Ä–æ–∫")
        print(f"   üîó Redis —Å—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if metrics['redis_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        print(f"   üîç Pinecone —Å—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if metrics['pinecone_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        print("="*50)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        time.sleep(0.5)
    
    total_test_time = time.time() - total_test_start
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_test_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {total_test_time/15:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üíæ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏: {'Redis' if redis_available else 'Fallback'}")
    print(f"üîç RAG —Å–∏—Å—Ç–µ–º–∞: {'Pinecone' if pinecone_available else 'Fallback'}")
    print("\nüìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –ª–æ–≥ –≤—ã—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ RAG grounding!")
    print("="*60)
    
    return {
        "message": "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        "questions_tested": len(TEST_QUESTIONS),
        "total_time": round(total_test_time, 2),
        "redis_status": "available" if redis_available else "unavailable",
        "pinecone_status": "available" if pinecone_available else "unavailable"
    }, 200

@app.route('/submit-lesson-form', methods=['POST'])
def submit_lesson_form():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —É—Ä–æ–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ HubSpot CRM"""
    form_data = request.get_json()
    
    print("=== –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã ===")
    print(f"–ò–º—è: {form_data.get('firstName')}")
    print(f"–§–∞–º–∏–ª–∏—è: {form_data.get('lastName')}")
    print(f"Email: {form_data.get('email')}")
    print("==========================")
    
    hubspot_success = send_to_hubspot(form_data)
    
    if hubspot_success:
        print("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CRM!")
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CRM"}, 200
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CRM, –Ω–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"}, 200

@app.route('/hubspot-webhook', methods=['POST'])
def hubspot_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç HubSpot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        webhook_data = request.get_json()
        contact_id = webhook_data.get('vid')
        
        if contact_id:
            properties = webhook_data.get('properties', {})
            first_name = properties.get('firstname', {}).get('value', '–¥—Ä—É–≥')
            telegram_id = properties.get('telegram_user_id', {}).get('value')
            
            print(f"üÜî Contact ID: {contact_id}")
            print(f"üëã –ò–º—è: {first_name}")
            print(f"üì± Telegram ID: {telegram_id}")
            
            message_type = request.args.get('message_type', 'first_follow_up')
            print(f"üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
            
            if telegram_id:
                if message_type == 'first_follow_up':
                    follow_up_message = generate_first_follow_up_message(first_name)
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ü–ï–†–í–û–ï follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {first_name}")
                elif message_type == 'second_follow_up':
                    follow_up_message = generate_second_follow_up_message(first_name)
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –í–¢–û–†–û–ï follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {first_name}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
                    return "Unknown message type", 400
                
                send_telegram_message(telegram_id, follow_up_message)
                print(f"‚úÖ Follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ ({message_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω telegram_user_id –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            
            return "OK", 200
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å contact_id –∏–∑ webhook –¥–∞–Ω–Ω—ã—Ö")
            return "No contact ID found", 400
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –í –ü–†–û–ì–†–ê–ú–ú–£ ---
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug_mode = os.environ.get('DEBUG', 'false').lower() == 'true'
    
    print("="*60)
    print(f"üöÄ –ó–ê–ü–£–°–ö –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ UKIDO AI ASSISTANT")
    print(f"üåê –ü–æ—Ä—Ç: {port}")
    print(f"üîß Debug —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if debug_mode else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"üíæ Redis: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if redis_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback —Ä–µ–∂–∏–º)'}")
    print(f"üîç Pinecone: –≥–æ—Ç–æ–≤ –∫ –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    print(f"üß† –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤: {CONVERSATION_MEMORY_SIZE} –æ–±–º–µ–Ω–æ–≤ ({CONVERSATION_MEMORY_SIZE * 2} —Å—Ç—Ä–æ–∫)")
    print(f"‚è±Ô∏è  TTL –¥–∏–∞–ª–æ–≥–æ–≤: {CONVERSATION_EXPIRATION_SECONDS} —Å–µ–∫—É–Ω–¥")
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ /test-rag")
    print("="*60)
    print("üìä –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG –æ—Ç–∫—Ä–æ–π—Ç–µ: https://–≤–∞—à-url.railway.app/test-rag")
    print("üîç –õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ Railway Deploy Logs")
    print("="*60)
    
    app.run(debug=debug_mode, port=port, host='0.0.0.0')