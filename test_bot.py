
import httpx
import asyncio
import json
import time
import random
from datetime import datetime

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
APP_URL = "https://ukidoaiassistant-production.up.railway.app/test-message"  # –ù–û–í–´–ô endpoint!
SCENARIOS_FILE = "test_scenarios.json"
TEST_USER_ID = random.randint(10000000, 99999999) 

# --- –¶–í–ï–¢–ê –î–õ–Ø –ö–†–ê–°–ò–í–û–ì–û –í–´–í–û–î–ê –í –ö–û–ù–°–û–õ–¨ ---
class colors:
    USER = '\033[94m'      # –°–∏–Ω–∏–π
    BOT = '\033[92m'       # –ó–µ–ª–µ–Ω—ã–π
    SYSTEM = '\033[93m'    # –ñ–µ–ª—Ç—ã–π
    ERROR = '\033[91m'     # –ö—Ä–∞—Å–Ω—ã–π
    SUCCESS = '\033[96m'   # –ì–æ–ª—É–±–æ–π
    ENDC = '\033[0m'       # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

def print_user_message(message):
    print(f"{colors.USER}üë§ [USER]: {message}{colors.ENDC}")

def print_bot_message(response_text, response_time):
    print(f"{colors.BOT}ü§ñ [BOT]: {response_text}{colors.ENDC}")
    print(f"{colors.SYSTEM}‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}s{colors.ENDC}")

def print_system_message(message):
    print(f"{colors.SYSTEM}--- {message} ---{colors.ENDC}")

def print_success_message(message):
    print(f"{colors.SUCCESS}‚úÖ {message}{colors.ENDC}")

def print_error_message(message):
    print(f"{colors.ERROR}‚ùå {message}{colors.ENDC}")

async def send_test_message(client, message_text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π test endpoint –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    """
    test_payload = {
        "message": message_text,
        "user_id": TEST_USER_ID
    }

    try:
        response = await client.post(APP_URL, json=test_payload, timeout=45.0)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                return {
                    'success': True,
                    'bot_response': result.get('bot_response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'),
                    'response_time': result.get('response_time', 0),
                    'error': None
                }
            else:
                return {
                    'success': False,
                    'bot_response': f"–û—à–∏–±–∫–∞ API: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    'response_time': 0,
                    'error': result.get('error')
                }
        else:
            error_text = response.text if response.text else f"HTTP {response.status_code}"
            return {
                'success': False,
                'bot_response': f"HTTP –æ—à–∏–±–∫–∞: {error_text}",
                'response_time': 0,
                'error': error_text
            }
            
    except httpx.TimeoutException:
        return {
            'success': False,
            'bot_response': "‚ùå –¢–∞–π–º–∞—É—Ç: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞",
            'response_time': 0,
            'error': 'timeout'
        }
    except httpx.RequestError as exc:
        return {
            'success': False,
            'bot_response': f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {exc}",
            'response_time': 0,
            'error': str(exc)
        }
    except Exception as e:
        return {
            'success': False,
            'bot_response': f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}",
            'response_time': 0,
            'error': str(e)
        }

async def analyze_bot_response(user_message, bot_response):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
    """
    user_lower = user_message.lower()
    response_lower = bot_response.lower()
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ fallback –æ—Ç–≤–µ—Ç—ã
    fallback_phrases = [
        "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç",
        "–≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç",
        "–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏",
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    ]
    
    if any(phrase in response_lower for phrase in fallback_phrases):
        issues.append("üö® FALLBACK –æ—Ç–≤–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
    if any(word in user_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç']):
        if '6000' in bot_response or '7000' in bot_response or '8000' in bot_response:
            issues.append("‚úÖ –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            issues.append("‚ùå –¶–µ–Ω—ã –ù–ï —É–∫–∞–∑–∞–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_message in [':)))', ':)', '–ª–æ–ª', '—Ö–∞-—Ö–∞']:
        if len(bot_response) < 50:
            issues.append("‚ùå –°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏—é")
        else:
            issues.append("‚úÖ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏—é")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —à–∫–æ–ª–µ
    if any(word in user_lower for word in ['—à–∫–æ–ª–∞', 'ukido', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ', '—á—Ç–æ —Ç–∞–∫–æ–µ']):
        if 'ukido' in response_lower or '–∫—É—Ä—Å' in response_lower:
            issues.append("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —à–∫–æ–ª–µ")
        else:
            issues.append("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ")
    
    return issues

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ test_scenarios.json
    try:
        with open(SCENARIOS_FILE, 'r', encoding='utf-8') as f:
            scenarios = json.load(f)
    except FileNotFoundError:
        print_error_message(f"–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ '{SCENARIOS_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print_system_message("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_scenarios.json —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏")
        return
    except json.JSONDecodeError:
        print_error_message(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ '{SCENARIOS_FILE}'.")
        return

    print_system_message("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UKIDO AI ASSISTANT")
    print_system_message(f"üì± Test User ID: {TEST_USER_ID}")
    print_system_message(f"üéØ Target URL: {APP_URL}")
    print_system_message("üîç –¢–µ–ø–µ—Ä—å –≤–∏–¥–∏–º –†–ï–ê–õ–¨–ù–´–ï –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞!")
    print("=" * 80)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    stats = {
        'total_tests': 0,
        'successful_tests': 0,
        'fallback_responses': 0,
        'fast_responses': 0,
        'avg_response_time': 0,
        'total_time': 0
    }

    async with httpx.AsyncClient() as client:
        total_scenarios = len(scenarios)
        
        for idx, scenario in enumerate(scenarios, 1):
            print_system_message(f"–°–¶–ï–ù–ê–†–ò–ô {idx}/{total_scenarios}: {scenario['scenario_name']}")
            
            for step_idx, step in enumerate(scenario['steps'], 1):
                print(f"\n[{step_idx}/{len(scenario['steps'])}]")
                print_user_message(step)
                
                start_time = time.time()
                result = await send_test_message(client, step)
                local_response_time = time.time() - start_time
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ
                response_time = result.get('response_time', local_response_time)
                
                stats['total_tests'] += 1
                stats['total_time'] += response_time
                
                if result['success']:
                    stats['successful_tests'] += 1
                    print_bot_message(result['bot_response'], response_time)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                    issues = await analyze_bot_response(step, result['bot_response'])
                    for issue in issues:
                        if '‚úÖ' in issue:
                            print_success_message(issue)
                        elif '‚ùå' in issue or 'üö®' in issue:
                            print_error_message(issue)
                            if 'FALLBACK' in issue:
                                stats['fallback_responses'] += 1
                        else:
                            print_system_message(issue)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                    if response_time < 1.0:
                        stats['fast_responses'] += 1
                        print_success_message("‚ö° –ë–´–°–¢–†–´–ô –æ—Ç–≤–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ fast response)")
                    
                else:
                    print_error_message(f"–û—à–∏–±–∫–∞: {result['bot_response']}")
                
                await asyncio.sleep(1.5)
            
            print_system_message(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù: {scenario['scenario_name']}")
            print("=" * 80)
            
            if idx < total_scenarios:
                await asyncio.sleep(2)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if stats['total_tests'] > 0:
        stats['avg_response_time'] = stats['total_time'] / stats['total_tests']
        success_rate = (stats['successful_tests'] / stats['total_tests']) * 100
        fallback_rate = (stats['fallback_responses'] / stats['total_tests']) * 100
        fast_rate = (stats['fast_responses'] / stats['total_tests']) * 100
        
        print_system_message("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print_success_message(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {stats['successful_tests']}/{stats['total_tests']} ({success_rate:.1f}%)")
        print_success_message(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.2f}s")
        print_success_message(f"–ë—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['fast_responses']} ({fast_rate:.1f}%)")
        
        if stats['fallback_responses'] > 0:
            print_error_message(f"Fallback –æ—Ç–≤–µ—Ç–æ–≤: {stats['fallback_responses']} ({fallback_rate:.1f}%)")
        else:
            print_success_message("Fallback –æ—Ç–≤–µ—Ç–æ–≤: 0 üéâ")

if __name__ == "__main__":
    print_system_message("üîß –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –±–æ—Ç–∞")
    print_system_message("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
    time.sleep(2)
    asyncio.run(main())
    print_system_message("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")