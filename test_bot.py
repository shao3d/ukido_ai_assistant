import httpx
import asyncio
import json
import time
import random
from datetime import datetime

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å —É–∫–∞–∑–∞–Ω URL –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
APP_URL = "http://127.0.0.1:5000" 
SCENARIOS_FILE = "test_scenarios.json"
TEST_USER_ID_BASE = random.randint(10000000, 99999999)

# --- –¶–í–ï–¢–ê –î–õ–Ø –í–´–í–û–î–ê ---
class colors:
    USER = '\033[94m'
    BOT = '\033[92m'
    SYSTEM = '\033[93m'
    ERROR = '\033[91m'
    SUCCESS = '\033[96m'
    ENDC = '\033[0m'

# ... (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ print_* –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def print_user_message(message):
    print(f"{colors.USER}üë§ [USER]: {message}{colors.ENDC}")

def print_bot_message(response_text, response_time):
    print(f"{colors.BOT}ü§ñ [BOT]: {response_text}{colors.ENDC}")
    print(f"{colors.SYSTEM}‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}s{colors.ENDC}")

def print_system_message(message):
    print(f"{colors.SYSTEM}--- {message} ---{colors.ENDC}")

def print_success_message(message):
    print(f"{colors.SUCCESS}‚úÖ {message}{colors.ENDC}")

def print_error_message(message):
    print(f"{colors.ERROR}‚ùå {message}{colors.ENDC}")


# --- üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ë–†–û–°–ê –ü–ê–ú–Ø–¢–ò üî• ---
async def clear_server_memory(client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ /clear-memory –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞."""
    clear_url = f"{APP_URL}/clear-memory"
    print_system_message(f"üßπ –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {clear_url}")
    try:
        response = await client.post(clear_url, timeout=10.0)
        if response.status_code == 200:
            print_success_message("–ü–∞–º—è—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ (–∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞).")
        else:
            print_error_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å. –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: {response.status_code}")
    except httpx.RequestError as exc:
        print_error_message(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–º—è—Ç–∏: {exc}")
        print_system_message("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–±—Ä–æ—Å–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä app.py –∑–∞–ø—É—â–µ–Ω.")


async def send_test_message(client, message_text, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π test endpoint."""
    test_endpoint_url = f"{APP_URL}/test-message"
    test_payload = {"message": message_text, "user_id": user_id}

    try:
        # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç, —Ç.–∫. Gemini 1.5 Pro –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –¥–æ–ª—å—à–µ
        response = await client.post(test_endpoint_url, json=test_payload, timeout=60.0)
        
        if response.status_code == 200:
            result = response.json()
            return {
                'success': True,
                'bot_response': result.get('bot_response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'),
                'response_time': result.get('response_time', 0),
            }
        else:
            return {'success': False, 'bot_response': f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} {response.text}"}
            
    except httpx.TimeoutException:
        return {'success': False, 'bot_response': "‚ùå –¢–∞–π–º–∞—É—Ç: Gemini 1.5 Pro –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
    except httpx.RequestError as exc:
        return {'success': False, 'bot_response': f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {exc}"}


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        with open(SCENARIOS_FILE, 'r', encoding='utf-8') as f:
            scenarios = json.load(f)
    except FileNotFoundError:
        print_error_message(f"–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ '{SCENARIOS_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    print_system_message("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UKIDO AI ASSISTANT (–õ–û–ö–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú)")
    print_system_message(f"üéØ Target URL: {APP_URL}")
    print("=" * 80)

    async with httpx.AsyncClient() as client:
        # --- üî• –í–´–ó–´–í–ê–ï–ú –°–ë–†–û–° –ü–ê–ú–Ø–¢–ò –í –ù–ê–ß–ê–õ–ï üî• ---
        await clear_server_memory(client)
        print("=" * 80)
        
        total_scenarios = len(scenarios)
        for idx, scenario in enumerate(scenarios, 1):
            scenario_user_id = f"{TEST_USER_ID_BASE}_{idx:02d}"
            print_system_message(f"–°–¶–ï–ù–ê–†–ò–ô {idx}/{total_scenarios}: {scenario['scenario_name']}")
            print_system_message(f"üë§ User ID –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_user_id}")
            
            for step_idx, step in enumerate(scenario['steps'], 1):
                print(f"\n[{step_idx}/{len(scenario['steps'])}]")
                print_user_message(step)
                
                result = await send_test_message(client, step, scenario_user_id)
                
                if result['success']:
                    print_bot_message(result['bot_response'], result['response_time'])
                else:
                    print_error_message(f"–û—à–∏–±–∫–∞: {result['bot_response']}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Gemini 1.5 Pro (2 –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç—É)
                await asyncio.sleep(31) 
            
            print_system_message(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù: {scenario['scenario_name']}")
            print("=" * 80)
            if idx < total_scenarios:
                await asyncio.sleep(2)

if __name__ == "__main__":
    asyncio.run(main())
    print_system_message("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

