import httpx
import asyncio
import json
import time
import random
from datetime import datetime

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å —É–∫–∞–∑–∞–Ω URL –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
APP_URL = "http://127.0.0.1:5000" 
SCENARIOS_FILE = "test_scenarios.json"
TEST_USER_ID_BASE = random.randint(10000000, 99999999)

# --- –¶–í–ï–¢–ê –î–õ–Ø –í–´–í–û–î–ê ---
class colors:
    USER = '\033[94m'
    BOT = '\033[92m'
    SYSTEM = '\033[93m'
    ERROR = '\033[91m'
    SUCCESS = '\033[96m'
    ENDC = '\033[0m'

def print_user_message(message):
    print(f"{colors.USER}üë§ [USER]: {message}{colors.ENDC}")

def print_bot_message(response_text, response_time):
    print(f"{colors.BOT}ü§ñ [BOT]: {response_text}{colors.ENDC}")
    print(f"{colors.SYSTEM}‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}s{colors.ENDC}")

def print_system_message(message):
    print(f"{colors.SYSTEM}--- {message} ---{colors.ENDC}")

def print_success_message(message):
    print(f"{colors.SUCCESS}‚úÖ {message}{colors.ENDC}")

def print_error_message(message):
    print(f"{colors.ERROR}‚ùå {message}{colors.ENDC}")

async def clear_server_memory(client, scenario_name=""):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    clear_url = f"{APP_URL}/clear-memory"
    context = f"–¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_name}'" if scenario_name else "–≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
    print_system_message(f"üßπ –°–±—Ä–æ—Å –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ {context}")
    
    try:
        response = await client.post(clear_url, timeout=10.0)
        if response.status_code == 200:
            print_success_message(f"–ü–∞–º—è—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ {context}")
        else:
            print_error_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å. –ö–æ–¥: {response.status_code}")
    except httpx.RequestError as exc:
        print_error_message(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–º—è—Ç–∏: {exc}")
        print_system_message("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–±—Ä–æ—Å–∞.")

async def send_test_message(client, message_text, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π test endpoint"""
    test_endpoint_url = f"{APP_URL}/test-message"
    test_payload = {"message": message_text, "user_id": user_id}

    try:
        # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç, —Ç.–∫. Gemini 1.5 Pro –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –¥–æ–ª—å—à–µ
        response = await client.post(test_endpoint_url, json=test_payload, timeout=60.0)
        
        if response.status_code == 200:
            result = response.json()
            return {
                'success': True,
                'bot_response': result.get('bot_response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'),
                'response_time': result.get('response_time', 0),
            }
        else:
            return {'success': False, 'bot_response': f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} {response.text}"}
            
    except httpx.TimeoutException:
        return {'success': False, 'bot_response': "‚ùå –¢–∞–π–º–∞—É—Ç: Gemini 1.5 Pro –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
    except httpx.RequestError as exc:
        return {'success': False, 'bot_response': f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {exc}"}

async def main():
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        with open(SCENARIOS_FILE, 'r', encoding='utf-8') as f:
            scenarios = json.load(f)
    except FileNotFoundError:
        print_error_message(f"–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ '{SCENARIOS_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    print_system_message("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UKIDO AI ASSISTANT (–õ–û–ö–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú)")
    print_system_message(f"üéØ Target URL: {APP_URL}")
    print_system_message(f"üìÅ –°—Ü–µ–Ω–∞—Ä–∏–∏: {SCENARIOS_FILE}")
    print("=" * 80)

    async with httpx.AsyncClient() as client:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await clear_server_memory(client, "–ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_scenarios = len(scenarios)
        
        for idx, scenario in enumerate(scenarios, 1):
            scenario_user_id = f"{TEST_USER_ID_BASE}_{idx:02d}"
            
            print_system_message(f"üé≠ –ù–û–í–´–ô –î–ò–ê–õ–û–ì: –°–¶–ï–ù–ê–†–ò–ô {idx}/{total_scenarios}")
            print_system_message(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {scenario['scenario_name']}")
            print_system_message(f"üë§ User ID: {scenario_user_id}")
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
            if idx > 1:  # –î–ª—è 2-–≥–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (1-–π —É–∂–µ –æ—á–∏—â–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ)
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                await clear_server_memory(client, scenario['scenario_name'])
                print()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            for step_idx, step in enumerate(scenario['steps'], 1):
                print(f"\n[{step_idx}/{len(scenario['steps'])}]")
                print_user_message(step)
                
                result = await send_test_message(client, step, scenario_user_id)
                
                if result['success']:
                    print_bot_message(result['bot_response'], result['response_time'])
                else:
                    print_error_message(f"–û—à–∏–±–∫–∞: {result['bot_response']}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                if step_idx < len(scenario['steps']):  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
                    await asyncio.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
            
            print_success_message(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù –î–ò–ê–õ–û–ì: {scenario['scenario_name']}")
            print("=" * 80)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏ (—Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏)
            if idx < total_scenarios:
                print_system_message("üí§ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º...")
                await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏

if __name__ == "__main__":
    asyncio.run(main())
    print_system_message("üèÅ –í–°–ï –î–ò–ê–õ–û–ì–ò –ó–ê–í–ï–†–®–ï–ù–´ - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ")
    print_system_message("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å app.py –∏ –≤ –ø–∞–ø–∫–µ rag_debug_logs/")