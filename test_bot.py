import httpx
import asyncio
import json
import time
import random
from datetime import datetime

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å —É–∫–∞–∑–∞–Ω URL –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
APP_URL = "http://127.0.0.1:5000" 
SCENARIOS_FILE = "test_scenarios.json"
TEST_USER_ID_BASE = random.randint(10000000, 99999999)

# --- –¶–í–ï–¢–ê –î–õ–Ø –í–´–í–û–î–ê ---
class colors:
    USER = '\033[94m'
    BOT = '\033[92m'
    SYSTEM = '\033[93m'
    ERROR = '\033[91m'
    SUCCESS = '\033[96m'
    ENDC = '\033[0m'

def print_user_message(message):
    print(f"{colors.USER}üë§ [USER]: {message}{colors.ENDC}")

def print_bot_message(response_text, response_time):
    print(f"{colors.BOT}ü§ñ [BOT]: {response_text}{colors.ENDC}")
    print(f"{colors.SYSTEM}‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}s{colors.ENDC}")

def print_system_message(message):
    print(f"{colors.SYSTEM}--- {message} ---{colors.ENDC}")

def print_success_message(message):
    print(f"{colors.SUCCESS}‚úÖ {message}{colors.ENDC}")

def print_error_message(message):
    print(f"{colors.ERROR}‚ùå {message}{colors.ENDC}")

async def clear_server_memory(client, scenario_name=""):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    clear_url = f"{APP_URL}/clear-memory"
    context = f"–¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_name}'" if scenario_name else "–≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
    print_system_message(f"üßπ –°–±—Ä–æ—Å –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ {context}")
    
    try:
        response = await client.post(clear_url, timeout=10.0)
        if response.status_code == 200:
            print_success_message(f"–ü–∞–º—è—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ {context}")
        else:
            print_error_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å. –ö–æ–¥: {response.status_code}")
    except httpx.RequestError as exc:
        print_error_message(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–º—è—Ç–∏: {exc}")
        print_system_message("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–±—Ä–æ—Å–∞.")

async def send_test_message(client, message_text, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π test endpoint"""
    test_endpoint_url = f"{APP_URL}/test-message"
    test_payload = {"message": message_text, "user_id": user_id}

    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∞–π–º–∞—É—Ç –¥–ª—è GPT-4o mini (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º Gemini)
        response = await client.post(test_endpoint_url, json=test_payload, timeout=30.0)
        
        if response.status_code == 200:
            result = response.json()
            return {
                'success': True,
                'bot_response': result.get('bot_response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'),
                'response_time': result.get('response_time', 0),
            }
        else:
            return {'success': False, 'bot_response': f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} {response.text}"}
            
    except httpx.TimeoutException:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ GPT-4o mini
        return {'success': False, 'bot_response': "‚ùå –¢–∞–π–º–∞—É—Ç: GPT-4o mini –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
    except httpx.RequestError as exc:
        return {'success': False, 'bot_response': f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {exc}"}

async def main():
    """‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ª—é–±–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        with open(SCENARIOS_FILE, 'r', encoding='utf-8') as f:
            scenarios = json.load(f)
    except FileNotFoundError:
        print_error_message(f"–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ '{SCENARIOS_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–¶–ï–ù–ê–†–ò–ï–í
    total_scenarios = len(scenarios)
    
    print_system_message("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UKIDO AI ASSISTANT (–õ–û–ö–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú)")
    print_system_message(f"üéØ Target URL: {APP_URL}")
    print_system_message(f"üìÅ –°—Ü–µ–Ω–∞—Ä–∏–∏: {SCENARIOS_FILE}")
    print_system_message(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {total_scenarios}")
    print("=" * 80)

    async with httpx.AsyncClient() as client:
        # ‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –≤ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await clear_server_memory(client, "–ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        # ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –¶–ò–ö–õ –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        for idx, scenario in enumerate(scenarios, 1):
            scenario_user_id = f"{TEST_USER_ID_BASE}_{idx:02d}"
            
            print_system_message(f"üé≠ –ù–û–í–´–ô –î–ò–ê–õ–û–ì: –°–¶–ï–ù–ê–†–ò–ô {idx}/{total_scenarios}")
            print_system_message(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {scenario['scenario_name']}")
            print_system_message(f"üë§ User ID: {scenario_user_id}")
            
            # ‚úÖ –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
            if idx > 1:  
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                await clear_server_memory(client, scenario['scenario_name'])
                print()
            
            # ‚úÖ –í–´–ü–û–õ–ù–ï–ù–ò–ï –®–ê–ì–û–í —Å—Ü–µ–Ω–∞—Ä–∏—è
            steps = scenario.get('steps', [])
            total_steps = len(steps)
            
            for step_idx, step in enumerate(steps, 1):
                print(f"\n[{step_idx}/{total_steps}]")
                print_user_message(step)
                
                result = await send_test_message(client, step, scenario_user_id)
                
                if result['success']:
                    print_bot_message(result['bot_response'], result['response_time'])
                else:
                    print_error_message(f"–û—à–∏–±–∫–∞: {result['bot_response']}")
                
                # ‚úÖ –ü–ê–£–ó–ê –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
                if step_idx < total_steps:  
                    await asyncio.sleep(1.5)  # –£–º–µ–Ω—å—à–µ–Ω–∞ —Å 2s –¥–æ 1.5s –¥–ª—è GPT-4o mini
            
            print_success_message(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù –î–ò–ê–õ–û–ì: {scenario['scenario_name']}")
            print("=" * 80)
            
            # ‚úÖ –ü–ê–£–ó–ê –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏ (—Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏)
            if idx < total_scenarios:
                print_system_message("üí§ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º...")
                await asyncio.sleep(2)  # –£–º–µ–Ω—å—à–µ–Ω–∞ —Å 3s –¥–æ 2s

if __name__ == "__main__":
    asyncio.run(main())
    print_system_message("üèÅ –í–°–ï –î–ò–ê–õ–û–ì–ò –ó–ê–í–ï–†–®–ï–ù–´ - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ")
    print_system_message(f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å app.py –∏ –≤ –ø–∞–ø–∫–µ rag_debug_logs/")
    print_system_message(f"üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 2x GPT-4o mini (ChatEngine + –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)")
