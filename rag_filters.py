# rag_filters.py
from typing import Dict, List
import logging

class SmartQueryFilter:
    """–£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è RAG –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞"""

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def analyze_query_intent(self, query: str) -> Dict:
        """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ keywords"""
        query_lower = query.lower()

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        if any(word in query_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º', '—Å–∫–∏–¥–∫', '–æ–ø–ª–∞—Ç', '—Ç–∞—Ä–∏—Ñ', '–¥–µ–Ω—å–≥', '–≥—Ä–Ω']):
            return {'category': 'pricing', 'needs_specific': True}

        if any(word in query_lower for word in ['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç', '—É—á–∏—Ç–µ–ª', '–ø–µ–¥–∞–≥–æ–≥', '—Ç—Ä–µ–Ω–µ—Ä', '–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫']):
            # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            if any(word in query_lower for word in ['–æ–ø—ã—Ç', '—Å—Ç–∞–∂', '–ª–µ—Ç —Ä–∞–±–æ—Ç', '–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü']):
                return {'category': 'teacher_experience', 'needs_specific': True}
            return {'category': 'teachers', 'needs_specific': True}

        if any(word in query_lower for word in ['–±–æ–ª–µ–∑–Ω', '–¥–∏–∞–±–µ—Ç', '–∞—É—Ç–∏–∑–º', '—Å–¥–≤–≥', '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç', '–∏–Ω–≤–∞–ª–∏–¥']):
            return {'category': 'special_needs', 'needs_specific': True}

        if any(word in query_lower for word in ['–∫–∞–ø–∏—Ç–∞–Ω –ø—Ä–æ–µ–∫—Ç', '—é–Ω—ã–π –æ—Ä–∞—Ç–æ—Ä', '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω']):
            return {'category': 'courses', 'needs_specific': True}

        if any(word in query_lower for word in ['linux', 'windows', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '4g']):
            return {'category': 'technical', 'needs_specific': True}

        return {'category': 'general', 'needs_specific': False}

    def get_metadata_filters(self, intent: Dict, query: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç LlamaIndex-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""

        # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, LlamaIndex + Pinecone –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        # –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –Ω–æ –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ
        self.logger.info(f"üìé –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è={intent['category']}")

        # TODO: –ö–æ–≥–¥–∞ LlamaIndex —É–ª—É—á—à–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å Pinecone,
        # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∏—Ö API
        return None
